// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Ziti Edge",
    "contact": {},
    "version": "0.16.3"
  },
  "host": "demo.ziti.dev",
  "basePath": "/edge/v1",
  "paths": {
    "/": {
      "get": {
        "security": [],
        "tags": [
          "Informational"
        ],
        "summary": "Returns version information",
        "operationId": "listRoot",
        "responses": {
          "200": {
            "$ref": "#/responses/listVersion"
          }
        }
      }
    },
    "/.well-known/est/cacerts": {
      "get": {
        "security": [],
        "description": "This endpoint is used during enrollments to bootstrap trust between enrolling clients and the Ziti Edge API.\nThis endpoint returns a base64 encoded PKCS7 store. The content can be base64 decoded and parsed by any library\nthat supports parsing PKCS7 stores.\n",
        "produces": [
          "application/pkcs7-mime"
        ],
        "tags": [
          "Well Known"
        ],
        "summary": "Get CA Cert Store",
        "operationId": "listWellKnownCas",
        "responses": {
          "200": {
            "description": "A base64 encoded PKCS7 store",
            "schema": {
              "type": "string",
              "example": "MIIMUQYJKoZIhvcNAQcCoIIMQjCCDD4CAQExADALBgkqhkiG9w0BBwGgggwkMIIG BjCCA+6gAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwgZcxCzAJBgNVBAYTAlVTMRcw FQYDVQQIDA5Ob3J0aCBDYXJvbGluYTESMBAGA1UEBwwJQ2hhcmxvdHRlMRMwEQYD VQQKDApOZXRGb3VuZHJ5MSkwJwYDVQQLDCBOZXRGb3VuZHJ5IENlcnRpZmljYXRl IEF1dGhvcml0eTEbMBkGA1UEAwwSTmV0Rm91bmRyeSBSb290IENBMB4XDTE4MDUx ODE2NTcyM1oXDTI4MDUxNTE2NTcyM1owgYsxCzAJBgNVBAYTAlVTMRcwFQYDVQQI DA5Ob3J0aCBDYXJvbGluYTETMBEGA1UECgwKTmV0Rm91bmRyeTEpMCcGA1UECwwg TmV0Rm91bmRyeSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxIzAhBgNVBAMMGk5ldEZv dW5kcnkgSW50ZXJtZWRpYXRlIENBMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC CgKCAgEAsb1EPhMUweS9WpjT7L54xAOmZqugJ6fhSrFfLUwNUy172q+ASvZTpT1z KIPcZpGmPB3TX2bHaAR67BbRkUR11JgWE3U8+FsGrYmPZtaKM6fg8Mh0WZ41oMYQ NJyQixOktrgqfybyJoT5PeT5AA7QQmd8mku2X9nkAu6gWPf2nHNc7SeQdijmyQQa VK3oqyaxOzWzsU/XbfMEz/ObkefUxgt5Z6jlK0xcW0Q+QgtawMKLUiuo6obWRPcl 7Hm9Sze8XJS5pbvS5JkUszxoRZuDVHZylrlHIpA/IL+BnvS+M7SP28UWe9skrv/s 6ACpJtuPJ1EYf5fakugOpY7i+hq7YNi//csbc49Qjn2OtttrR7JcTaHUEU1I/tQb QGAtNkI4pJjRVUdDawQFQlWHZD1COixNLErs2HzAI00DhLrY6SKITI/kjN0Xx010 XdMcdfay0PLWm6RwxiRmMQFL4GNIC895NF1q6xV4W4rWgqUNlcvKpy+i1chWpRbU He16ul0qh10fcESrRvAbXn5YrQJLrwbSr+85ubN8lYdNLE0qg2cIXZlUilarZZzW ghtCe+KkUpjfRuAi/CqfSwNK3QXEfeVEK6S49mHeSekOizFIw7fmDhCz9vXwMOnb ryRSLEJks0gIRcSDVChXheAqC98y4kcQdniNWFnqJXoqA+rrSokCAwEAAaNmMGQw HQYDVR0OBBYEFK8UXC/sq6dGVFAqEXHsQDzqzwuUMB8GA1UdIwQYMBaAFEHz6RRu OuXj2mwAzOeUinfWeivpMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQD AgGGMA0GCSqGSIb3DQEBCwUAA4ICAQBDAAaOE2Nbb49eOjyTNxIeOB+ZKQjJ1hUE gRrootAA8NYbtKW/vyxTWnNi5XOGXd4DFS9OKZ0mL/7NyLc0mbTwPH2ZT8KTPUTS Cpo6yktZ/7TMjyAtWZiOMg2EH+6m/nlNSXk/v5fb8+JQLdZfpxoA017dHh3tc8l7 KOskCZNwQHgF/YMXrPXUNbsGkXRuJLtpjPw5O9GvPys7p+a1aJH1WCTly9zfB6j+ rMF+UGCPDT30sxitVlohik83j6pKLgEAP/gi8nJbILlTP7ce+gJeHR2tfDvmK91X 6QgCF2STUFBU7/9H1/pPRRykOxQpAd8xqSgqGEyp9Ie4tysZjwoUEnG8IVJ5ykrI Fximvnb4B+LABV9WEo08n8m1R8wEryrISi8fBPn3Pr5nuayOfFLa15CLTkZF40FN 8ika1qNZy8bWRDwTZJQUUb7VCheRWcMwdZdNmhl3J+VZLpQ+ruW7b2ajwacHz5Nw BHKNcmxXb/4vHq/BnlcayHnSqT6036+OZQ+owDegcYmWV6LaM7xLErjHz2EE38M2 YSiW5SU1zluDe+iHb6l3Gd3Fj/X1gkMWFgYh0XPMSUSyimLNYzy4THKzmWlcQNFo LLiIDbLrMt+vk+vBkIsNTTPXRJOFPBhmIF6uIUj+2YhzNotX/pQtqMKms3pPlmHq dH6biwygETCCBhYwggP+oAMCAQICCQDquKpymLJ5WzANBgkqhkiG9w0BAQsFADCB lzELMAkGA1UEBhMCVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRIwEAYDVQQH DAlDaGFybG90dGUxEzARBgNVBAoMCk5ldEZvdW5kcnkxKTAnBgNVBAsMIE5ldEZv dW5kcnkgQ2VydGlmaWNhdGUgQXV0aG9yaXR5MRswGQYDVQQDDBJOZXRGb3VuZHJ5 IFJvb3QgQ0EwHhcNMTgwNTE4MTY1NDQ3WhcNMzgwNTEzMTY1NDQ3WjCBlzELMAkG A1UEBhMCVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRIwEAYDVQQHDAlDaGFy bG90dGUxEzARBgNVBAoMCk5ldEZvdW5kcnkxKTAnBgNVBAsMIE5ldEZvdW5kcnkg Q2VydGlmaWNhdGUgQXV0aG9yaXR5MRswGQYDVQQDDBJOZXRGb3VuZHJ5IFJvb3Qg Q0EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDKq/Xa+749Cr3WJGYD DIEtNKIRnTFc6TeiRSm/O7hG2+1Nrh/dObjZJuDjsopWP8NFA/DwlNyEphYKAeSw HDmu+4nFd6ifoeDE2lYq6bNhLcgN+A3MlN5Phb2rnO32YYZwHXGWov+jtd2gaK0f WsH8CQxn6n2v7qvPMTeYFP8p4jqTZw2bvZWw+LMYTFCy541DFqQLQasMg10mXRAV XO7Oa9y+D1re1zLq4wS6u8ItJoKzfmvZkMvD90C/tQ4u0iJaL7GB2SE9MOPDeGVv pnoSAIkSVmvRDUAj2x9PuukykzoL1OAWzc5Cg+5LxRmLejVE7PvPcHaTtNag2tRD w2vbMeFKN8NvQH1QYcaPWZe4Vl9b6DAuTaH5RN919H/F+ZHyjZybVPwC14lflneI KyNy8JEV/YMIbEADWnuiedzDehk2Opn+0+9Zr2X/xfjCo8iWHFbNaVnQX7wdRaOo 783lEouncqe46FDBLBpyAuDKHQpIT3MK8rkC/1yBNxsH44vMweUZuK0u7PC9KHtm pQfuflYGfxA34kY6WU3jzyQHetoLYjoxTqNEEjuGpwy2o1j7RaCBEFIbYlnlbhpE WFTaQf96z2GQ6m1U3y7JyDflHSu9Fo1JNkG3qXsjDwda/6W7NRJRgdFrhnOwrm7F 6L9X4P1HnzU/VJL66LwPmiHVjQIDAQABo2MwYTAdBgNVHQ4EFgQUQfPpFG465ePa bADM55SKd9Z6K+kwHwYDVR0jBBgwFoAUQfPpFG465ePabADM55SKd9Z6K+kwDwYD VR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIB ACfU74aKWROaxnue8tZb5PFkEbnDRcRrKXRhnptA0vrgB4ydnYxX9hEBZD8o6PBy 3rewvl5meSOBE6zyb4JD80lHdzHSVFIwbzsNOeEjCslv/PA/3Y+J7DCt6gPNMDeY uEssdqeSiMoYz2gnven4flSMKgTAJd3/SpVrn35HzXiU9MkmFVpPEMnTctOjw+Jn cCkG5+D9N14dxtgZ/tUfbH+GUfhyGVxRdPrX5KQqAyapMfEaMXXa8KNs7PG+sDiS WI+Sg9jUGtxgkfKdVNtFW+QMXyy7eT3iXPA+1r2hFAhgfIaGtBJUhxPHMhKtjbAg AX+6+2D3GAbaD1+lcQHhKry3hygQ3OX79FJW6zyPS0tiV/LfovHqX/3x9q5PTVBO wEOS2/LCc4R2M7S+HIPf4eSJ+nH4uCIdJ42WCror/mRsuL7geCksi70GHuCynP4y qQFszu/UtbBEsN8loTnLpOInxaGB1Y8UPm14b2Lo1/3HkoMVh0/UaHJ0TmnZ1r7m fGhfRyAZYRdvT1sB+Eb4b5A2zEZqsTc9IwFOhnI4ZilPoZ5s2xejqrVw3GSvovEh dprrQmvxuh+VQ23y/+/4z9b2xWyDu2zVveB4whqPe2rkgxJrEl4GfLk2DW+dN6j8 3Zl4lPoUZYwzkC6raCaHyFlAoaTbqz0H6rvVJYxJPS6UoQAxAA=="
            }
          }
        }
      }
    },
    "/api-sessions": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Returns a list of active API sessions. The resources can be sorted, filtered, and paginated. This endpoint\nrequries admin access.\n",
        "produces": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "API Session"
        ],
        "summary": "List active API sessions",
        "operationId": "listAPISessions",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listAPISessions"
          }
        }
      }
    },
    "/api-sessions/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single API Session by id. Requires admin access.",
        "tags": [
          "API Session"
        ],
        "summary": "Retrieves a single API Session",
        "operationId": "detailAPISessions",
        "responses": {
          "200": {
            "$ref": "#/responses/detailAPISession"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Deletes and API sesion by id. Requires admin access.",
        "tags": [
          "API Session"
        ],
        "summary": "Deletes an API Sessions",
        "operationId": "deleteAPISessions",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "403": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/authenticate": {
      "post": {
        "security": [],
        "description": "Allows authentication  Methods include \"password\" and \"cert\"\n",
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate via a method supplied via a query string parameter",
        "operationId": "authenticate",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/authenticate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/detailCurrentAPISession"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "403": {
            "$ref": "#/responses/invalidAuthResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/authMethod"
        }
      ]
    },
    "/authenticators": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Returns a list of authenticators associated to identities. The resources can be sorted, filtered, and paginated.\nThis endpoint requries admin access.\n",
        "tags": [
          "Authenticator"
        ],
        "summary": "List authenticators",
        "operationId": "listAuthenticators",
        "responses": {
          "200": {
            "$ref": "#/responses/listAuthenticators"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Creates an authenticator for a specific identity. Requires admin access.\n",
        "tags": [
          "Authenticator"
        ],
        "summary": "Creates an authenticator",
        "operationId": "createAuthenticator",
        "parameters": [
          {
            "description": "A Authenticators create object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticatorCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create was successful",
            "schema": {
              "$ref": "#/definitions/authenticatorCreate"
            }
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/authenticators/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single authenticator by id. Requires admin access.",
        "tags": [
          "Authenticator"
        ],
        "summary": "Retrieves a single authenticator",
        "operationId": "detailAuthenticator",
        "responses": {
          "200": {
            "$ref": "#/responses/detailAuthenticator"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on an authenticator by id. Requires admin access.",
        "tags": [
          "Authenticator"
        ],
        "summary": "Update all fields on an authenticator",
        "operationId": "updateAuthenticator",
        "parameters": [
          {
            "description": "An authenticator put object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticatorUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an authenticator by id. Deleting all authenticators for an identity will make it impossible to log in.\nRequires admin access.\n",
        "tags": [
          "Authenticator"
        ],
        "summary": "Delete an Authenticator",
        "operationId": "deleteAuthenticator",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on an authenticator by id. Requires admin access.",
        "tags": [
          "Authenticator"
        ],
        "summary": "Update the supplied fields on an authenticator",
        "operationId": "patchAuthenticator",
        "parameters": [
          {
            "description": "An authenticator patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticatorPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/cas": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of CA resources; supports filtering, sorting, and pagination. Requires admin access.",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "List CAs",
        "operationId": "listCas",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listCas"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Creates a CA in an unverified state. Requires admin access.",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Creates a CA",
        "operationId": "createCa",
        "parameters": [
          {
            "description": "A CA to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/caCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/cas/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single CA by id. Requires admin access.",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Retrieves a single CA",
        "operationId": "detailCa",
        "responses": {
          "200": {
            "$ref": "#/responses/detailCa"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a CA by id. Requires admin access.",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Update all fields on a CA",
        "operationId": "updateCa",
        "parameters": [
          {
            "description": "A CA update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/caUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a CA by id. Deleting a CA will delete its associated certificate authenticators. This can make it\nimpossible for identities to authenticate if they no longer have any valid authenticators. Requires admin access.\n",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Delete a CA",
        "operationId": "deleteCa",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update only the supplied fields on a CA by id. Requires admin access.",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Update the supplied fields on a CA",
        "operationId": "patchCa",
        "parameters": [
          {
            "description": "A CA patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/caPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/cas/{id}/jwt": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "For CA auto enrollment, the enrollment JWT is static and provided on each CA resource. This endpoint provides\nthe jwt as a text response.\n",
        "produces": [
          "application/jwt"
        ],
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Retrieve the enrollment JWT for a CA",
        "operationId": "getCaJwt",
        "responses": {
          "200": {
            "description": "The result is the JWT text to validate the CA",
            "schema": {
              "type": "string"
            },
            "examples": {
              "application/jwt": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbSI6ImNhIiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6MTI 4MC8ifQ.Ot6lhNBSOw8ygHytdI5l7WDf9EWadOj44UPvJ0c-8mJ54fClWM3uMZrAHSSfV6KmOSZOeBBJe4VlNyoD-_MOECP0BzYSnSQP3E zJb0VlM-fFmGcKNGW157icyZNISfO43JL_Lw2QPBzTgikqSIj9eZnocC3BeAmZCHsVznnLfHWqDldcmuxnu-5MNOSrWV1x9iVcgLFlLHXK 2PLA4qIiZmlQTrQjpHJmUaoJ07mnj8hMKzxB3wBG8kpazjEo7HDRCO06aBH4eqFgf_l0iT8Dzcb31jquWMGUoSXPhf4lVJh_FiNcR1wVx- UiHLbG5h23Aqf1UJF-F38rc1FElKz0Zg"
            }
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/cas/{id}/verify": {
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Allows a CA to become verified by submitting a certificate in PEM format that has been signed by the target CA.\nThe common name on the certificate must match the verificationToken property of the CA. Unverfieid CAs can not\nbe used for enrollment/authentication. Requires admin access.\n",
        "consumes": [
          "text/plain"
        ],
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Verify a CA",
        "operationId": "verifyCa",
        "parameters": [
          {
            "description": "A PEM formatted certificate signed by the target CA with the common name matching the CA's validationToken",
            "name": "certificate",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/config-types": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of config-type resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Config"
        ],
        "summary": "List config-types",
        "operationId": "listConfigTypes",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listConfigTypes"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "tags": [
          "Config"
        ],
        "summary": "Create a config-type. Requires admin access.",
        "operationId": "createConfigType",
        "parameters": [
          {
            "description": "A config-type to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configTypeCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/config-types/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single config-type by id. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Retrieves a single config-type",
        "operationId": "detailConfigType",
        "responses": {
          "200": {
            "$ref": "#/responses/detailConfigType"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a config-type by id. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Update all fields on a config-type",
        "operationId": "updateConfigType",
        "parameters": [
          {
            "description": "A config-type update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configTypeUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a config-type by id. Removing a configuration type that are in use will result in a 409 conflict HTTP status code and error. All configurations of a type must be removed first.",
        "tags": [
          "Config"
        ],
        "summary": "Delete a config-type",
        "operationId": "deleteConfigType",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a config-type. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Update the supplied fields on a config-type",
        "operationId": "patchConfigType",
        "parameters": [
          {
            "description": "A config-type patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configTypePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/config-types/{id}/configs": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Lists the configs associated to a config-type. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Lists the configs of a specific config-type",
        "operationId": "listConfigsForConfigType",
        "responses": {
          "200": {
            "$ref": "#/responses/listConfigs"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/configs": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of config resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Config"
        ],
        "summary": "List configs",
        "operationId": "listConfigs",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listConfigs"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a config resource. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Create a config resource",
        "operationId": "createConfig",
        "parameters": [
          {
            "description": "A config to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/configs/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single config by id. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Retrieves a single config",
        "operationId": "detailConfig",
        "responses": {
          "200": {
            "$ref": "#/responses/detailConfig"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a config by id. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Update all fields on a config",
        "operationId": "updateConfig",
        "parameters": [
          {
            "description": "A config update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a config by id. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Delete a config",
        "operationId": "deleteConfig",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a config. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Update the supplied fields on a config",
        "operationId": "patchConfig",
        "parameters": [
          {
            "description": "A config patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/current-api-session": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves the API session that was used to issue the current request",
        "tags": [
          "Current API Session"
        ],
        "summary": "Return the current API session",
        "operationId": "getCurrentAPISession",
        "responses": {
          "200": {
            "$ref": "#/responses/detailCurrentAPISession"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Terminates the current API session",
        "tags": [
          "Current API Session"
        ],
        "summary": "Logout",
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/current-api-session/certificates": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of certificate resources for the current API session; supports filtering, sorting, and pagination",
        "tags": [
          "Current API Session"
        ],
        "summary": "List the ephemeral certificates available for the current API Session",
        "operationId": "listCurrentApiSessionCertificates",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listCurrentApiSessionCertificates"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Creates an ephemeral certificate for the current API Session. This endpoint expects a PEM encoded CSRs to be provided for fulfillment as a property of a JSON payload. It is up to the client to manage the private key backing the CSR request.",
        "tags": [
          "Current API Session"
        ],
        "summary": "Creates an ephemeral certificate for the current API Session",
        "operationId": "createCurrentApiSessionCertificate",
        "parameters": [
          {
            "description": "The payload describing the CSR used to create a session certificate",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/currentApiSessionCertificateCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createCurrentApiSessionCertificateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/current-api-session/certificates/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single ephemeral certificate by id",
        "tags": [
          "Current API Session"
        ],
        "summary": "Retrieves an ephemeral certificate",
        "operationId": "detailCurrentApiSessionCertificate",
        "responses": {
          "200": {
            "$ref": "#/responses/detailCurrentApiSessionCertificate"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an ephemeral certificateby id\n",
        "tags": [
          "Current API Session"
        ],
        "summary": "Delete an ephemeral certificate",
        "operationId": "deleteCurrentApiSessionCertificate",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/current-api-session/service-updates": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves data indicating the last time data relevant to this API Session was altered that would necessitate\nservice refreshes.\n",
        "tags": [
          "Current API Session",
          "Services"
        ],
        "summary": "Returns data indicating whether a client should updates it service list",
        "operationId": "listServiceUpdates",
        "responses": {
          "200": {
            "$ref": "#/responses/listCurrentApiSessionServiceUpdates"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/current-identity": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Returns the identity associated with the API sessions used to issue the current request",
        "tags": [
          "Current API Session"
        ],
        "summary": "Return the current identity",
        "operationId": "getCurrentIdentity",
        "responses": {
          "200": {
            "$ref": "#/responses/detailCurrentIdentity"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/current-identity/authenticators": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of authenticators assigned to the current API session's identity; supports filtering, sorting, and pagination.",
        "tags": [
          "Current API Session"
        ],
        "summary": "List authenticators for the current identity",
        "operationId": "listCurrentIdentityAuthenticators",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listAuthenticators"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/current-identity/authenticators/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single authenticator by id. Will only show authenticators assigned to the API session's identity.",
        "tags": [
          "Current API Session"
        ],
        "summary": "Retrieve an authenticator for the current identity",
        "operationId": "detailCurrentIdentityAuthenticator",
        "responses": {
          "200": {
            "$ref": "#/responses/detailAuthenticator"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on an authenticator by id.  Will only update authenticators assigned to the API session's\nidentity.\n",
        "tags": [
          "Current API Session"
        ],
        "summary": "Update all fields on an authenticator of this identity",
        "operationId": "updateCurrentIdentityAuthenticator",
        "parameters": [
          {
            "description": "An authenticator put object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticatorUpdateWithCurrent"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on an authenticator by id. Will only update authenticators assigned to the API\nsession's identity.\n",
        "tags": [
          "Current API Session"
        ],
        "summary": "Update the supplied fields on an authenticator of this identity",
        "operationId": "patchCurrentIdentityAuthenticator",
        "parameters": [
          {
            "description": "An authenticator patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticatorPatchWithCurrent"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/database/check-data-integrity": {
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Starts a data integrity scan on the datastore. Requires admin access. Only once instance may run at a time, including runs of fixDataIntegrity.",
        "tags": [
          "Database"
        ],
        "summary": "Starts a data integrity scan on the datastore",
        "operationId": "checkDataIntegrity",
        "responses": {
          "202": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "429": {
            "$ref": "#/responses/rateLimitedResponse"
          }
        }
      }
    },
    "/database/data-integrity-results": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Returns any results found from in-progress integrity checks. Requires admin access.",
        "tags": [
          "Database"
        ],
        "summary": "Returns any results found from in-progress integrity checks",
        "operationId": "dataIntegrityResults",
        "responses": {
          "200": {
            "$ref": "#/responses/dataIntegrityCheckResult"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/database/fix-data-integrity": {
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Runs a data integrity scan on the datastore, attempts to fix any issues it can, and returns any found issues. Requires admin access. Only once instance may run at a time, including runs of checkDataIntegrity.",
        "tags": [
          "Database"
        ],
        "summary": "Runs a data integrity scan on the datastore, attempts to fix any issues it can and returns any found issues",
        "operationId": "fixDataIntegrity",
        "responses": {
          "202": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "429": {
            "$ref": "#/responses/rateLimitedResponse"
          }
        }
      }
    },
    "/database/snapshot": {
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a new database snapshot. Requires admin access.",
        "tags": [
          "Database"
        ],
        "summary": "Create a new database snapshot",
        "operationId": "createDatabaseSnapshot",
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "429": {
            "$ref": "#/responses/rateLimitedResponse"
          }
        }
      }
    },
    "/edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge router policy resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "List edge router policies",
        "operationId": "listEdgeRouterPolicies",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listEdgeRouterPolicies"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create an edge router policy resource. Requires admin access.",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "Create an edge router policy resource",
        "operationId": "createEdgeRouterPolicy",
        "parameters": [
          {
            "description": "An edge router policy to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterPolicyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/edge-router-policies/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single edge router policy by id. Requires admin access.",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "Retrieves a single edge router policy",
        "operationId": "detailEdgeRouterPolicy",
        "responses": {
          "200": {
            "$ref": "#/responses/detailEdgeRouterPolicy"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on an edge router policy by id. Requires admin access.",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "Update all fields on an edge router policy",
        "operationId": "updateEdgeRouterPolicy",
        "parameters": [
          {
            "description": "An edge router policy update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterPolicyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an edge router policy by id. Requires admin access.",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "Delete an edge router policy",
        "operationId": "deleteEdgeRouterPolicy",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on an edge router policy. Requires admin access.",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "Update the supplied fields on an edge router policy",
        "operationId": "patchEdgeRouterPolicy",
        "parameters": [
          {
            "description": "An edge router policy patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterPolicyPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/edge-router-policies/{id}/edge-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge routers an edge router policy resources affects; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "List edge routers a policy affects",
        "operationId": "listEdgeRouterPolicyEdgeRouters",
        "responses": {
          "200": {
            "$ref": "#/responses/listEdgeRouters"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/edge-router-policies/{id}/identities": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identities an edge router policy resources affects; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "List identities an edge router policy affects",
        "operationId": "listEdgeRouterPolicyIdentities",
        "responses": {
          "200": {
            "$ref": "#/responses/listIdentities"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/edge-router-role-attributes": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of role attributes in use by edge routers; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Role Attributes"
        ],
        "summary": "List role attributes in use by edge routers",
        "operationId": "listEdgeRouterRoleAttributes",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listRoleAttributes"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/edge-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge router resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router"
        ],
        "summary": "List edge routers",
        "operationId": "listEdgeRouters",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/roleFilter"
          },
          {
            "$ref": "#/parameters/roleSemantic"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listEdgeRouters"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a edge router resource. Requires admin access.",
        "tags": [
          "Edge Router"
        ],
        "summary": "Create an edge router",
        "operationId": "createEdgeRouter",
        "parameters": [
          {
            "description": "A config-type to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/edge-routers/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single edge router by id. Requires admin access.",
        "tags": [
          "Edge Router"
        ],
        "summary": "Retrieves a single edge router",
        "operationId": "detailEdgeRouter",
        "responses": {
          "200": {
            "$ref": "#/responses/detailEdgeRouter"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on an edge router by id. Requires admin access.",
        "tags": [
          "Edge Router"
        ],
        "summary": "Update all fields on an edge router",
        "operationId": "updateEdgeRouter",
        "parameters": [
          {
            "description": "An edge router update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an edge router by id. Requires admin access.",
        "tags": [
          "Edge Router"
        ],
        "summary": "Delete an edge router",
        "operationId": "deleteEdgeRouter",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on an edge router. Requires admin access.",
        "tags": [
          "Edge Router"
        ],
        "summary": "Update the supplied fields on an edge router",
        "operationId": "patchEdgeRouter",
        "parameters": [
          {
            "description": "An edge router patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/edge-routers/{id}/edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge router policies that apply to the specified edge router.",
        "tags": [
          "Edge Router"
        ],
        "summary": "List the edge router policies that affect an edge router",
        "operationId": "listEdgeRouterEdgeRouterPolicies",
        "responses": {
          "200": {
            "$ref": "#/responses/listEdgeRouterPolicies"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/edge-routers/{id}/identities": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identities that may access services via the given edge router. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router"
        ],
        "summary": "List associated identities",
        "operationId": "listEdgeRouterIdentities",
        "responses": {
          "200": {
            "$ref": "#/responses/listIdentities"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/edge-routers/{id}/service-edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service policies policies that apply to the specified edge router.",
        "tags": [
          "Edge Router"
        ],
        "summary": "List the service policies that affect an edge router",
        "operationId": "listEdgeRouterServiceEdgeRouterPolicies",
        "responses": {
          "200": {
            "$ref": "#/responses/listServicePolicies"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/edge-routers/{id}/services": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of services that may be accessed via the given edge router. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router"
        ],
        "summary": "List associated services",
        "operationId": "listEdgeRouterServices",
        "responses": {
          "200": {
            "$ref": "#/responses/listServices"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/enroll": {
      "post": {
        "description": "endpoint defers to the logic in the more specific ` + "`" + `enroll/*` + "`" + ` endpoints",
        "consumes": [
          "application/pkcs10",
          "application/json",
          "application/x-pem-file",
          "text/plain"
        ],
        "produces": [
          "application/x-pem-file",
          "application/json"
        ],
        "tags": [
          "Enroll"
        ],
        "summary": "Legacy enrollment endpoint",
        "operationId": "enroll",
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/token-optional"
        }
      ]
    },
    "/enroll/ca": {
      "post": {
        "description": "For CA auto enrollment, an identity is not created beforehand.\nInstead one will be created during enrollment. The client will present a client certificate that is signed by a\nCertificate Authority that has been added and verified (See POST /cas and POST /cas/{id}/verify).\n\nDuring this process no CSRs are requires as the client should already be in possession of a valid certificate.\n",
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an identity with a pre-exchanged certificate",
        "operationId": "enrollCa",
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      }
    },
    "/enroll/erott": {
      "post": {
        "description": "Enrolls an edge-router via a one-time-token to establish a certificate based identity.\n",
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an edge-router",
        "operationId": "enrollErOtt",
        "responses": {
          "200": {
            "$ref": "#/responses/erottResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/token"
        }
      ]
    },
    "/enroll/otf": {
      "post": {
        "description": "Enroll an identity On-The-Fly. This enrollment method expects a PEM encoded CSR to be provided for fulfillment. \nIt is up to the enrolling identity to manage the private key backing the CSR request.\n",
        "consumes": [
          "application/x-pem-file"
        ],
        "produces": [
          "application/x-pem-file",
          "application/json"
        ],
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an identity On-The-Fly",
        "operationId": "enrollOtf",
        "responses": {
          "200": {
            "$ref": "#/responses/zitiSignedCert"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      }
    },
    "/enroll/ott": {
      "post": {
        "description": "Enroll an identity via a one-time-token which is supplied via a query string parameter. This enrollment method\nexpects a PEM encoded CSRs to be provided for fulfillment. It is up to the enrolling identity to manage the\nprivate key backing the CSR request.\n",
        "consumes": [
          "application/pkcs10"
        ],
        "produces": [
          "application/x-x509-user-cert"
        ],
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an identity via one-time-token",
        "operationId": "enrollOtt",
        "responses": {
          "200": {
            "$ref": "#/responses/zitiSignedCert"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/token"
        }
      ]
    },
    "/enroll/ottca": {
      "post": {
        "description": "Enroll an identity via a one-time-token that also requires a pre-exchanged client certificate to match a\nCertificate Authority that has been added and verified (See POST /cas and POST /cas{id}/verify). The client\nmust present a client certificate signed by CA associated with the enrollment. This enrollment is similar to\nCA auto enrollment except that is required the identity to be pre-created.\n\nAs the client certificate has been pre-exchanged there is no CSR input to this enrollment method.\n",
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an identity via one-time-token with a pre-exchanged client certificate",
        "operationId": "enrollOttCa",
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/token"
        }
      ]
    },
    "/enroll/updb": {
      "post": {
        "description": "Enrolls an identity via a one-time-token to establish an initial username and password combination\n",
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an identity via one-time-token",
        "operationId": "ernollUpdb",
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/token"
        }
      ]
    },
    "/enrollments": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of outstanding enrollments; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Enrollment"
        ],
        "summary": "List outstanding enrollments",
        "operationId": "listEnrollments",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listEnrollments"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/enrollments/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single outstanding enrollment by id. Requires admin access.",
        "tags": [
          "Enrollment"
        ],
        "summary": "Retrieves an outstanding enrollment",
        "operationId": "detailEnrollment",
        "responses": {
          "200": {
            "$ref": "#/responses/detailEnrollment"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an outstanding enrollment by id. Requires admin access.",
        "tags": [
          "Enrollment"
        ],
        "summary": "Delete an outstanding enrollment",
        "operationId": "deleteEnrollment",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/geo-regions": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of geo-regions; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Geo Region"
        ],
        "summary": "List available geo-regions",
        "operationId": "listGeoRegions",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listGeoRegions"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/geo-regions/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single geo-region by id. Requires admin access.",
        "tags": [
          "Geo Region"
        ],
        "summary": "Retrieves a geo-region",
        "operationId": "detailGeoRegion",
        "responses": {
          "200": {
            "$ref": "#/responses/detailGeoRegion"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/identities": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identity resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Identity"
        ],
        "summary": "List identities",
        "operationId": "listIdentities",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/roleFilter"
          },
          {
            "$ref": "#/parameters/roleSemantic"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listIdentities"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create an identity resource. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Create an identity resource",
        "operationId": "createIdentity",
        "parameters": [
          {
            "description": "An identity to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/identities/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single identity by id. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Retrieves a single identity",
        "operationId": "detailIdentity",
        "responses": {
          "200": {
            "$ref": "#/responses/detailIdentity"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on an identity by id. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Update all fields on an identity",
        "operationId": "updateIdentity",
        "parameters": [
          {
            "description": "An identity update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an identity by id. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Delete an identity",
        "operationId": "deleteIdentity",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on an identity. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Update the supplied fields on an identity",
        "operationId": "patchIdentity",
        "parameters": [
          {
            "description": "An identity patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/identities/{id}/edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge router policies that apply to the specified identity.",
        "tags": [
          "Identity"
        ],
        "summary": "List the edge router policies that affect an idenitty",
        "operationId": "listIdentitysEdgeRouterPolicies",
        "responses": {
          "200": {
            "$ref": "#/responses/listEdgeRouterPolicies"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/identities/{id}/edge-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge-routers that the given identity may use to access services. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Identity"
        ],
        "summary": "List accessible edge-routers",
        "operationId": "listIdentityEdgeRouters",
        "responses": {
          "200": {
            "$ref": "#/responses/listEdgeRouters"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/identities/{id}/policy-advice/{serviceId}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Analyzes policies to see if the given identity should be able to dial or bind the given service. |\nWill check services policies to see if the identity can access the service. Will check edge router policies |\nto check if the identity and service have access to common edge routers so that a connnection can be made. |\nWill also check if at least one edge router is on-line. Requires admin access.\n",
        "tags": [
          "Identity"
        ],
        "summary": "Analyze policies relating the given identity and service",
        "operationId": "getIdentityPolicyAdvice",
        "responses": {
          "200": {
            "$ref": "#/responses/getIdentityPolicyAdvice"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        },
        {
          "$ref": "#/parameters/serviceId"
        }
      ]
    },
    "/identities/{id}/posture-data": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Returns a nested map data represeting the posture data of the identity.\nThis data should be considered volatile.\n",
        "tags": [
          "Identity"
        ],
        "summary": "Retrieve the curent posture data for a specific identity.",
        "operationId": "getIdentityPostureData",
        "responses": {
          "200": {
            "$ref": "#/responses/getIdentityPostureData"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/identities/{id}/service-configs": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service configs associated to a specific identity",
        "tags": [
          "Identity"
        ],
        "summary": "List the service configs associated a specific identity",
        "operationId": "listIdentitysServiceConfigs",
        "responses": {
          "200": {
            "$ref": "#/responses/listServiceConfigs"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Associate service configs to a specific identity",
        "tags": [
          "Identity"
        ],
        "summary": "Associate service configs for a specific identity",
        "operationId": "associateIdentitysServiceConfigs",
        "parameters": [
          {
            "description": "An identity patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceConfigsAssignList"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Remove service configs from a specific identity",
        "tags": [
          "Identity"
        ],
        "summary": "Remove associated service configs from a specific identity",
        "operationId": "disassociateIdentitysServiceConfigs",
        "parameters": [
          {
            "description": "An array of service and config id pairs to remove",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/serviceConfigsAssignList"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/identities/{id}/service-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service policies that apply to the specified identity.",
        "tags": [
          "Identity"
        ],
        "summary": "List the service policies that affect an identity",
        "operationId": "listIdentityServicePolicies",
        "responses": {
          "200": {
            "$ref": "#/responses/listServicePolicies"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/identities/{id}/services": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of services that the given identity has access to. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Identity"
        ],
        "summary": "List accessible services",
        "operationId": "listIdentityServices",
        "responses": {
          "200": {
            "$ref": "#/responses/listEdgeRouters"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/identity-role-attributes": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of role attributes in use by identities; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Role Attributes"
        ],
        "summary": "List role attributes in use by identities",
        "operationId": "listIdentityRoleAttributes",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listRoleAttributes"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/identity-types": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identity types; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Identity"
        ],
        "summary": "List available identity types",
        "operationId": "listIdentityTypes",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listIdentityTypes"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/identity-types/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single identity type by id. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Retrieves a identity type",
        "operationId": "detailIdentityType",
        "responses": {
          "200": {
            "$ref": "#/responses/detailIdentityType"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/posture-check-types": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of posture check types\n",
        "produces": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "Posture Checks"
        ],
        "summary": "List a subset of posture check types",
        "operationId": "listPostureCheckTypes",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listPostureCheckTypes"
          }
        }
      }
    },
    "/posture-check-types/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single posture check type by id",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Retrieves a single posture check type",
        "operationId": "detailPostureCheckType",
        "responses": {
          "200": {
            "$ref": "#/responses/detailPostureCheckType"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/posture-checks": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of posture checks\n",
        "produces": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "Posture Checks"
        ],
        "summary": "List a subset of posture checks",
        "operationId": "listPostureChecks",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/roleFilter"
          },
          {
            "$ref": "#/parameters/roleSemantic"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listPostureChecks"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Creates a Posture Checks",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Creates a Posture Checks",
        "operationId": "createPostureCheck",
        "parameters": [
          {
            "description": "A Posture Checks to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostureCheckCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/posture-checks/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single Posture Checks by id",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Retrieves a single Posture Checks",
        "operationId": "detailPostureCheck",
        "responses": {
          "200": {
            "$ref": "#/responses/detailPostureCheck"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a Posture Checks by id",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Update all fields on a Posture Checks",
        "operationId": "updatePostureCheck",
        "parameters": [
          {
            "description": "A Posture Checks update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostureCheckUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Deletes and Posture Checks by id",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Deletes an Posture Checks",
        "operationId": "deletePostureCheck",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "403": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update only the supplied fields on a Posture Checks by id",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Update the supplied fields on a Posture Checks",
        "operationId": "patchPostureCheck",
        "parameters": [
          {
            "description": "A Posture Checks patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostureCheckPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/posture-response": {
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Submits posture responses",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Submit a posture response to a posture query",
        "operationId": "createPostureResponse",
        "parameters": [
          {
            "description": "A Posture Response",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostureResponseCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/protocols": {
      "get": {
        "security": [],
        "tags": [
          "Informational"
        ],
        "summary": "Return a list of the listening Edge protocols",
        "operationId": "listProtocols",
        "responses": {
          "200": {
            "$ref": "#/responses/listProtocols"
          }
        }
      }
    },
    "/service-edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service edge router policy resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "List service edge router policies",
        "operationId": "listServiceEdgeRouterPolicies",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listServiceEdgeRouterPolicies"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a service edge router policy resource. Requires admin access.",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "Create a service edge router policy resource",
        "operationId": "createServiceEdgeRouterPolicy",
        "parameters": [
          {
            "description": "A service edge router policy to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceEdgeRouterPolicyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/service-edge-router-policies/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single service edge policy by id. Requires admin access.",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "Retrieves a single service edge policy",
        "operationId": "detailServiceEdgeRouterPolicy",
        "responses": {
          "200": {
            "$ref": "#/responses/detailServiceEdgePolicy"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a service edge policy by id. Requires admin access.",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "Update all fields on a service edge policy",
        "operationId": "updateServiceEdgeRouterPolicy",
        "parameters": [
          {
            "description": "A service edge router policy update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceEdgeRouterPolicyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a service edge policy by id. Requires admin access.",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "Delete a service edge policy",
        "operationId": "deleteServiceEdgeRouterPolicy",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a service edge policy. Requires admin access.",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "Update the supplied fields on a service edge policy",
        "operationId": "patchServiceEdgeRouterPolicy",
        "parameters": [
          {
            "description": "A service edge router policy patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceEdgeRouterPolicyPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/service-edge-router-policies/{id}/edge-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "List the edge routers that a service edge router policy applies to",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "List the edge routers that a service edge router policy applies to",
        "operationId": "listServiceEdgeRouterPolicyEdgeRouters",
        "responses": {
          "200": {
            "$ref": "#/responses/listEdgeRouters"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/service-edge-router-policies/{id}/services": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "List the services that a service edge router policy applies to",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "List the services that a service edge router policy applies to",
        "operationId": "listServiceEdgeRouterPolicyServices",
        "responses": {
          "200": {
            "$ref": "#/responses/listServices"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/service-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service policy resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service Policy"
        ],
        "summary": "List service policies",
        "operationId": "listServicePolicies",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listServicePolicies"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a service policy resource. Requires admin access.",
        "tags": [
          "Service Policy"
        ],
        "summary": "Create a service policy resource",
        "operationId": "createServicePolicy",
        "parameters": [
          {
            "description": "A service policy to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicePolicyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/service-policies/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single service policy by id. Requires admin access.",
        "tags": [
          "Service Policy"
        ],
        "summary": "Retrieves a single service policy",
        "operationId": "detailServicePolicy",
        "responses": {
          "200": {
            "$ref": "#/responses/detailServicePolicy"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a service policy by id. Requires admin access.",
        "tags": [
          "Service Policy"
        ],
        "summary": "Update all fields on a service policy",
        "operationId": "updateServicePolicy",
        "parameters": [
          {
            "description": "A service policy update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicePolicyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a service policy by id. Requires admin access.",
        "tags": [
          "Service Policy"
        ],
        "summary": "Delete a service policy",
        "operationId": "deleteServicePolicy",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a service policy. Requires admin access.",
        "tags": [
          "Service Policy"
        ],
        "summary": "Update the supplied fields on a service policy",
        "operationId": "patchServicePolicy",
        "parameters": [
          {
            "description": "A service policy patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicePolicyPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/service-policies/{id}/identities": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identity resources that are affected by a service policy; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service Policy"
        ],
        "summary": "List identities a service policy affects",
        "operationId": "listServicePolicyIdentities",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listIdentities"
          },
          "400": {
            "$ref": "#/responses/notFoundResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/service-policies/{id}/posture-checks": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of posture check resources that are affected by a service policy; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service Policy"
        ],
        "summary": "List posture check a service policy includes",
        "operationId": "listServicePolicyPostureChecks",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listPostureChecks"
          },
          "400": {
            "$ref": "#/responses/notFoundResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/service-policies/{id}/services": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service resources that are affected by a service policy; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service Policy"
        ],
        "summary": "List services a service policy affects",
        "operationId": "listServicePolicyServices",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listServices"
          },
          "400": {
            "$ref": "#/responses/notFoundResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/service-role-attributes": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of role attributes in use by services; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Role Attributes"
        ],
        "summary": "List role attributes in use by services",
        "operationId": "listServiceRoleAttributes",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listRoleAttributes"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/services": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of config resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List services",
        "operationId": "listServices",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/roleFilter"
          },
          {
            "$ref": "#/parameters/roleSemantic"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listServices"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a services resource. Requires admin access.",
        "tags": [
          "Service"
        ],
        "summary": "Create a services resource",
        "operationId": "createService",
        "parameters": [
          {
            "description": "A service to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/services/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single service by id. Requires admin access.",
        "tags": [
          "Service"
        ],
        "summary": "Retrieves a single service",
        "operationId": "detailService",
        "responses": {
          "200": {
            "$ref": "#/responses/detailService"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a service by id. Requires admin access.",
        "tags": [
          "Service"
        ],
        "summary": "Update all fields on a service",
        "operationId": "updateService",
        "parameters": [
          {
            "description": "A service update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a service by id. Requires admin access.",
        "tags": [
          "Service"
        ],
        "summary": "Delete a service",
        "operationId": "deleteService",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a service. Requires admin access.",
        "tags": [
          "Service"
        ],
        "summary": "Update the supplied fields on a service",
        "operationId": "patchService",
        "parameters": [
          {
            "description": "A service patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/services/{id}/configs": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of config resources associated to a specific service; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List configs associated to a specific service",
        "operationId": "listServiceConfig",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listConfigs"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/services/{id}/edge-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge-routers that may be used to access the given service. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List accessible edge-routers",
        "operationId": "listServiceEdgeRouters",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listEdgeRouters"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/services/{id}/identities": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identities that have access to this service. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List identities with access",
        "operationId": "listServiceIdentities",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listIdentities"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/services/{id}/service-edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service edge router policy resources that affect a specific service; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List service edge router policies that affect a specific service",
        "operationId": "listServiceServiceEdgeRouterPolicies",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listServiceEdgeRouterPolicies"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/services/{id}/service-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service policy resources that affect specific service; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List service policies that affect a specific service",
        "operationId": "listServiceServicePolicies",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listServicePolicies"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/services/{id}/terminators": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of terminator resources that are assigned specific service; supports filtering, sorting, and pagination.\n",
        "tags": [
          "Service"
        ],
        "summary": "List of terminators assigned to a service",
        "operationId": "listServiceTerminators",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listTerminators"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/sessions": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of active sessions resources; supports filtering, sorting, and pagination. Requires admin access.\n\nSessions are tied to an API session and are moved when an API session times out or logs out. Active sessions\n(i.e. Ziti SDK connected to an edge router) will keep the session and API session marked as active.\n",
        "tags": [
          "Session"
        ],
        "summary": "List sessions",
        "operationId": "listSessions",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listSessions"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a session resource. Requires admin access.",
        "tags": [
          "Session"
        ],
        "summary": "Create a session resource",
        "operationId": "createSession",
        "parameters": [
          {
            "description": "A session to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sessionCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/sessionCreateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/sessions/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single session by id. Requires admin access.",
        "tags": [
          "Session"
        ],
        "summary": "Retrieves a single session",
        "operationId": "detailSession",
        "responses": {
          "200": {
            "$ref": "#/responses/detailSession"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a session by id. Requires admin access.",
        "tags": [
          "Session"
        ],
        "summary": "Delete a session",
        "operationId": "deleteSession",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/specs": {
      "get": {
        "security": [],
        "description": "Returns a list of spec files embedded within the controller for consumption/documentation/code geneartion",
        "tags": [
          "Informational"
        ],
        "summary": "Returns a list of API specs",
        "operationId": "listSpecs",
        "responses": {
          "200": {
            "$ref": "#/responses/listSpecs"
          }
        }
      }
    },
    "/specs/{id}": {
      "get": {
        "security": [],
        "description": "Returns single spec resource embedded within the controller for consumption/documentation/code geneartion",
        "tags": [
          "Informational"
        ],
        "summary": "Return a single spec resource",
        "operationId": "detailSpec",
        "responses": {
          "200": {
            "$ref": "#/responses/detailSpec"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/specs/{id}/spec": {
      "get": {
        "security": [],
        "description": "Return the body of the specification (i.e. Swagger, OpenAPI 2.0, 3.0, etc).",
        "produces": [
          "text/yaml",
          "application/json"
        ],
        "tags": [
          "Informational"
        ],
        "summary": "Returns the spec's file",
        "operationId": "detailSpecBody",
        "responses": {
          "200": {
            "$ref": "#/responses/detailSpecBody"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/summary": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "This endpoint is usefull for UIs that wish to display UI elements with counts.",
        "tags": [
          "Informational"
        ],
        "summary": "Returns a list of accessible resource counts",
        "operationId": "listSummary",
        "responses": {
          "200": {
            "$ref": "#/responses/listSummaryCounts"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/terminators": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of terminator resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Terminator"
        ],
        "summary": "List terminators",
        "operationId": "listTerminators",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listTerminators"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a terminator resource. Requires admin access.",
        "tags": [
          "Terminator"
        ],
        "summary": "Create a terminator resource",
        "operationId": "createTerminator",
        "parameters": [
          {
            "description": "A terminator to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/terminatorCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/terminators/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single terminator by id. Requires admin access.",
        "tags": [
          "Terminator"
        ],
        "summary": "Retrieves a single terminator",
        "operationId": "detailTerminator",
        "responses": {
          "200": {
            "$ref": "#/responses/detailTerminator"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a terminator by id. Requires admin access.",
        "tags": [
          "Terminator"
        ],
        "summary": "Update all fields on a terminator",
        "operationId": "updateTerminator",
        "parameters": [
          {
            "description": "A terminator update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/terminatorUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a terminator by id. Requires admin access.",
        "tags": [
          "Terminator"
        ],
        "summary": "Delete a terminator",
        "operationId": "deleteTerminator",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a terminator. Requires admin access.",
        "tags": [
          "Terminator"
        ],
        "summary": "Update the supplied fields on a terminator",
        "operationId": "patchTerminator",
        "parameters": [
          {
            "description": "A terminator patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/terminatorPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/transit-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of transit router resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Transit Router"
        ],
        "summary": "List transit routers",
        "operationId": "listTransitRouters",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listTransitRouters"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a transit router resource. Requires admin access.",
        "tags": [
          "Transit Router"
        ],
        "summary": "Create a transit router resource",
        "operationId": "createTransitRouter",
        "parameters": [
          {
            "description": "A transit router to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transitRouterCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          }
        }
      }
    },
    "/transit-routers/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single transit router by id. Requires admin access.",
        "tags": [
          "Transit Router"
        ],
        "summary": "Retrieves a single transit router",
        "operationId": "detailTransitRouter",
        "responses": {
          "200": {
            "$ref": "#/responses/detailTransitRouter"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a transit router by id. Requires admin access.",
        "tags": [
          "Transit Router"
        ],
        "summary": "Update all fields on a transit router",
        "operationId": "updateTransitRouter",
        "parameters": [
          {
            "description": "A transit router update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transitRouterUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a transit router by id. Requires admin access.",
        "tags": [
          "Transit Router"
        ],
        "summary": "Delete a transit router",
        "operationId": "deleteTransitRouter",
        "responses": {
          "200": {
            "$ref": "#/responses/deleteResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "409": {
            "$ref": "#/responses/cannotDeleteReferencedResourceResponse"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a transit router. Requires admin access.",
        "tags": [
          "Transit Router"
        ],
        "summary": "Update the supplied fields on a transit router",
        "operationId": "patchTransitRouter",
        "parameters": [
          {
            "description": "A transit router patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transitRouterPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/version": {
      "get": {
        "security": [],
        "tags": [
          "Informational"
        ],
        "summary": "Returns version information",
        "operationId": "listVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/listVersion"
          }
        }
      }
    }
  },
  "definitions": {
    "CurrentApiSessionServiceUpdateList": {
      "type": "object",
      "required": [
        "lastChangeAt"
      ],
      "properties": {
        "lastChangeAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "PostureCheckCreate": {
      "type": "object",
      "required": [
        "name",
        "typeId"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "typeId": {
          "$ref": "#/definitions/postureCheckType"
        }
      },
      "discriminator": "typeId"
    },
    "PostureCheckDetail": {
      "type": "object",
      "required": [
        "name",
        "typeId",
        "version",
        "roleAttributes",
        "id",
        "createdAt",
        "updatedAt",
        "_links",
        "tags"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/links"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "typeId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "integer"
        }
      },
      "discriminator": "typeId"
    },
    "PostureCheckDomainCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckCreate"
        },
        {
          "type": "object",
          "required": [
            "domains"
          ],
          "properties": {
            "domains": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "DOMAIN"
    },
    "PostureCheckDomainDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckDetail"
        },
        {
          "type": "object",
          "required": [
            "domains"
          ],
          "properties": {
            "domains": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "DOMAIN"
    },
    "PostureCheckDomainPatch": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckPatch"
        },
        {
          "type": "object",
          "properties": {
            "domains": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "DOMAIN"
    },
    "PostureCheckDomainUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckUpdate"
        },
        {
          "type": "object",
          "required": [
            "domains"
          ],
          "properties": {
            "domains": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "DOMAIN"
    },
    "PostureCheckList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PostureCheckDetail"
      }
    },
    "PostureCheckMacAddressCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckCreate"
        },
        {
          "type": "object",
          "required": [
            "macAddresses"
          ],
          "properties": {
            "macAddresses": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "MAC"
    },
    "PostureCheckMacAddressDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckDetail"
        },
        {
          "type": "object",
          "required": [
            "macAddresses"
          ],
          "properties": {
            "macAddresses": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "MAC"
    },
    "PostureCheckMacAddressPatch": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckPatch"
        },
        {
          "type": "object",
          "properties": {
            "macAddresses": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "MAC"
    },
    "PostureCheckMacAddressUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckUpdate"
        },
        {
          "type": "object",
          "required": [
            "macAddresses"
          ],
          "properties": {
            "macAddresses": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "MAC"
    },
    "PostureCheckOperatingSystemCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckCreate"
        },
        {
          "type": "object",
          "required": [
            "operatingSystems"
          ],
          "properties": {
            "operatingSystems": {
              "$ref": "#/definitions/operatingSystemArray"
            }
          }
        }
      ],
      "x-class": "OS"
    },
    "PostureCheckOperatingSystemDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckDetail"
        },
        {
          "type": "object",
          "required": [
            "operatingSystems"
          ],
          "properties": {
            "operatingSystems": {
              "$ref": "#/definitions/operatingSystemArray"
            }
          }
        }
      ],
      "x-class": "OS"
    },
    "PostureCheckOperatingSystemPatch": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckPatch"
        },
        {
          "type": "object",
          "properties": {
            "operatingSystems": {
              "$ref": "#/definitions/operatingSystemArray"
            }
          }
        }
      ],
      "x-class": "OS"
    },
    "PostureCheckOperatingSystemUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckUpdate"
        },
        {
          "type": "object",
          "required": [
            "operatingSystems"
          ],
          "properties": {
            "operatingSystems": {
              "$ref": "#/definitions/operatingSystemArray"
            }
          }
        }
      ],
      "x-class": "OS"
    },
    "PostureCheckPatch": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      },
      "discriminator": "typeId"
    },
    "PostureCheckProcessCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckCreate"
        },
        {
          "type": "object",
          "required": [
            "process"
          ],
          "properties": {
            "process": {
              "$ref": "#/definitions/process"
            }
          }
        }
      ],
      "x-class": "PROCESS"
    },
    "PostureCheckProcessDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckDetail"
        },
        {
          "type": "object",
          "required": [
            "process"
          ],
          "properties": {
            "process": {
              "$ref": "#/definitions/process"
            }
          }
        }
      ],
      "x-class": "PROCESS"
    },
    "PostureCheckProcessPatch": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckPatch"
        },
        {
          "type": "object",
          "properties": {
            "process": {
              "$ref": "#/definitions/process"
            }
          }
        }
      ],
      "x-class": "PROCESS"
    },
    "PostureCheckProcessUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckUpdate"
        },
        {
          "type": "object",
          "required": [
            "process"
          ],
          "properties": {
            "process": {
              "$ref": "#/definitions/process"
            }
          }
        }
      ],
      "x-class": "PROCESS"
    },
    "PostureCheckTypeDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "operatingSystems",
            "version"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "operatingSystems": {
              "$ref": "#/definitions/operatingSystemArray"
            },
            "version": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PostureCheckTypeList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PostureCheckTypeDetail"
      }
    },
    "PostureCheckUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "typeId": {
          "$ref": "#/definitions/postureCheckType"
        }
      },
      "discriminator": "typeId"
    },
    "PostureResponseCreate": {
      "type": "object",
      "required": [
        "id",
        "typeId"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "typeId": {
          "$ref": "#/definitions/postureCheckType"
        }
      },
      "discriminator": "typeId"
    },
    "PostureResponseDomainCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureResponseCreate"
        },
        {
          "type": "object",
          "required": [
            "domain"
          ],
          "properties": {
            "domain": {
              "type": "string"
            }
          }
        }
      ],
      "x-class": "DOMAIN"
    },
    "PostureResponseMacAddressCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureResponseCreate"
        },
        {
          "type": "object",
          "required": [
            "macAddresses"
          ],
          "properties": {
            "macAddresses": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "MAC"
    },
    "PostureResponseOperatingSystemCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureResponseCreate"
        },
        {
          "type": "object",
          "required": [
            "type",
            "version"
          ],
          "properties": {
            "build": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        }
      ],
      "x-class": "OS"
    },
    "PostureResponseProcessCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureResponseCreate"
        },
        {
          "type": "object",
          "required": [
            "process"
          ],
          "properties": {
            "hash": {
              "type": "string"
            },
            "isRunning": {
              "type": "boolean"
            },
            "signerFingerprints": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "PROCESS"
    },
    "apiError": {
      "type": "object",
      "properties": {
        "args": {
          "$ref": "#/definitions/apiErrorArgs"
        },
        "cause": {
          "$ref": "#/definitions/apiErrorCause"
        },
        "causeMessage": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        }
      }
    },
    "apiErrorArgs": {
      "type": "object",
      "properties": {
        "urlVars": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "apiErrorCause": {
      "allOf": [
        {
          "$ref": "#/definitions/apiFieldError"
        },
        {
          "$ref": "#/definitions/apiError"
        }
      ]
    },
    "apiErrorEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "error"
      ],
      "properties": {
        "error": {
          "$ref": "#/definitions/apiError"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "apiFieldError": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "apiSessionDetail": {
      "description": "An API Session object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "token",
            "identity",
            "identityId",
            "configTypes",
            "ipAddress"
          ],
          "properties": {
            "configTypes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "identity": {
              "$ref": "#/definitions/entityRef"
            },
            "identityId": {
              "type": "string"
            },
            "ipAddress": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        }
      ]
    },
    "apiSessionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/apiSessionDetail"
      }
    },
    "apiVersion": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "attributes": {
      "description": "A set of strings used to loosly couple this resource to policies",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-omitempty": false
    },
    "authenticate": {
      "description": "A generic authenticate object meant for use with the /authenticate path. Required fields depend on authentication method.",
      "type": "object",
      "properties": {
        "configTypes": {
          "$ref": "#/definitions/configTypes"
        },
        "envInfo": {
          "$ref": "#/definitions/envInfo"
        },
        "password": {
          "$ref": "#/definitions/password"
        },
        "sdkInfo": {
          "$ref": "#/definitions/sdkInfo"
        },
        "username": {
          "$ref": "#/definitions/username"
        }
      }
    },
    "authenticatorCreate": {
      "description": "Creates an authenticator for a specific identity which can be used for API authentication",
      "type": "object",
      "required": [
        "username",
        "password",
        "method",
        "identityId"
      ],
      "properties": {
        "identityId": {
          "description": "The id of an existing identity that will be assigned this authenticator",
          "type": "string"
        },
        "method": {
          "description": "The type of authenticator to create; which will dictate which properties on this object are required.",
          "type": "string"
        },
        "password": {
          "description": "The password the identity will login with, Used only for method='updb'",
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "username": {
          "description": "The username that the identity will login with. Used only for method='updb'",
          "type": "string"
        }
      }
    },
    "authenticatorDetail": {
      "description": "A singular authenticator resource",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "method",
            "identityId",
            "identity"
          ],
          "properties": {
            "certPem": {
              "type": "string"
            },
            "fingerprint": {
              "type": "string"
            },
            "identity": {
              "$ref": "#/definitions/entityRef"
            },
            "identityId": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          }
        }
      ]
    },
    "authenticatorList": {
      "description": "An array of authenticator resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/authenticatorDetail"
      }
    },
    "authenticatorPatch": {
      "description": "All of the fields on an authenticator that may be updated",
      "type": "object",
      "properties": {
        "password": {
          "$ref": "#/definitions/password-nullable"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "username": {
          "$ref": "#/definitions/username-nullable"
        }
      }
    },
    "authenticatorPatchWithCurrent": {
      "description": "All of the fields on an authenticator that may be updated",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/authenticatorPatch"
        },
        {
          "type": "object",
          "required": [
            "currentPassword"
          ],
          "properties": {
            "currentPassword": {
              "$ref": "#/definitions/password"
            }
          }
        }
      ]
    },
    "authenticatorUpdate": {
      "description": "All of the fields on an authenticator that will be updated",
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "$ref": "#/definitions/password"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "username": {
          "$ref": "#/definitions/username"
        }
      }
    },
    "authenticatorUpdateWithCurrent": {
      "description": "All of the fields on an authenticator that will be updated",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/authenticatorUpdate"
        },
        {
          "type": "object",
          "required": [
            "currentPassword"
          ],
          "properties": {
            "currentPassword": {
              "$ref": "#/definitions/password"
            }
          }
        }
      ]
    },
    "baseEntity": {
      "description": "Fields shared by all Edge API entities",
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "_links",
        "tags"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/links"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "caCreate": {
      "description": "A create Certificate Authority (CA) object",
      "type": "object",
      "required": [
        "name",
        "certPem",
        "isAutoCaEnrollmentEnabled",
        "isOttCaEnrollmentEnabled",
        "isAuthEnabled",
        "identityRoles"
      ],
      "properties": {
        "certPem": {
          "type": "string",
          "example": "-----BEGIN CERTIFICATE-----\\nMIICUjCCAdmgAwIBAgIJANooo7NB+dZZMAoGCCqGSM49BAMCMF4xCzAJBgNVBAYT\\nAlVTMQswCQYDVQQIDAJOQzETMBEGA1UECgwKTmV0Rm91bmRyeTEtMCsGA1UEAwwk\\nTmV0Rm91bmRyeSBaaXRpIEV4dGVybmFsIEFQSSBSb290IENBMB4XDTE4MTExNTEy\\nNTcwOVoXDTM4MTExMDEyNTcwOVowXjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5D\\nMRMwEQYDVQQKDApOZXRGb3VuZHJ5MS0wKwYDVQQDDCROZXRGb3VuZHJ5IFppdGkg\\nRXh0ZXJuYWwgQVBJIFJvb3QgQ0EwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARwq61Z\\nIaqbaw0PDt3frJZaHjkxfZhwYrykI1GlbRNd/jix03lVG9qvpN5Og9fQfFFcFmD/\\n3vCE9S6O0npm0mADQxcBcxbMRAH5dtBuCuiJW6qAAbPgiM32vqSxBiFt0KejYzBh\\nMB0GA1UdDgQWBBRx1OVGuc/jdltDc8YBtkw8Tbr4fjAfBgNVHSMEGDAWgBRx1OVG\\nuc/jdltDc8YBtkw8Tbr4fjAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB\\nhjAKBggqhkjOPQQDAgNnADBkAjBDRxNZUaIVpkQKnAgJukl3ysd3/i7Z6hDyIEms\\nkllz/+ZvmdBp9iedV5o5BvJUggACMCv+UBFlJH7pmsOCo/F45Kk178YsCC7gaMxE\\n1ZG1zveyMvsYsH04C9FndE6w2MLvlA==\\n-----END CERTIFICATE-----"
        },
        "identityNameFormat": {
          "type": "string"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "isAuthEnabled": {
          "type": "boolean",
          "example": true
        },
        "isAutoCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "isOttCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "name": {
          "type": "string",
          "example": "Test 3rd Party External CA"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "caDetail": {
      "description": "A Certificate Authority (CA) resource",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "fingerprint",
            "certPem",
            "isVerified",
            "isAutoCaEnrollmentEnabled",
            "isOttCaEnrollmentEnabled",
            "isAuthEnabled",
            "identityRoles",
            "identityNameFormat"
          ],
          "properties": {
            "certPem": {
              "type": "string"
            },
            "fingerprint": {
              "type": "string"
            },
            "identityNameFormat": {
              "type": "string"
            },
            "identityRoles": {
              "$ref": "#/definitions/roles"
            },
            "isAuthEnabled": {
              "type": "boolean",
              "example": true
            },
            "isAutoCaEnrollmentEnabled": {
              "type": "boolean",
              "example": true
            },
            "isOttCaEnrollmentEnabled": {
              "type": "boolean",
              "example": true
            },
            "isVerified": {
              "type": "boolean",
              "example": false
            },
            "name": {
              "type": "string"
            },
            "verificationToken": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "caList": {
      "description": "An array of Certificate Authority (CA) resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/caDetail"
      }
    },
    "caPatch": {
      "type": "object",
      "properties": {
        "identityNameFormat": {
          "type": "string"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "isAuthEnabled": {
          "type": "boolean",
          "example": true
        },
        "isAutoCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "isOttCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "name": {
          "type": "string",
          "example": "My CA"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "caUpdate": {
      "type": "object",
      "required": [
        "name",
        "isAutoCaEnrollmentEnabled",
        "isOttCaEnrollmentEnabled",
        "isAuthEnabled",
        "identityRoles"
      ],
      "properties": {
        "identityNameFormat": {
          "type": "string"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "isAuthEnabled": {
          "type": "boolean",
          "example": true
        },
        "isAutoCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "isOttCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "name": {
          "type": "string",
          "example": "My CA"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "configCreate": {
      "description": "A config create object",
      "type": "object",
      "required": [
        "name",
        "configTypeId",
        "data"
      ],
      "properties": {
        "configTypeId": {
          "description": "The id of a config-type that the data section will match",
          "type": "string"
        },
        "data": {
          "description": "Data payload is defined by the schema of the config-type defined in the type parameter",
          "type": "object",
          "additionalProperties": true,
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "example": "default.ziti-tunneler-server.v1"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      },
      "example": {
        "configTypeId": "cea49285-6c07-42cf-9f52-09a9b115c783",
        "data": {
          "hostname": "example.com",
          "port": 80
        },
        "name": "test-config"
      }
    },
    "configDetail": {
      "description": "A config resource",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "configTypeId",
            "configType",
            "data"
          ],
          "properties": {
            "configType": {
              "$ref": "#/definitions/entityRef"
            },
            "configTypeId": {
              "type": "string"
            },
            "data": {
              "description": "The data section of a config is based on the schema of its type",
              "type": "object"
            },
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "configList": {
      "description": "An array of config resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/configDetail"
      }
    },
    "configPatch": {
      "description": "A config patch object",
      "type": "object",
      "properties": {
        "data": {
          "description": "Data payload is defined by the schema of the config-type defined in the type parameter",
          "type": "object",
          "additionalProperties": true
        },
        "name": {
          "type": "string",
          "example": "default.ziti-tunneler-server.v1"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      },
      "example": {
        "data": {
          "hostname": "example.com",
          "port": 80
        },
        "name": "example-config-name"
      }
    },
    "configTypeCreate": {
      "description": "A config-type create object",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "ziti-tunneler-server.v1"
        },
        "schema": {
          "description": "A JSON schema to enforce configuration against",
          "type": "object",
          "additionalProperties": true
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "configTypeDetail": {
      "description": "A config-type resource",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "schema"
          ],
          "properties": {
            "name": {
              "type": "string",
              "example": "ziti-tunneler-server.v1"
            },
            "schema": {
              "description": "A JSON schema to enforce configuration against",
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      ]
    },
    "configTypeList": {
      "description": "An array of config-type resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/configTypeDetail"
      }
    },
    "configTypePatch": {
      "description": "A config-type patch object",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ziti-tunneler-server.v1"
        },
        "schema": {
          "description": "A JSON schema to enforce configuration against",
          "type": "object",
          "additionalProperties": true
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "configTypeUpdate": {
      "description": "A config-type update object",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "ziti-tunneler-server.v1"
        },
        "schema": {
          "description": "A JSON schema to enforce configuration against",
          "type": "object",
          "additionalProperties": true
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "configTypes": {
      "description": "Specific configuration types that should be returned",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "configUpdate": {
      "description": "A config update object",
      "type": "object",
      "required": [
        "name",
        "data"
      ],
      "properties": {
        "data": {
          "description": "Data payload is defined by the schema of the config-type defined in the type parameter",
          "type": "object",
          "additionalProperties": true,
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "example": "default.ziti-tunneler-server.v1"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      },
      "example": {
        "data": {
          "hostname": "example.com",
          "port": 80
        },
        "name": "example-config-name"
      }
    },
    "createCurrentApiSessionCertificateEnvelope": {
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/currentApiSessionCertificateCreateResponse"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "createEnvelope": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/createLocation"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "createLocation": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/links"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "currentAPISessionDetailEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/currentApiSessionDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "currentApiSessionCertificateCreate": {
      "type": "object",
      "required": [
        "csr"
      ],
      "properties": {
        "csr": {
          "type": "string"
        }
      }
    },
    "currentApiSessionCertificateCreateResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/createLocation"
        },
        {
          "type": "object",
          "required": [
            "certificate"
          ],
          "properties": {
            "cas": {
              "type": "string"
            },
            "certificate": {
              "type": "string"
            }
          }
        }
      ]
    },
    "currentApiSessionCertificateDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "subject",
            "fingerprint",
            "validFrom",
            "validTo",
            "certificate"
          ],
          "properties": {
            "certificate": {
              "type": "string"
            },
            "fingerprint": {
              "type": "string"
            },
            "subject": {
              "type": "string"
            },
            "validFrom": {
              "type": "string",
              "format": "date-time"
            },
            "validTo": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "currentApiSessionCertificateList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/currentApiSessionCertificateDetail"
      }
    },
    "currentApiSessionDetail": {
      "description": "An API Session object for the current API session",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/apiSessionDetail"
        },
        {
          "type": "object",
          "required": [
            "expiresAt",
            "expirationSeconds"
          ],
          "properties": {
            "expirationSeconds": {
              "type": "integer"
            },
            "expiresAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "currentIdentityDetailEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/identityDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "dataIntegrityCheckDetail": {
      "type": "object",
      "required": [
        "description",
        "fixed"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "fixed": {
          "type": "boolean"
        }
      }
    },
    "dataIntegrityCheckDetailList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dataIntegrityCheckDetail"
      }
    },
    "dataIntegrityCheckDetails": {
      "type": "object",
      "required": [
        "inProgress",
        "fixingErrors",
        "tooManyErrors",
        "startTime",
        "endTime",
        "error",
        "results"
      ],
      "properties": {
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "type": "string"
        },
        "fixingErrors": {
          "type": "boolean"
        },
        "inProgress": {
          "type": "boolean"
        },
        "results": {
          "$ref": "#/definitions/dataIntegrityCheckDetailList"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "tooManyErrors": {
          "type": "boolean"
        }
      }
    },
    "dataIntegrityCheckResultEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/dataIntegrityCheckDetails"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailAPISessionEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/apiSessionDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailAuthenticatorEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/authenticatorDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailCaEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/caDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailConfigEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/configDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailConfigTypeEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/configTypeDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailCurrentApiSessionCertificateEnvelope": {
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/currentApiSessionCertificateDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailEdgeRouterPolicyEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/edgeRouterPolicyDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailEnrollmentEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/enrollmentDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailGeoRegionEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/geoRegionDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailIdentityEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/identityDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailIdentityTypeEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/identityTypeDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailPostureCheckEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/PostureCheckDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailPostureCheckTypeEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/PostureCheckTypeDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailServiceEdgePolicyEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceEdgeRouterPolicyDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailServiceEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailServicePolicyEnvelop": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/servicePolicyDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailSessionEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/sessionDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailSpecBodyEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/specBodyDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailSpecEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/specDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailTerminatorEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/terminatorDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailTransitRouterEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/transitRouterDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailedEdgeRouterEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/edgeRouterDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "dialBind": {
      "type": "string",
      "enum": [
        "Dial",
        "Bind"
      ]
    },
    "dialBindArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dialBind"
      }
    },
    "edgeRouterCreate": {
      "description": "An edge router create object",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "edgeRouterDetail": {
      "description": "A detail edge router resource",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "isVerified",
            "isOnline",
            "hostname",
            "supportedProtocols",
            "roleAttributes",
            "os",
            "version",
            "arch",
            "buildDate",
            "revision"
          ],
          "properties": {
            "enrollmentCreatedAt": {
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "enrollmentExpiresAt": {
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "enrollmentJwt": {
              "type": "string",
              "x-nullable": true
            },
            "enrollmentToken": {
              "type": "string",
              "x-nullable": true
            },
            "fingerprint": {
              "type": "string"
            },
            "hostname": {
              "type": "string"
            },
            "isOnline": {
              "type": "boolean"
            },
            "isVerified": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "roleAttributes": {
              "$ref": "#/definitions/attributes"
            },
            "supportedProtocols": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "versionInfo": {
              "$ref": "#/definitions/versionInfo"
            }
          }
        }
      ],
      "example": {
        "_links": {
          "edge-router-policies": {
            "href": "./edge-routers/b0766b8d-bd1a-4d28-8415-639b29d3c83d/edge-routers"
          },
          "self": {
            "href": "./edge-routers/b0766b8d-bd1a-4d28-8415-639b29d3c83d"
          }
        },
        "createdAt": "2020-03-16T17:13:31.5807454Z",
        "enrollmentCreatedAt": "2020-03-16T17:13:31.5777637Z",
        "enrollmentExpiresAt": "2020-03-16T17:18:31.5777637Z",
        "enrollmentJwt": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbSI6ImVyb3R0IiwiZXhwIjoxNTg0Mzc5MTExLCJpc3MiOiJodHRwczovL 2xvY2FsaG9zdDoxMjgwIiwianRpIjoiMzBhMWYwZWEtZDM5Yi00YWFlLWI4NTItMzA0Y2YxYzMwZDFmIiwic3ViIjoiYjA3NjZiOGQtYmQxYS00ZDI 4LTg0MTUtNjM5YjI5ZDNjODNkIn0.UsyQhCPORQ5tQnYWY7S88LNvV9iFS5Hy-P4aJaClZzEICobKgnQoyQblJcdMvk3cGKwyFqAnQtt0tDZkb8tHz Vqyv6bilHcAFuMRrdwXRqdXquabSN5geu2qBUnyzL7Mf2X85if8sbMida6snB4oLZsVRF3CRn4ODBJdeiVJ_Z4rgD-zW2IwtXPApT7ALyiiw2cN4EH 8pqQ7tpZKqztE0PGEbBQFPGKUFnm7oXyvSUo17EsFJUv5gUlBzfKKGolh5io4ptp22HZrqsqSnqDSOnYEZHonr5Yljuwiktrlh-JKiK6GGns5OAJMP dO9lgM4yHSpF2ILbqhWMV93Y3zMOg",
        "enrollmentToken": "30a1f0ea-d39b-4aae-b852-304cf1c30d1f",
        "fingerprint": null,
        "hostname": "",
        "id": "b0766b8d-bd1a-4d28-8415-639b29d3c83d",
        "isOnline": false,
        "isVerified": false,
        "name": "TestRouter-e33c837f-3222-4b40-bcd6-b3458fd5156e",
        "roleAttributes": [
          "eastCoast",
          "sales",
          "test"
        ],
        "supportedProtocols": {},
        "tags": {},
        "updatedAt": "2020-03-16T17:13:31.5807454Z"
      }
    },
    "edgeRouterList": {
      "description": "A list of edge router resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/edgeRouterDetail"
      }
    },
    "edgeRouterPatch": {
      "description": "An edge router patch object",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "edgeRouterPolicyCreate": {
      "required": [
        "name"
      ],
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "edgeRouterPolicyDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "semantic",
            "edgeRouterRoles",
            "edgeRouterRolesDisplay",
            "identityRoles",
            "identityRolesDisplay"
          ],
          "properties": {
            "edgeRouterRoles": {
              "$ref": "#/definitions/roles"
            },
            "edgeRouterRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "identityRoles": {
              "$ref": "#/definitions/roles"
            },
            "identityRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "name": {
              "type": "string"
            },
            "semantic": {
              "$ref": "#/definitions/semantic"
            }
          }
        }
      ]
    },
    "edgeRouterPolicyList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/edgeRouterPolicyDetail"
      }
    },
    "edgeRouterPolicyPatch": {
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "edgeRouterPolicyUpdate": {
      "required": [
        "name"
      ],
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "edgeRouterUpdate": {
      "description": "An edge router update object",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "empty": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "example": {}
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "enrollmentCerts": {
      "type": "object",
      "properties": {
        "ca": {
          "description": "A PEM encoded set of CA certificates to trust",
          "type": "string"
        },
        "cert": {
          "description": "A PEM encoded cert for the server",
          "type": "string"
        },
        "serverCert": {
          "description": "A PEM encoded set of certificates to use as the servers chain",
          "type": "string"
        }
      }
    },
    "enrollmentCertsEnvelope": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/enrollmentCerts"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "enrollmentDetail": {
      "description": "An enrollment object. Enrolments are tied to identities and portentially a CA. Depending on the\nmethod, different fields are utilized. For example ottca enrollments use the ` + "`" + `ca` + "`" + ` field and updb enrollments\nuse the username field, but not vice versa.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "token",
            "method",
            "expiresAt",
            "details"
          ],
          "properties": {
            "details": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "edgeRouter": {
              "$ref": "#/definitions/entityRef"
            },
            "edgeRouterId": {
              "type": "string"
            },
            "expiresAt": {
              "type": "string",
              "format": "date-time"
            },
            "identity": {
              "$ref": "#/definitions/entityRef"
            },
            "identityId": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "transitRouter": {
              "$ref": "#/definitions/entityRef"
            },
            "transitRouterId": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          }
        }
      ],
      "example": {
        "_links": {
          "self": {
            "href": "./enrollments/624fa53f-7629-4a7a-9e38-c1f4ce322c1d"
          }
        },
        "ca": null,
        "createdAt": "0001-01-01T00:00:00Z",
        "expiresAt": "2020-03-11T20:20:24.0055543Z",
        "id": "624fa53f-7629-4a7a-9e38-c1f4ce322c1d",
        "identity": {
          "_links": {
            "self": {
              "href": "./identities/f047ac96-dc3a-408a-a6f2-0ba487c08ef9"
            }
          },
          "id": "f047ac96-dc3a-408a-a6f2-0ba487c08ef9",
          "name": "updb--0f245140-7f2e-4326-badf-6aba55e52475",
          "urlName": "identities"
        },
        "method": "updb",
        "tags": null,
        "token": "1e727c8f-07e4-4a1d-a8b0-da0c7a01c6e1",
        "updatedAt": "0001-01-01T00:00:00Z",
        "username": "example-username"
      }
    },
    "enrollmentList": {
      "description": "An array of enrollment resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/enrollmentDetail"
      }
    },
    "entityRef": {
      "description": "A reference to another resource and links to interact with it",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/links"
        },
        "entity": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "envInfo": {
      "description": "Environment information an authenticating client may provide",
      "type": "object",
      "properties": {
        "arch": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "osRelease": {
          "type": "string"
        },
        "osVersion": {
          "type": "string"
        }
      }
    },
    "geoRegionDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "geoRegionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/geoRegionDetail"
      }
    },
    "getIdentityPolicyAdviceEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/policyAdvice"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "getIdentityPostureDataEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/postureData"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "identityAuthenticators": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "object",
          "properties": {
            "fingerprint": {
              "type": "string"
            }
          }
        },
        "updb": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string"
            }
          }
        }
      }
    },
    "identityCreate": {
      "description": "An identity to create",
      "type": "object",
      "required": [
        "name",
        "type",
        "isAdmin"
      ],
      "properties": {
        "defaultHostingCost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "defaultHostingPrecedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "enrollment": {
          "type": "object",
          "properties": {
            "ott": {
              "type": "boolean"
            },
            "ottca": {
              "type": "string"
            },
            "updb": {
              "type": "string"
            }
          }
        },
        "isAdmin": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/identityType"
        }
      }
    },
    "identityDetail": {
      "description": "Detail of a specific identity",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "type",
            "typeId",
            "isDefaultAdmin",
            "isAdmin",
            "authenticators",
            "enrollment",
            "envInfo",
            "sdkInfo",
            "roleAttributes",
            "hasEdgeRouterConnection",
            "hasApiSession"
          ],
          "properties": {
            "authenticators": {
              "$ref": "#/definitions/identityAuthenticators"
            },
            "defaultHostingCost": {
              "$ref": "#/definitions/terminatorCost"
            },
            "defaultHostingPrecedence": {
              "$ref": "#/definitions/terminatorPrecedence"
            },
            "enrollment": {
              "$ref": "#/definitions/identityEnrollments"
            },
            "envInfo": {
              "$ref": "#/definitions/envInfo"
            },
            "hasApiSession": {
              "type": "boolean"
            },
            "hasEdgeRouterConnection": {
              "type": "boolean"
            },
            "isAdmin": {
              "type": "boolean"
            },
            "isDefaultAdmin": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "roleAttributes": {
              "$ref": "#/definitions/attributes"
            },
            "sdkInfo": {
              "$ref": "#/definitions/sdkInfo"
            },
            "type": {
              "$ref": "#/definitions/entityRef"
            },
            "typeId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "identityEnrollments": {
      "type": "object",
      "properties": {
        "ott": {
          "type": "object",
          "properties": {
            "expiresAt": {
              "type": "string",
              "format": "date-time"
            },
            "jwt": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        },
        "ottca": {
          "type": "object",
          "properties": {
            "ca": {
              "$ref": "#/definitions/entityRef"
            },
            "caId": {
              "type": "string"
            },
            "expiresAt": {
              "type": "string",
              "format": "date-time"
            },
            "jwt": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        },
        "updb": {
          "type": "object",
          "properties": {
            "expiresAt": {
              "type": "string",
              "format": "date-time"
            },
            "jwt": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        }
      }
    },
    "identityList": {
      "description": "A list of identities",
      "type": "array",
      "items": {
        "$ref": "#/definitions/identityDetail"
      }
    },
    "identityPatch": {
      "type": "object",
      "properties": {
        "defaultHostingCost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "defaultHostingPrecedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/identityType"
        }
      }
    },
    "identityType": {
      "type": "string",
      "enum": [
        "User",
        "Device",
        "Service"
      ]
    },
    "identityTypeDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "identityTypeList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/identityDetail"
      }
    },
    "identityUpdate": {
      "type": "object",
      "required": [
        "type",
        "name",
        "isAdmin"
      ],
      "properties": {
        "defaultHostingCost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "defaultHostingPrecedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/identityType"
        }
      }
    },
    "link": {
      "description": "A link to another resource",
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "format": "uri"
        },
        "method": {
          "type": "string"
        }
      }
    },
    "links": {
      "description": "A map of named links",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/link"
      },
      "x-omitempty": false
    },
    "listAPISessionsEnvelope": {
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/apiSessionList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listAuthenticatorsEnvelope": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/authenticatorList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listCasEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/caList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listConfigTypesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/configTypeList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listConfigsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/configList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listCurrentAPISessionCertificatesEnvelope": {
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/currentApiSessionCertificateList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listCurrentApiSessionServiceUpdatesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/CurrentApiSessionServiceUpdateList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listEdgeRouterPoliciesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/edgeRouterPolicyList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listEdgeRoutersEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/edgeRouterList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listEnrollmentsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/enrollmentList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listGeoRegionsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/geoRegionList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listIdentitiesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/identityList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listIdentityTypesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/identityTypeList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listPostureCheckEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/PostureCheckList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listPostureCheckTypesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/PostureCheckTypeList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listProtocols": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/protocol"
      }
    },
    "listProtocolsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/listProtocols"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listRoleAttributesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/roleAttributesList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listServiceConfigsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceConfigList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listServiceEdgeRouterPoliciesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceEdgeRouterPolicyList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listServicePoliciesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/servicePolicyList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listServicesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listSessionsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/sessionList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listSpecsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/specList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listSummaryCounts": {
      "type": "object",
      "additionalProperties": {
        "type": "integer"
      }
    },
    "listSummaryCountsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/listSummaryCounts"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listTerminatorsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/terminatorList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listTransitRoutersEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/transitRouterList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listVersionEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/version"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "meta": {
      "type": "object",
      "properties": {
        "apiEnrolmentVersion": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "filterableFields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "pagination": {
          "$ref": "#/definitions/pagination"
        }
      }
    },
    "namedRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "namedRoles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/namedRole"
      },
      "x-omitempty": false
    },
    "operatingSystem": {
      "type": "object",
      "required": [
        "type",
        "versions"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/osType"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "operatingSystemArray": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/operatingSystem"
      }
    },
    "osType": {
      "type": "string",
      "enum": [
        "Windows",
        "WindowsServer",
        "Android",
        "iOS",
        "Linux",
        "macOS"
      ]
    },
    "pagination": {
      "type": "object",
      "required": [
        "limit",
        "offset",
        "totalCount"
      ],
      "properties": {
        "limit": {
          "type": "number",
          "format": "int64"
        },
        "offset": {
          "type": "number",
          "format": "int64"
        },
        "totalCount": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "password": {
      "type": "string",
      "maxLength": 100,
      "minLength": 5
    },
    "password-nullable": {
      "type": "string",
      "maxLength": 100,
      "minLength": 5,
      "x-nullable": true
    },
    "policyAdvice": {
      "type": "object",
      "properties": {
        "commonRouters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/routerEntityRef"
          }
        },
        "identity": {
          "$ref": "#/definitions/entityRef"
        },
        "identityId": {
          "type": "string"
        },
        "identityRouterCount": {
          "type": "number",
          "format": "int32"
        },
        "isBindAllowed": {
          "type": "boolean"
        },
        "isDialAllowed": {
          "type": "boolean"
        },
        "service": {
          "$ref": "#/definitions/entityRef"
        },
        "serviceId": {
          "type": "string"
        },
        "serviceRouterCount": {
          "type": "number",
          "format": "int32"
        }
      }
    },
    "postureCheckType": {
      "type": "string",
      "enum": [
        "OS",
        "PROCESS",
        "DOMAIN",
        "MAC"
      ]
    },
    "postureData": {
      "type": "object",
      "additionalProperties": true
    },
    "postureQueries": {
      "type": "object",
      "required": [
        "policyId",
        "isPassing",
        "postureQueries"
      ],
      "properties": {
        "isPassing": {
          "type": "boolean"
        },
        "policyId": {
          "type": "string"
        },
        "postureQueries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/postureQuery"
          }
        }
      }
    },
    "postureQuery": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "queryType",
            "isPassing"
          ],
          "properties": {
            "isPassing": {
              "type": "boolean"
            },
            "process": {
              "$ref": "#/definitions/postureQueryProcess"
            },
            "queryType": {
              "$ref": "#/definitions/postureCheckType"
            }
          }
        }
      ]
    },
    "postureQueryProcess": {
      "type": "object",
      "properties": {
        "osType": {
          "$ref": "#/definitions/osType"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "process": {
      "type": "object",
      "required": [
        "osType",
        "path"
      ],
      "properties": {
        "hashes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "osType": {
          "$ref": "#/definitions/osType"
        },
        "path": {
          "type": "string"
        },
        "signerFingerprint": {
          "type": "string"
        }
      }
    },
    "protocol": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        }
      }
    },
    "roleAttributesList": {
      "description": "An array of role attributes",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "roles": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-omitempty": false
    },
    "routerEntityRef": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/entityRef"
        },
        {
          "type": "object",
          "required": [
            "isOnline"
          ],
          "properties": {
            "isOnline": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "sdkInfo": {
      "description": "SDK information an authenticating client may provide",
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "semantic": {
      "type": "string",
      "enum": [
        "AllOf",
        "AnyOf"
      ]
    },
    "serviceConfigAssign": {
      "type": "object",
      "required": [
        "serviceId",
        "configId"
      ],
      "properties": {
        "configId": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        }
      }
    },
    "serviceConfigDetail": {
      "type": "object",
      "required": [
        "serviceId",
        "service",
        "configId",
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/entityRef"
        },
        "configId": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/entityRef"
        },
        "serviceId": {
          "type": "string"
        }
      },
      "example": {
        "config": {
          "_links": {
            "self": {
              "href": "./identities/13347602-ba34-4ff7-8082-e533ba945744"
            }
          },
          "id": "13347602-ba34-4ff7-8082-e533ba945744",
          "name": "test-config-02fade09-fcc3-426c-854e-18539726bdc6",
          "urlName": "configs"
        },
        "service": {
          "_links": {
            "self": {
              "href": "./services/913a8c63-17a6-44d7-82b3-9f6eb997cf8e"
            }
          },
          "id": "913a8c63-17a6-44d7-82b3-9f6eb997cf8e",
          "name": "netcat4545-egress-r2",
          "urlName": "services"
        }
      }
    },
    "serviceConfigList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/serviceConfigDetail"
      }
    },
    "serviceConfigsAssignList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/serviceConfigAssign"
      }
    },
    "serviceCreate": {
      "type": "object",
      "required": [
        "name",
        "encryptionRequired"
      ],
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "encryptionRequired": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "terminatorStrategy": {
          "type": "string"
        }
      }
    },
    "serviceDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "terminatorStrategy",
            "roleAttributes",
            "permissions",
            "configs",
            "config",
            "encryptionRequired",
            "postureQueries"
          ],
          "properties": {
            "config": {
              "description": "map of config data for this service keyed by the config type name. Only configs of the types requested will be returned.",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "configs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "encryptionRequired": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "permissions": {
              "$ref": "#/definitions/dialBindArray"
            },
            "postureQueries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/postureQueries"
              }
            },
            "roleAttributes": {
              "$ref": "#/definitions/attributes"
            },
            "terminatorStrategy": {
              "type": "string"
            }
          }
        }
      ]
    },
    "serviceEdgeRouterPolicyCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "serviceEdgeRouterPolicyDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "semantic",
            "edgeRouterRoles",
            "edgeRouterRolesDisplay",
            "serviceRoles",
            "serviceRolesDisplay"
          ],
          "properties": {
            "edgeRouterRoles": {
              "$ref": "#/definitions/roles"
            },
            "edgeRouterRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "name": {
              "type": "string"
            },
            "semantic": {
              "$ref": "#/definitions/semantic"
            },
            "serviceRoles": {
              "$ref": "#/definitions/roles"
            },
            "serviceRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            }
          }
        }
      ]
    },
    "serviceEdgeRouterPolicyList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/serviceEdgeRouterPolicyDetail"
      }
    },
    "serviceEdgeRouterPolicyPatch": {
      "type": "object",
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "serviceEdgeRouterPolicyUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "serviceList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/serviceDetail"
      }
    },
    "servicePatch": {
      "type": "object",
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "encryptionRequired": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "terminatorStrategy": {
          "type": "string"
        }
      }
    },
    "servicePolicyCreate": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "postureCheckRoles": {
          "$ref": "#/definitions/roles"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/dialBind"
        }
      }
    },
    "servicePolicyDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "type",
            "semantic",
            "serviceRoles",
            "serviceRolesDisplay",
            "identityRoles",
            "identityRolesDisplay",
            "postureCheckRoles",
            "postureCheckRolesDisplay"
          ],
          "properties": {
            "identityRoles": {
              "$ref": "#/definitions/roles"
            },
            "identityRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "name": {
              "type": "string"
            },
            "postureCheckRoles": {
              "$ref": "#/definitions/roles"
            },
            "postureCheckRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "semantic": {
              "$ref": "#/definitions/semantic"
            },
            "serviceRoles": {
              "$ref": "#/definitions/roles"
            },
            "serviceRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "type": {
              "$ref": "#/definitions/dialBind"
            }
          }
        }
      ]
    },
    "servicePolicyList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/servicePolicyDetail"
      }
    },
    "servicePolicyPatch": {
      "type": "object",
      "properties": {
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "postureCheckRoles": {
          "$ref": "#/definitions/roles"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/dialBind"
        }
      }
    },
    "servicePolicyUpdate": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "postureCheckRoles": {
          "$ref": "#/definitions/roles"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/dialBind"
        }
      }
    },
    "serviceUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "encryptionRequired": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "terminatorStrategy": {
          "type": "string"
        }
      }
    },
    "sessionCreate": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/dialBind"
        }
      }
    },
    "sessionCreateEnvelope": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/sessionDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "sessionDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "type",
            "apiSessionId",
            "apiSession",
            "serviceId",
            "service",
            "token",
            "edgeRouters"
          ],
          "properties": {
            "apiSession": {
              "$ref": "#/definitions/entityRef"
            },
            "apiSessionId": {
              "type": "string"
            },
            "edgeRouters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/sessionEdgeRouter"
              }
            },
            "service": {
              "$ref": "#/definitions/entityRef"
            },
            "serviceId": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/dialBind"
            }
          }
        }
      ]
    },
    "sessionEdgeRouter": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "urls": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "sessionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/sessionDetail"
      }
    },
    "specBodyDetail": {
      "type": "string"
    },
    "specDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "specList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/specDetail"
      }
    },
    "tags": {
      "description": "A map of user defined fields and values. The values are limited to the following types/values: null, string, boolean",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-omitempty": false
    },
    "terminatorCost": {
      "type": "integer",
      "maximum": 65535,
      "x-nullable": true
    },
    "terminatorCreate": {
      "type": "object",
      "required": [
        "service",
        "router",
        "address",
        "binding"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "binding": {
          "type": "string"
        },
        "cost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "identity": {
          "type": "string"
        },
        "identitySecret": {
          "type": "string",
          "format": "byte"
        },
        "precedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "router": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "terminatorDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "serviceId",
            "service",
            "routerId",
            "router",
            "binding",
            "address",
            "identity",
            "cost",
            "precedence",
            "dynamicCost"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "binding": {
              "type": "string"
            },
            "cost": {
              "$ref": "#/definitions/terminatorCost"
            },
            "dynamicCost": {
              "$ref": "#/definitions/terminatorCost"
            },
            "identity": {
              "type": "string"
            },
            "precedence": {
              "$ref": "#/definitions/terminatorPrecedence"
            },
            "router": {
              "$ref": "#/definitions/entityRef"
            },
            "routerId": {
              "type": "string"
            },
            "service": {
              "$ref": "#/definitions/entityRef"
            },
            "serviceId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "terminatorDetailLimited": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "serviceId",
            "service",
            "routerId",
            "identity"
          ],
          "properties": {
            "identity": {
              "type": "string"
            },
            "routerId": {
              "type": "string"
            },
            "service": {
              "$ref": "#/definitions/entityRef"
            },
            "serviceId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "terminatorList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/terminatorDetail"
      }
    },
    "terminatorPatch": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "binding": {
          "type": "string"
        },
        "cost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "precedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "router": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "terminatorPrecedence": {
      "type": "string",
      "enum": [
        "default",
        "required",
        "failed"
      ]
    },
    "terminatorUpdate": {
      "type": "object",
      "required": [
        "service",
        "router",
        "address",
        "binding"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "binding": {
          "type": "string"
        },
        "cost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "precedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "router": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "transitRouterCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "transitRouterDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "isVerified",
            "isOnline",
            "fingerprint"
          ],
          "properties": {
            "enrollmentCreatedAt": {
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "enrollmentExpiresAt": {
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "enrollmentJwt": {
              "type": "string",
              "x-nullable": true
            },
            "enrollmentToken": {
              "type": "string",
              "x-nullable": true
            },
            "fingerprint": {
              "type": "string"
            },
            "isOnline": {
              "type": "boolean"
            },
            "isVerified": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "transitRouterList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/transitRouterDetail"
      }
    },
    "transitRouterPatch": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "transitRouterUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "username": {
      "type": "string",
      "maxLength": 100,
      "minLength": 4
    },
    "username-nullable": {
      "type": "string",
      "maxLength": 100,
      "minLength": 4,
      "x-nullable": true
    },
    "version": {
      "type": "object",
      "properties": {
        "apiVersions": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/apiVersion"
            }
          }
        },
        "buildDate": {
          "type": "string",
          "example": "2020-02-11 16:09:08"
        },
        "revision": {
          "type": "string",
          "example": "ea556fc18740"
        },
        "runtimeVersion": {
          "type": "string",
          "example": "go1.13.5"
        },
        "version": {
          "type": "string",
          "example": "v0.9.0"
        }
      }
    },
    "versionInfo": {
      "type": "object",
      "required": [
        "os",
        "version",
        "arch",
        "buildDate",
        "revision"
      ],
      "properties": {
        "arch": {
          "type": "string"
        },
        "buildDate": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "authMethod": {
      "enum": [
        "password",
        "cert"
      ],
      "type": "string",
      "name": "method",
      "in": "query",
      "required": true
    },
    "filter": {
      "type": "string",
      "name": "filter",
      "in": "query"
    },
    "id": {
      "type": "string",
      "description": "The id of the requested resource",
      "name": "id",
      "in": "path",
      "required": true
    },
    "limit": {
      "type": "integer",
      "name": "limit",
      "in": "query"
    },
    "offset": {
      "type": "integer",
      "name": "offset",
      "in": "query"
    },
    "roleFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "name": "roleFilter",
      "in": "query"
    },
    "roleSemantic": {
      "type": "string",
      "name": "roleSemantic",
      "in": "query"
    },
    "serviceId": {
      "type": "string",
      "description": "The id of a service",
      "name": "serviceId",
      "in": "path",
      "required": true
    },
    "token": {
      "type": "string",
      "format": "uuid",
      "name": "token",
      "in": "query",
      "required": true
    },
    "token-optional": {
      "type": "string",
      "format": "uuid",
      "name": "token",
      "in": "query"
    }
  },
  "responses": {
    "badRequestResponse": {
      "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {}
            },
            "cause": {
              "details": {
                "context": "(root)",
                "field": "(root)",
                "property": "fooField3"
              },
              "field": "(root)",
              "message": "(root): fooField3 is required",
              "type": "required",
              "value": {
                "fooField": "abc",
                "fooField2": "def"
              }
            },
            "causeMessage": "schema validation failed",
            "code": "COULD_NOT_VALIDATE",
            "message": "The supplied request contains an invalid document",
            "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "cannotDeleteReferencedResourceResponse": {
      "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {
                "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
              }
            },
            "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
            "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
            "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
            "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "createCurrentApiSessionCertificateResponse": {
      "description": "A response of a create API Session certificate",
      "schema": {
        "$ref": "#/definitions/createCurrentApiSessionCertificateEnvelope"
      }
    },
    "createResponse": {
      "description": "The create request was successful and the resource has been added at the following location",
      "schema": {
        "$ref": "#/definitions/createEnvelope"
      }
    },
    "dataIntegrityCheckResult": {
      "description": "A list of data integrity issues found",
      "schema": {
        "$ref": "#/definitions/dataIntegrityCheckResultEnvelope"
      }
    },
    "deleteResponse": {
      "description": "The delete request was successful and the resource has been removed",
      "schema": {
        "$ref": "#/definitions/empty"
      }
    },
    "detailAPISession": {
      "description": "Retrieves a singular API Session by id",
      "schema": {
        "$ref": "#/definitions/detailAPISessionEnvelope"
      }
    },
    "detailAuthenticator": {
      "description": "A singular authenticator resource",
      "schema": {
        "$ref": "#/definitions/detailAuthenticatorEnvelope"
      }
    },
    "detailCa": {
      "description": "A singular Certificate Authority (CA) resource",
      "schema": {
        "$ref": "#/definitions/detailCaEnvelope"
      }
    },
    "detailConfig": {
      "description": "A singular config resource",
      "schema": {
        "$ref": "#/definitions/detailConfigEnvelope"
      }
    },
    "detailConfigType": {
      "description": "A singular config-type resource",
      "schema": {
        "$ref": "#/definitions/detailConfigTypeEnvelope"
      }
    },
    "detailCurrentAPISession": {
      "description": "The API session associated with the session used to issue the request",
      "schema": {
        "$ref": "#/definitions/currentAPISessionDetailEnvelope"
      },
      "examples": {
        "default": {
          "data": {
            "_links": {
              "self": {
                "href": "./current-api-session"
              }
            },
            "configTypes": null,
            "createdAt": "2020-03-09T19:03:49.1883693Z",
            "expiresAt": "2020-03-09T19:34:21.5600897Z",
            "id": "27343114-b44f-406e-9981-f3c4f2f28d54",
            "identity": {
              "_links": {
                "self": {
                  "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d"
                }
              },
              "id": "66352d7b-a6b2-4ce9-85bb-9f18e318704d",
              "name": "Default Admin",
              "urlName": "identities"
            },
            "tags": [
              {
                "userField1": 123
              },
              {
                "userField2": "asdf"
              }
            ],
            "token": "28bb0ed2-0577-4632-ae70-d17106b92871",
            "updatedAt": "2020-03-09T19:04:21.5600897Z"
          },
          "meta": {}
        }
      }
    },
    "detailCurrentApiSessionCertificate": {
      "description": "A response containing a single API Session certificate",
      "schema": {
        "$ref": "#/definitions/detailCurrentApiSessionCertificateEnvelope"
      }
    },
    "detailCurrentIdentity": {
      "description": "The identity associated with the API Session used to issue the request",
      "schema": {
        "$ref": "#/definitions/currentIdentityDetailEnvelope"
      },
      "examples": {
        "default": {
          "data": {
            "_links": {
              "edge-router-policies": {
                "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d/edge-routers"
              },
              "self": {
                "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d"
              },
              "service-policies": {
                "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d/identities"
              }
            },
            "authenticators": {
              "updb": {
                "username": "admin"
              }
            },
            "createdAt": "2020-01-13T16:38:13.6854788Z",
            "enrollment": {},
            "id": "66352d7b-a6b2-4ce9-85bb-9f18e318704d",
            "isAdmin": true,
            "isDefaultAdmin": true,
            "name": "Default Admin",
            "roleAttributes": {
              "$ref": "#/definitions/attributes"
            },
            "tags": {},
            "type": {
              "_links": {
                "self": {
                  "href": "./identity-types/577104f2-1e3a-4947-a927-7383baefbc9a"
                }
              },
              "id": "577104f2-1e3a-4947-a927-7383baefbc9a",
              "name": "User",
              "urlName": "identity-types"
            },
            "updatedAt": "2020-01-13T16:38:13.6854788Z"
          },
          "meta": {}
        }
      }
    },
    "detailEdgeRouter": {
      "description": "A singular edge router resource",
      "schema": {
        "$ref": "#/definitions/detailedEdgeRouterEnvelope"
      }
    },
    "detailEdgeRouterPolicy": {
      "description": "A single edge router policy",
      "schema": {
        "$ref": "#/definitions/detailEdgeRouterPolicyEnvelope"
      }
    },
    "detailEnrollment": {
      "description": "A singular enrollment resource",
      "schema": {
        "$ref": "#/definitions/detailEnrollmentEnvelope"
      }
    },
    "detailGeoRegion": {
      "description": "A single geo-region",
      "schema": {
        "$ref": "#/definitions/detailGeoRegionEnvelope"
      }
    },
    "detailIdentity": {
      "description": "A signle identity",
      "schema": {
        "$ref": "#/definitions/detailIdentityEnvelope"
      }
    },
    "detailIdentityType": {
      "description": "A single identity type",
      "schema": {
        "$ref": "#/definitions/detailIdentityTypeEnvelope"
      }
    },
    "detailPostureCheck": {
      "description": "Retrieves a singular posture check by id",
      "schema": {
        "$ref": "#/definitions/detailPostureCheckEnvelope"
      }
    },
    "detailPostureCheckType": {
      "description": "Retrieves a singular posture check type by id",
      "schema": {
        "$ref": "#/definitions/detailPostureCheckTypeEnvelope"
      }
    },
    "detailService": {
      "description": "A single service",
      "schema": {
        "$ref": "#/definitions/detailServiceEnvelope"
      }
    },
    "detailServiceEdgePolicy": {
      "description": "A single service edge router policy",
      "schema": {
        "$ref": "#/definitions/detailServiceEdgePolicyEnvelope"
      }
    },
    "detailServicePolicy": {
      "description": "A single service policy",
      "schema": {
        "$ref": "#/definitions/detailServicePolicyEnvelop"
      }
    },
    "detailSession": {
      "description": "A single session",
      "schema": {
        "$ref": "#/definitions/detailSessionEnvelope"
      }
    },
    "detailSpec": {
      "description": "A single specification",
      "schema": {
        "$ref": "#/definitions/detailSpecEnvelope"
      }
    },
    "detailSpecBody": {
      "description": "Returns the document that represents the specification",
      "schema": {
        "$ref": "#/definitions/detailSpecBodyEnvelope"
      }
    },
    "detailTerminator": {
      "description": "A single terminator",
      "schema": {
        "$ref": "#/definitions/detailTerminatorEnvelope"
      }
    },
    "detailTransitRouter": {
      "description": "A single transit router",
      "schema": {
        "$ref": "#/definitions/detailTransitRouterEnvelope"
      }
    },
    "emptyResponse": {
      "description": "Base empty response",
      "schema": {
        "$ref": "#/definitions/empty"
      }
    },
    "erottResponse": {
      "description": "A response containing the edge routers signed certificates (server chain, server cert, CAs).",
      "schema": {
        "$ref": "#/definitions/enrollmentCertsEnvelope"
      }
    },
    "getIdentityPolicyAdvice": {
      "description": "Returns the document that represents the policy advice",
      "schema": {
        "$ref": "#/definitions/getIdentityPolicyAdviceEnvelope"
      }
    },
    "getIdentityPostureData": {
      "description": "Returns the document that represents posture data",
      "schema": {
        "$ref": "#/definitions/getIdentityPostureDataEnvelope"
      }
    },
    "invalidAuthResponse": {
      "description": "The authentication request could not be processed as the credentials are invalid",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {}
            },
            "cause": "",
            "causeMessage": "",
            "code": "INVALID_AUTH",
            "message": "The authentication request failed",
            "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "listAPISessions": {
      "description": "A list of active API Sessions",
      "schema": {
        "$ref": "#/definitions/listAPISessionsEnvelope"
      }
    },
    "listAuthenticators": {
      "description": "A list of authenticators",
      "schema": {
        "$ref": "#/definitions/listAuthenticatorsEnvelope"
      }
    },
    "listCas": {
      "description": "A list of Certificate Authorities (CAs)",
      "schema": {
        "$ref": "#/definitions/listCasEnvelope"
      }
    },
    "listConfigTypes": {
      "description": "A list of config-types",
      "schema": {
        "$ref": "#/definitions/listConfigTypesEnvelope"
      }
    },
    "listConfigs": {
      "description": "A list of configs",
      "schema": {
        "$ref": "#/definitions/listConfigsEnvelope"
      }
    },
    "listCurrentApiSessionCertificates": {
      "description": "A list of the current API Session's certificate",
      "schema": {
        "$ref": "#/definitions/listCurrentAPISessionCertificatesEnvelope"
      }
    },
    "listCurrentApiSessionServiceUpdates": {
      "description": "Data indicating necessary service updates",
      "schema": {
        "$ref": "#/definitions/listCurrentApiSessionServiceUpdatesEnvelope"
      }
    },
    "listEdgeRouterPolicies": {
      "description": "A list of edge router policies",
      "schema": {
        "$ref": "#/definitions/listEdgeRouterPoliciesEnvelope"
      }
    },
    "listEdgeRouters": {
      "description": "A list of edge routers",
      "schema": {
        "$ref": "#/definitions/listEdgeRoutersEnvelope"
      }
    },
    "listEnrollments": {
      "description": "A list of enrollments",
      "schema": {
        "$ref": "#/definitions/listEnrollmentsEnvelope"
      }
    },
    "listGeoRegions": {
      "description": "A list of geo-regions",
      "schema": {
        "$ref": "#/definitions/listGeoRegionsEnvelope"
      }
    },
    "listIdentities": {
      "description": "A list of identities",
      "schema": {
        "$ref": "#/definitions/listIdentitiesEnvelope"
      }
    },
    "listIdentityTypes": {
      "description": "A list of identity types",
      "schema": {
        "$ref": "#/definitions/listIdentityTypesEnvelope"
      }
    },
    "listPostureCheckTypes": {
      "description": "A list of posture check types",
      "schema": {
        "$ref": "#/definitions/listPostureCheckTypesEnvelope"
      }
    },
    "listPostureChecks": {
      "description": "A list of posture checks",
      "schema": {
        "$ref": "#/definitions/listPostureCheckEnvelope"
      }
    },
    "listProtocols": {
      "description": "A list of supported Edge protocols",
      "schema": {
        "$ref": "#/definitions/listProtocolsEnvelope"
      }
    },
    "listRoleAttributes": {
      "description": "A list of role attributes",
      "schema": {
        "$ref": "#/definitions/listRoleAttributesEnvelope"
      }
    },
    "listServiceConfigs": {
      "description": "A list of service configs",
      "schema": {
        "$ref": "#/definitions/listServiceConfigsEnvelope"
      }
    },
    "listServiceEdgeRouterPolicies": {
      "description": "A list of service edge router policies",
      "schema": {
        "$ref": "#/definitions/listServiceEdgeRouterPoliciesEnvelope"
      }
    },
    "listServicePolicies": {
      "description": "A list of service policies",
      "schema": {
        "$ref": "#/definitions/listServicePoliciesEnvelope"
      }
    },
    "listServices": {
      "description": "A list of services",
      "schema": {
        "$ref": "#/definitions/listServicesEnvelope"
      }
    },
    "listSessions": {
      "description": "A list of sessions",
      "schema": {
        "$ref": "#/definitions/listSessionsEnvelope"
      }
    },
    "listSpecs": {
      "description": "A list of specifications",
      "schema": {
        "$ref": "#/definitions/listSpecsEnvelope"
      }
    },
    "listSummaryCounts": {
      "description": "Entity counts scopped to the current identitie's access",
      "schema": {
        "$ref": "#/definitions/listSummaryCountsEnvelope"
      }
    },
    "listTerminators": {
      "description": "A list of terminators",
      "schema": {
        "$ref": "#/definitions/listTerminatorsEnvelope"
      }
    },
    "listTransitRouters": {
      "description": "A list of specifications",
      "schema": {
        "$ref": "#/definitions/listTransitRoutersEnvelope"
      }
    },
    "listVersion": {
      "description": "Version information for the controller",
      "schema": {
        "$ref": "#/definitions/listVersionEnvelope"
      }
    },
    "notFoundResponse": {
      "description": "The requested resource does not exist",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {
                "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
              }
            },
            "cause": null,
            "causeMessage": "",
            "code": "NOT_FOUND",
            "message": "The resource requested was not found or is no longer available",
            "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "patchResponse": {
      "description": "The patch request was successful and the resource has been altered",
      "schema": {
        "$ref": "#/definitions/empty"
      }
    },
    "rateLimitedResponse": {
      "description": "The resource requested is rate limited and the rate limit has been exceeded",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {}
            },
            "causeMessage": "you have hit a rate limit in the requested operation",
            "code": "RATE_LIMITED",
            "message": "The resource is rate limited and the rate limit has been exceeded. Please try again later",
            "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "sessionCreateResponse": {
      "description": "The create request was successful and the resource has been added at the following location.",
      "schema": {
        "$ref": "#/definitions/sessionCreateEnvelope"
      }
    },
    "unauthorizedResponse": {
      "description": "The currently supplied session does not have the correct access rights to request this resource",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {}
            },
            "cause": "",
            "causeMessage": "",
            "code": "UNAUTHORIZED",
            "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
            "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "updateResponse": {
      "description": "The update request was successful and the resource has been altered",
      "schema": {
        "$ref": "#/definitions/empty"
      }
    },
    "zitiSignedCert": {
      "description": "A PEM encoded certificate signed by the internal Ziti CA",
      "schema": {
        "type": "string"
      },
      "examples": {
        "application/x-x509-user-cert": "-----BEGIN CERTIFICATE-----\nMIICzDCCAlGgAwIBAgIRAPkVg1jVKqnNGFpSB3lPbaIwCgYIKoZIzj0EAwIwXjEL\nMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMRMwEQYDVQQKDApOZXRGb3VuZHJ5MS0w\nKwYDVQQDDCROZXRGb3VuZHJ5IFppdGkgRXh0ZXJuYWwgQVBJIFJvb3QgQ0EwHhcN\nMTgxMTE1MTI1NzE3WhcNMTkxMTI1MTI1NzE3WjBrMQswCQYDVQQGEwJVUzELMAkG\nA1UECAwCTkMxEjAQBgNVBAcMCUNoYXJsb3R0ZTETMBEGA1UECgwKTmV0Rm91bmRy\neTEPMA0GA1UECwwGQWR2RGV2MRUwEwYDVQQDDAxaaXRpQ2xpZW50MDEwdjAQBgcq\nhkjOPQIBBgUrgQQAIgNiAATTl2ft+/K9RvDgki9gSr9udNcV2bxD4LrWEdCdXNzF\niVUiEcEte9z/M0JRt8lgo17OjFvS+ecrAmLtIZNmQnH3+9YeafjeNPpvQsMKxlTN\nMnU7Hka11GHc6swQZSyHvlKjgcUwgcIwCQYDVR0TBAIwADARBglghkgBhvhCAQEE\nBAMCBaAwMwYJYIZIAYb4QgENBCYWJE9wZW5TU0wgR2VuZXJhdGVkIENsaWVudCBD\nZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUtx+Tej6lSYdjb8Jbc2QuvoEsI/swHwYDVR0j\nBBgwFoAUcdTlRrnP43ZbQ3PGAbZMPE26+H4wDgYDVR0PAQH/BAQDAgXgMB0GA1Ud\nJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDAKBggqhkjOPQQDAgNpADBmAjEAuXDS\nH7KKMr+la+Yuh8d8Q9cLtXzdS0j6a8e7iOyPJmdWq2WuzNdbCfAfLgKXuxhSAjEA\nsadZrXl1OBv11RGAKdYBIyRmfYUotCFAtCNKcfgBUxci0TDaKDA7r3jnjKT1d7Fs\n-----END CERTIFICATE-----\n"
      }
    }
  },
  "securityDefinitions": {
    "ztSession": {
      "type": "apiKey",
      "name": "zt-session",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Ziti Edge",
    "contact": {},
    "version": "0.16.3"
  },
  "host": "demo.ziti.dev",
  "basePath": "/edge/v1",
  "paths": {
    "/": {
      "get": {
        "security": [],
        "tags": [
          "Informational"
        ],
        "summary": "Returns version information",
        "operationId": "listRoot",
        "responses": {
          "200": {
            "description": "Version information for the controller",
            "schema": {
              "$ref": "#/definitions/listVersionEnvelope"
            }
          }
        }
      }
    },
    "/.well-known/est/cacerts": {
      "get": {
        "security": [],
        "description": "This endpoint is used during enrollments to bootstrap trust between enrolling clients and the Ziti Edge API.\nThis endpoint returns a base64 encoded PKCS7 store. The content can be base64 decoded and parsed by any library\nthat supports parsing PKCS7 stores.\n",
        "produces": [
          "application/pkcs7-mime"
        ],
        "tags": [
          "Well Known"
        ],
        "summary": "Get CA Cert Store",
        "operationId": "listWellKnownCas",
        "responses": {
          "200": {
            "description": "A base64 encoded PKCS7 store",
            "schema": {
              "type": "string",
              "example": "MIIMUQYJKoZIhvcNAQcCoIIMQjCCDD4CAQExADALBgkqhkiG9w0BBwGgggwkMIIG BjCCA+6gAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwgZcxCzAJBgNVBAYTAlVTMRcw FQYDVQQIDA5Ob3J0aCBDYXJvbGluYTESMBAGA1UEBwwJQ2hhcmxvdHRlMRMwEQYD VQQKDApOZXRGb3VuZHJ5MSkwJwYDVQQLDCBOZXRGb3VuZHJ5IENlcnRpZmljYXRl IEF1dGhvcml0eTEbMBkGA1UEAwwSTmV0Rm91bmRyeSBSb290IENBMB4XDTE4MDUx ODE2NTcyM1oXDTI4MDUxNTE2NTcyM1owgYsxCzAJBgNVBAYTAlVTMRcwFQYDVQQI DA5Ob3J0aCBDYXJvbGluYTETMBEGA1UECgwKTmV0Rm91bmRyeTEpMCcGA1UECwwg TmV0Rm91bmRyeSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxIzAhBgNVBAMMGk5ldEZv dW5kcnkgSW50ZXJtZWRpYXRlIENBMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC CgKCAgEAsb1EPhMUweS9WpjT7L54xAOmZqugJ6fhSrFfLUwNUy172q+ASvZTpT1z KIPcZpGmPB3TX2bHaAR67BbRkUR11JgWE3U8+FsGrYmPZtaKM6fg8Mh0WZ41oMYQ NJyQixOktrgqfybyJoT5PeT5AA7QQmd8mku2X9nkAu6gWPf2nHNc7SeQdijmyQQa VK3oqyaxOzWzsU/XbfMEz/ObkefUxgt5Z6jlK0xcW0Q+QgtawMKLUiuo6obWRPcl 7Hm9Sze8XJS5pbvS5JkUszxoRZuDVHZylrlHIpA/IL+BnvS+M7SP28UWe9skrv/s 6ACpJtuPJ1EYf5fakugOpY7i+hq7YNi//csbc49Qjn2OtttrR7JcTaHUEU1I/tQb QGAtNkI4pJjRVUdDawQFQlWHZD1COixNLErs2HzAI00DhLrY6SKITI/kjN0Xx010 XdMcdfay0PLWm6RwxiRmMQFL4GNIC895NF1q6xV4W4rWgqUNlcvKpy+i1chWpRbU He16ul0qh10fcESrRvAbXn5YrQJLrwbSr+85ubN8lYdNLE0qg2cIXZlUilarZZzW ghtCe+KkUpjfRuAi/CqfSwNK3QXEfeVEK6S49mHeSekOizFIw7fmDhCz9vXwMOnb ryRSLEJks0gIRcSDVChXheAqC98y4kcQdniNWFnqJXoqA+rrSokCAwEAAaNmMGQw HQYDVR0OBBYEFK8UXC/sq6dGVFAqEXHsQDzqzwuUMB8GA1UdIwQYMBaAFEHz6RRu OuXj2mwAzOeUinfWeivpMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQD AgGGMA0GCSqGSIb3DQEBCwUAA4ICAQBDAAaOE2Nbb49eOjyTNxIeOB+ZKQjJ1hUE gRrootAA8NYbtKW/vyxTWnNi5XOGXd4DFS9OKZ0mL/7NyLc0mbTwPH2ZT8KTPUTS Cpo6yktZ/7TMjyAtWZiOMg2EH+6m/nlNSXk/v5fb8+JQLdZfpxoA017dHh3tc8l7 KOskCZNwQHgF/YMXrPXUNbsGkXRuJLtpjPw5O9GvPys7p+a1aJH1WCTly9zfB6j+ rMF+UGCPDT30sxitVlohik83j6pKLgEAP/gi8nJbILlTP7ce+gJeHR2tfDvmK91X 6QgCF2STUFBU7/9H1/pPRRykOxQpAd8xqSgqGEyp9Ie4tysZjwoUEnG8IVJ5ykrI Fximvnb4B+LABV9WEo08n8m1R8wEryrISi8fBPn3Pr5nuayOfFLa15CLTkZF40FN 8ika1qNZy8bWRDwTZJQUUb7VCheRWcMwdZdNmhl3J+VZLpQ+ruW7b2ajwacHz5Nw BHKNcmxXb/4vHq/BnlcayHnSqT6036+OZQ+owDegcYmWV6LaM7xLErjHz2EE38M2 YSiW5SU1zluDe+iHb6l3Gd3Fj/X1gkMWFgYh0XPMSUSyimLNYzy4THKzmWlcQNFo LLiIDbLrMt+vk+vBkIsNTTPXRJOFPBhmIF6uIUj+2YhzNotX/pQtqMKms3pPlmHq dH6biwygETCCBhYwggP+oAMCAQICCQDquKpymLJ5WzANBgkqhkiG9w0BAQsFADCB lzELMAkGA1UEBhMCVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRIwEAYDVQQH DAlDaGFybG90dGUxEzARBgNVBAoMCk5ldEZvdW5kcnkxKTAnBgNVBAsMIE5ldEZv dW5kcnkgQ2VydGlmaWNhdGUgQXV0aG9yaXR5MRswGQYDVQQDDBJOZXRGb3VuZHJ5 IFJvb3QgQ0EwHhcNMTgwNTE4MTY1NDQ3WhcNMzgwNTEzMTY1NDQ3WjCBlzELMAkG A1UEBhMCVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRIwEAYDVQQHDAlDaGFy bG90dGUxEzARBgNVBAoMCk5ldEZvdW5kcnkxKTAnBgNVBAsMIE5ldEZvdW5kcnkg Q2VydGlmaWNhdGUgQXV0aG9yaXR5MRswGQYDVQQDDBJOZXRGb3VuZHJ5IFJvb3Qg Q0EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDKq/Xa+749Cr3WJGYD DIEtNKIRnTFc6TeiRSm/O7hG2+1Nrh/dObjZJuDjsopWP8NFA/DwlNyEphYKAeSw HDmu+4nFd6ifoeDE2lYq6bNhLcgN+A3MlN5Phb2rnO32YYZwHXGWov+jtd2gaK0f WsH8CQxn6n2v7qvPMTeYFP8p4jqTZw2bvZWw+LMYTFCy541DFqQLQasMg10mXRAV XO7Oa9y+D1re1zLq4wS6u8ItJoKzfmvZkMvD90C/tQ4u0iJaL7GB2SE9MOPDeGVv pnoSAIkSVmvRDUAj2x9PuukykzoL1OAWzc5Cg+5LxRmLejVE7PvPcHaTtNag2tRD w2vbMeFKN8NvQH1QYcaPWZe4Vl9b6DAuTaH5RN919H/F+ZHyjZybVPwC14lflneI KyNy8JEV/YMIbEADWnuiedzDehk2Opn+0+9Zr2X/xfjCo8iWHFbNaVnQX7wdRaOo 783lEouncqe46FDBLBpyAuDKHQpIT3MK8rkC/1yBNxsH44vMweUZuK0u7PC9KHtm pQfuflYGfxA34kY6WU3jzyQHetoLYjoxTqNEEjuGpwy2o1j7RaCBEFIbYlnlbhpE WFTaQf96z2GQ6m1U3y7JyDflHSu9Fo1JNkG3qXsjDwda/6W7NRJRgdFrhnOwrm7F 6L9X4P1HnzU/VJL66LwPmiHVjQIDAQABo2MwYTAdBgNVHQ4EFgQUQfPpFG465ePa bADM55SKd9Z6K+kwHwYDVR0jBBgwFoAUQfPpFG465ePabADM55SKd9Z6K+kwDwYD VR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIB ACfU74aKWROaxnue8tZb5PFkEbnDRcRrKXRhnptA0vrgB4ydnYxX9hEBZD8o6PBy 3rewvl5meSOBE6zyb4JD80lHdzHSVFIwbzsNOeEjCslv/PA/3Y+J7DCt6gPNMDeY uEssdqeSiMoYz2gnven4flSMKgTAJd3/SpVrn35HzXiU9MkmFVpPEMnTctOjw+Jn cCkG5+D9N14dxtgZ/tUfbH+GUfhyGVxRdPrX5KQqAyapMfEaMXXa8KNs7PG+sDiS WI+Sg9jUGtxgkfKdVNtFW+QMXyy7eT3iXPA+1r2hFAhgfIaGtBJUhxPHMhKtjbAg AX+6+2D3GAbaD1+lcQHhKry3hygQ3OX79FJW6zyPS0tiV/LfovHqX/3x9q5PTVBO wEOS2/LCc4R2M7S+HIPf4eSJ+nH4uCIdJ42WCror/mRsuL7geCksi70GHuCynP4y qQFszu/UtbBEsN8loTnLpOInxaGB1Y8UPm14b2Lo1/3HkoMVh0/UaHJ0TmnZ1r7m fGhfRyAZYRdvT1sB+Eb4b5A2zEZqsTc9IwFOhnI4ZilPoZ5s2xejqrVw3GSvovEh dprrQmvxuh+VQ23y/+/4z9b2xWyDu2zVveB4whqPe2rkgxJrEl4GfLk2DW+dN6j8 3Zl4lPoUZYwzkC6raCaHyFlAoaTbqz0H6rvVJYxJPS6UoQAxAA=="
            }
          }
        }
      }
    },
    "/api-sessions": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Returns a list of active API sessions. The resources can be sorted, filtered, and paginated. This endpoint\nrequries admin access.\n",
        "produces": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "API Session"
        ],
        "summary": "List active API sessions",
        "operationId": "listAPISessions",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of active API Sessions",
            "schema": {
              "$ref": "#/definitions/listAPISessionsEnvelope"
            }
          }
        }
      }
    },
    "/api-sessions/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single API Session by id. Requires admin access.",
        "tags": [
          "API Session"
        ],
        "summary": "Retrieves a single API Session",
        "operationId": "detailAPISessions",
        "responses": {
          "200": {
            "description": "Retrieves a singular API Session by id",
            "schema": {
              "$ref": "#/definitions/detailAPISessionEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Deletes and API sesion by id. Requires admin access.",
        "tags": [
          "API Session"
        ],
        "summary": "Deletes an API Sessions",
        "operationId": "deleteAPISessions",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "403": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/authenticate": {
      "post": {
        "security": [],
        "description": "Allows authentication  Methods include \"password\" and \"cert\"\n",
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate via a method supplied via a query string parameter",
        "operationId": "authenticate",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/authenticate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The API session associated with the session used to issue the request",
            "schema": {
              "$ref": "#/definitions/currentAPISessionDetailEnvelope"
            },
            "examples": {
              "default": {
                "data": {
                  "_links": {
                    "self": {
                      "href": "./current-api-session"
                    }
                  },
                  "configTypes": [],
                  "createdAt": "2020-03-09T19:03:49.1883693Z",
                  "expiresAt": "2020-03-09T19:34:21.5600897Z",
                  "id": "27343114-b44f-406e-9981-f3c4f2f28d54",
                  "identity": {
                    "_links": {
                      "self": {
                        "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d"
                      }
                    },
                    "id": "66352d7b-a6b2-4ce9-85bb-9f18e318704d",
                    "name": "Default Admin",
                    "urlName": "identities"
                  },
                  "tags": [
                    {
                      "userField1": 123
                    },
                    {
                      "userField2": "asdf"
                    }
                  ],
                  "token": "28bb0ed2-0577-4632-ae70-d17106b92871",
                  "updatedAt": "2020-03-09T19:04:21.5600897Z"
                },
                "meta": {}
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "403": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "password",
            "cert"
          ],
          "type": "string",
          "name": "method",
          "in": "query",
          "required": true
        }
      ]
    },
    "/authenticators": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Returns a list of authenticators associated to identities. The resources can be sorted, filtered, and paginated.\nThis endpoint requries admin access.\n",
        "tags": [
          "Authenticator"
        ],
        "summary": "List authenticators",
        "operationId": "listAuthenticators",
        "responses": {
          "200": {
            "description": "A list of authenticators",
            "schema": {
              "$ref": "#/definitions/listAuthenticatorsEnvelope"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Creates an authenticator for a specific identity. Requires admin access.\n",
        "tags": [
          "Authenticator"
        ],
        "summary": "Creates an authenticator",
        "operationId": "createAuthenticator",
        "parameters": [
          {
            "description": "A Authenticators create object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticatorCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create was successful",
            "schema": {
              "$ref": "#/definitions/authenticatorCreate"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/authenticators/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single authenticator by id. Requires admin access.",
        "tags": [
          "Authenticator"
        ],
        "summary": "Retrieves a single authenticator",
        "operationId": "detailAuthenticator",
        "responses": {
          "200": {
            "description": "A singular authenticator resource",
            "schema": {
              "$ref": "#/definitions/detailAuthenticatorEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on an authenticator by id. Requires admin access.",
        "tags": [
          "Authenticator"
        ],
        "summary": "Update all fields on an authenticator",
        "operationId": "updateAuthenticator",
        "parameters": [
          {
            "description": "An authenticator put object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticatorUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an authenticator by id. Deleting all authenticators for an identity will make it impossible to log in.\nRequires admin access.\n",
        "tags": [
          "Authenticator"
        ],
        "summary": "Delete an Authenticator",
        "operationId": "deleteAuthenticator",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on an authenticator by id. Requires admin access.",
        "tags": [
          "Authenticator"
        ],
        "summary": "Update the supplied fields on an authenticator",
        "operationId": "patchAuthenticator",
        "parameters": [
          {
            "description": "An authenticator patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticatorPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/cas": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of CA resources; supports filtering, sorting, and pagination. Requires admin access.",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "List CAs",
        "operationId": "listCas",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Certificate Authorities (CAs)",
            "schema": {
              "$ref": "#/definitions/listCasEnvelope"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Creates a CA in an unverified state. Requires admin access.",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Creates a CA",
        "operationId": "createCa",
        "parameters": [
          {
            "description": "A CA to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/caCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/cas/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single CA by id. Requires admin access.",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Retrieves a single CA",
        "operationId": "detailCa",
        "responses": {
          "200": {
            "description": "A singular Certificate Authority (CA) resource",
            "schema": {
              "$ref": "#/definitions/detailCaEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a CA by id. Requires admin access.",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Update all fields on a CA",
        "operationId": "updateCa",
        "parameters": [
          {
            "description": "A CA update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/caUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a CA by id. Deleting a CA will delete its associated certificate authenticators. This can make it\nimpossible for identities to authenticate if they no longer have any valid authenticators. Requires admin access.\n",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Delete a CA",
        "operationId": "deleteCa",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update only the supplied fields on a CA by id. Requires admin access.",
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Update the supplied fields on a CA",
        "operationId": "patchCa",
        "parameters": [
          {
            "description": "A CA patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/caPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/cas/{id}/jwt": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "For CA auto enrollment, the enrollment JWT is static and provided on each CA resource. This endpoint provides\nthe jwt as a text response.\n",
        "produces": [
          "application/jwt"
        ],
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Retrieve the enrollment JWT for a CA",
        "operationId": "getCaJwt",
        "responses": {
          "200": {
            "description": "The result is the JWT text to validate the CA",
            "schema": {
              "type": "string"
            },
            "examples": {
              "application/jwt": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbSI6ImNhIiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6MTI 4MC8ifQ.Ot6lhNBSOw8ygHytdI5l7WDf9EWadOj44UPvJ0c-8mJ54fClWM3uMZrAHSSfV6KmOSZOeBBJe4VlNyoD-_MOECP0BzYSnSQP3E zJb0VlM-fFmGcKNGW157icyZNISfO43JL_Lw2QPBzTgikqSIj9eZnocC3BeAmZCHsVznnLfHWqDldcmuxnu-5MNOSrWV1x9iVcgLFlLHXK 2PLA4qIiZmlQTrQjpHJmUaoJ07mnj8hMKzxB3wBG8kpazjEo7HDRCO06aBH4eqFgf_l0iT8Dzcb31jquWMGUoSXPhf4lVJh_FiNcR1wVx- UiHLbG5h23Aqf1UJF-F38rc1FElKz0Zg"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/cas/{id}/verify": {
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Allows a CA to become verified by submitting a certificate in PEM format that has been signed by the target CA.\nThe common name on the certificate must match the verificationToken property of the CA. Unverfieid CAs can not\nbe used for enrollment/authentication. Requires admin access.\n",
        "consumes": [
          "text/plain"
        ],
        "tags": [
          "Certificate Authority"
        ],
        "summary": "Verify a CA",
        "operationId": "verifyCa",
        "parameters": [
          {
            "description": "A PEM formatted certificate signed by the target CA with the common name matching the CA's validationToken",
            "name": "certificate",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/config-types": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of config-type resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Config"
        ],
        "summary": "List config-types",
        "operationId": "listConfigTypes",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of config-types",
            "schema": {
              "$ref": "#/definitions/listConfigTypesEnvelope"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "tags": [
          "Config"
        ],
        "summary": "Create a config-type. Requires admin access.",
        "operationId": "createConfigType",
        "parameters": [
          {
            "description": "A config-type to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configTypeCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/config-types/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single config-type by id. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Retrieves a single config-type",
        "operationId": "detailConfigType",
        "responses": {
          "200": {
            "description": "A singular config-type resource",
            "schema": {
              "$ref": "#/definitions/detailConfigTypeEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a config-type by id. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Update all fields on a config-type",
        "operationId": "updateConfigType",
        "parameters": [
          {
            "description": "A config-type update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configTypeUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a config-type by id. Removing a configuration type that are in use will result in a 409 conflict HTTP status code and error. All configurations of a type must be removed first.",
        "tags": [
          "Config"
        ],
        "summary": "Delete a config-type",
        "operationId": "deleteConfigType",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a config-type. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Update the supplied fields on a config-type",
        "operationId": "patchConfigType",
        "parameters": [
          {
            "description": "A config-type patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configTypePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/config-types/{id}/configs": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Lists the configs associated to a config-type. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Lists the configs of a specific config-type",
        "operationId": "listConfigsForConfigType",
        "responses": {
          "200": {
            "description": "A list of configs",
            "schema": {
              "$ref": "#/definitions/listConfigsEnvelope"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/configs": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of config resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Config"
        ],
        "summary": "List configs",
        "operationId": "listConfigs",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of configs",
            "schema": {
              "$ref": "#/definitions/listConfigsEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a config resource. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Create a config resource",
        "operationId": "createConfig",
        "parameters": [
          {
            "description": "A config to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/configs/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single config by id. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Retrieves a single config",
        "operationId": "detailConfig",
        "responses": {
          "200": {
            "description": "A singular config resource",
            "schema": {
              "$ref": "#/definitions/detailConfigEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a config by id. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Update all fields on a config",
        "operationId": "updateConfig",
        "parameters": [
          {
            "description": "A config update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a config by id. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Delete a config",
        "operationId": "deleteConfig",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a config. Requires admin access.",
        "tags": [
          "Config"
        ],
        "summary": "Update the supplied fields on a config",
        "operationId": "patchConfig",
        "parameters": [
          {
            "description": "A config patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/current-api-session": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves the API session that was used to issue the current request",
        "tags": [
          "Current API Session"
        ],
        "summary": "Return the current API session",
        "operationId": "getCurrentAPISession",
        "responses": {
          "200": {
            "description": "The API session associated with the session used to issue the request",
            "schema": {
              "$ref": "#/definitions/currentAPISessionDetailEnvelope"
            },
            "examples": {
              "default": {
                "data": {
                  "_links": {
                    "self": {
                      "href": "./current-api-session"
                    }
                  },
                  "configTypes": [],
                  "createdAt": "2020-03-09T19:03:49.1883693Z",
                  "expiresAt": "2020-03-09T19:34:21.5600897Z",
                  "id": "27343114-b44f-406e-9981-f3c4f2f28d54",
                  "identity": {
                    "_links": {
                      "self": {
                        "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d"
                      }
                    },
                    "id": "66352d7b-a6b2-4ce9-85bb-9f18e318704d",
                    "name": "Default Admin",
                    "urlName": "identities"
                  },
                  "tags": [
                    {
                      "userField1": 123
                    },
                    {
                      "userField2": "asdf"
                    }
                  ],
                  "token": "28bb0ed2-0577-4632-ae70-d17106b92871",
                  "updatedAt": "2020-03-09T19:04:21.5600897Z"
                },
                "meta": {}
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Terminates the current API session",
        "tags": [
          "Current API Session"
        ],
        "summary": "Logout",
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/current-api-session/certificates": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of certificate resources for the current API session; supports filtering, sorting, and pagination",
        "tags": [
          "Current API Session"
        ],
        "summary": "List the ephemeral certificates available for the current API Session",
        "operationId": "listCurrentApiSessionCertificates",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the current API Session's certificate",
            "schema": {
              "$ref": "#/definitions/listCurrentAPISessionCertificatesEnvelope"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Creates an ephemeral certificate for the current API Session. This endpoint expects a PEM encoded CSRs to be provided for fulfillment as a property of a JSON payload. It is up to the client to manage the private key backing the CSR request.",
        "tags": [
          "Current API Session"
        ],
        "summary": "Creates an ephemeral certificate for the current API Session",
        "operationId": "createCurrentApiSessionCertificate",
        "parameters": [
          {
            "description": "The payload describing the CSR used to create a session certificate",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/currentApiSessionCertificateCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response of a create API Session certificate",
            "schema": {
              "$ref": "#/definitions/createCurrentApiSessionCertificateEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/current-api-session/certificates/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single ephemeral certificate by id",
        "tags": [
          "Current API Session"
        ],
        "summary": "Retrieves an ephemeral certificate",
        "operationId": "detailCurrentApiSessionCertificate",
        "responses": {
          "200": {
            "description": "A response containing a single API Session certificate",
            "schema": {
              "$ref": "#/definitions/detailCurrentApiSessionCertificateEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an ephemeral certificateby id\n",
        "tags": [
          "Current API Session"
        ],
        "summary": "Delete an ephemeral certificate",
        "operationId": "deleteCurrentApiSessionCertificate",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {}
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Terminates the current API session",
        "tags": [
          "Current API Session"
        ],
        "summary": "Logout",
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/current-api-session/certificates": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of certificate resources for the current API session; supports filtering, sorting, and pagination",
        "tags": [
          "Current API Session"
        ],
        "summary": "List the ephemeral certificates available for the current API Session",
        "operationId": "listCurrentApiSessionCertificates",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the current API Session's certificate",
            "schema": {
              "$ref": "#/definitions/listCurrentAPISessionCertificatesEnvelope"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Creates an ephemeral certificate for the current API Session. This endpoint expects a PEM encoded CSRs to be provided for fulfillment as a property of a JSON payload. It is up to the client to manage the private key backing the CSR request.",
        "tags": [
          "Current API Session"
        ],
        "summary": "Creates an ephemeral certificate for the current API Session",
        "operationId": "createCurrentApiSessionCertificate",
        "parameters": [
          {
            "description": "The payload describing the CSR used to create a session certificate",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/currentApiSessionCertificateCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response of a create API Session certificate",
            "schema": {
              "$ref": "#/definitions/createCurrentApiSessionCertificateEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/current-api-session/certificates/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single ephemeral certificate by id",
        "tags": [
          "Current API Session"
        ],
        "summary": "Retrieves an ephemeral certificate",
        "operationId": "detailCurrentApiSessionCertificate",
        "responses": {
          "200": {
            "description": "A response containing a single API Session certificate",
            "schema": {
              "$ref": "#/definitions/detailCurrentApiSessionCertificateEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/current-api-session/service-updates": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves data indicating the last time data relevant to this API Session was altered that would necessitate\nservice refreshes.\n",
        "tags": [
          "Current API Session",
          "Services"
        ],
        "summary": "Returns data indicating whether a client should updates it service list",
        "operationId": "listServiceUpdates",
        "responses": {
          "200": {
            "description": "Data indicating necessary service updates",
            "schema": {
              "$ref": "#/definitions/listCurrentApiSessionServiceUpdatesEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/current-identity": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Returns the identity associated with the API sessions used to issue the current request",
        "tags": [
          "Current API Session"
        ],
        "summary": "Return the current identity",
        "operationId": "getCurrentIdentity",
        "responses": {
          "200": {
            "description": "The identity associated with the API Session used to issue the request",
            "schema": {
              "$ref": "#/definitions/currentIdentityDetailEnvelope"
            },
            "examples": {
              "default": {
                "data": {
                  "_links": {
                    "edge-router-policies": {
                      "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d/edge-routers"
                    },
                    "self": {
                      "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d"
                    },
                    "service-policies": {
                      "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d/identities"
                    }
                  },
                  "authenticators": {
                    "updb": {
                      "username": "admin"
                    }
                  },
                  "createdAt": "2020-01-13T16:38:13.6854788Z",
                  "enrollment": {},
                  "id": "66352d7b-a6b2-4ce9-85bb-9f18e318704d",
                  "isAdmin": true,
                  "isDefaultAdmin": true,
                  "name": "Default Admin",
                  "roleAttributes": {
                    "$ref": "#/definitions/attributes"
                  },
                  "tags": {},
                  "type": {
                    "_links": {
                      "self": {
                        "href": "./identity-types/577104f2-1e3a-4947-a927-7383baefbc9a"
                      }
                    },
                    "id": "577104f2-1e3a-4947-a927-7383baefbc9a",
                    "name": "User",
                    "urlName": "identity-types"
                  },
                  "updatedAt": "2020-01-13T16:38:13.6854788Z"
                },
                "meta": {}
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/current-identity/authenticators": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of authenticators assigned to the current API session's identity; supports filtering, sorting, and pagination.",
        "tags": [
          "Current API Session"
        ],
        "summary": "List authenticators for the current identity",
        "operationId": "listCurrentIdentityAuthenticators",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of authenticators",
            "schema": {
              "$ref": "#/definitions/listAuthenticatorsEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/current-identity/authenticators/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single authenticator by id. Will only show authenticators assigned to the API session's identity.",
        "tags": [
          "Current API Session"
        ],
        "summary": "Retrieve an authenticator for the current identity",
        "operationId": "detailCurrentIdentityAuthenticator",
        "responses": {
          "200": {
            "description": "A singular authenticator resource",
            "schema": {
              "$ref": "#/definitions/detailAuthenticatorEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on an authenticator by id.  Will only update authenticators assigned to the API session's\nidentity.\n",
        "tags": [
          "Current API Session"
        ],
        "summary": "Update all fields on an authenticator of this identity",
        "operationId": "updateCurrentIdentityAuthenticator",
        "parameters": [
          {
            "description": "An authenticator put object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticatorUpdateWithCurrent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on an authenticator by id. Will only update authenticators assigned to the API\nsession's identity.\n",
        "tags": [
          "Current API Session"
        ],
        "summary": "Update the supplied fields on an authenticator of this identity",
        "operationId": "patchCurrentIdentityAuthenticator",
        "parameters": [
          {
            "description": "An authenticator patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticatorPatchWithCurrent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/database/check-data-integrity": {
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Starts a data integrity scan on the datastore. Requires admin access. Only once instance may run at a time, including runs of fixDataIntegrity.",
        "tags": [
          "Database"
        ],
        "summary": "Starts a data integrity scan on the datastore",
        "operationId": "checkDataIntegrity",
        "responses": {
          "202": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "429": {
            "description": "The resource requested is rate limited and the rate limit has been exceeded",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "causeMessage": "you have hit a rate limit in the requested operation",
                  "code": "RATE_LIMITED",
                  "message": "The resource is rate limited and the rate limit has been exceeded. Please try again later",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/database/data-integrity-results": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Returns any results found from in-progress integrity checks. Requires admin access.",
        "tags": [
          "Database"
        ],
        "summary": "Returns any results found from in-progress integrity checks",
        "operationId": "dataIntegrityResults",
        "responses": {
          "200": {
            "description": "A list of data integrity issues found",
            "schema": {
              "$ref": "#/definitions/dataIntegrityCheckResultEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/database/fix-data-integrity": {
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Runs a data integrity scan on the datastore, attempts to fix any issues it can, and returns any found issues. Requires admin access. Only once instance may run at a time, including runs of checkDataIntegrity.",
        "tags": [
          "Database"
        ],
        "summary": "Runs a data integrity scan on the datastore, attempts to fix any issues it can and returns any found issues",
        "operationId": "fixDataIntegrity",
        "responses": {
          "202": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "429": {
            "description": "The resource requested is rate limited and the rate limit has been exceeded",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "causeMessage": "you have hit a rate limit in the requested operation",
                  "code": "RATE_LIMITED",
                  "message": "The resource is rate limited and the rate limit has been exceeded. Please try again later",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/database/snapshot": {
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a new database snapshot. Requires admin access.",
        "tags": [
          "Database"
        ],
        "summary": "Create a new database snapshot",
        "operationId": "createDatabaseSnapshot",
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "429": {
            "description": "The resource requested is rate limited and the rate limit has been exceeded",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "causeMessage": "you have hit a rate limit in the requested operation",
                  "code": "RATE_LIMITED",
                  "message": "The resource is rate limited and the rate limit has been exceeded. Please try again later",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge router policy resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "List edge router policies",
        "operationId": "listEdgeRouterPolicies",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of edge router policies",
            "schema": {
              "$ref": "#/definitions/listEdgeRouterPoliciesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create an edge router policy resource. Requires admin access.",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "Create an edge router policy resource",
        "operationId": "createEdgeRouterPolicy",
        "parameters": [
          {
            "description": "An edge router policy to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterPolicyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/edge-router-policies/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single edge router policy by id. Requires admin access.",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "Retrieves a single edge router policy",
        "operationId": "detailEdgeRouterPolicy",
        "responses": {
          "200": {
            "description": "A single edge router policy",
            "schema": {
              "$ref": "#/definitions/detailEdgeRouterPolicyEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on an edge router policy by id. Requires admin access.",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "Update all fields on an edge router policy",
        "operationId": "updateEdgeRouterPolicy",
        "parameters": [
          {
            "description": "An edge router policy update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterPolicyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an edge router policy by id. Requires admin access.",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "Delete an edge router policy",
        "operationId": "deleteEdgeRouterPolicy",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on an edge router policy. Requires admin access.",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "Update the supplied fields on an edge router policy",
        "operationId": "patchEdgeRouterPolicy",
        "parameters": [
          {
            "description": "An edge router policy patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterPolicyPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/edge-router-policies/{id}/edge-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge routers an edge router policy resources affects; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "List edge routers a policy affects",
        "operationId": "listEdgeRouterPolicyEdgeRouters",
        "responses": {
          "200": {
            "description": "A list of edge routers",
            "schema": {
              "$ref": "#/definitions/listEdgeRoutersEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/edge-router-policies/{id}/identities": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identities an edge router policy resources affects; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router Policy"
        ],
        "summary": "List identities an edge router policy affects",
        "operationId": "listEdgeRouterPolicyIdentities",
        "responses": {
          "200": {
            "description": "A list of identities",
            "schema": {
              "$ref": "#/definitions/listIdentitiesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/edge-router-role-attributes": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of role attributes in use by edge routers; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Role Attributes"
        ],
        "summary": "List role attributes in use by edge routers",
        "operationId": "listEdgeRouterRoleAttributes",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of role attributes",
            "schema": {
              "$ref": "#/definitions/listRoleAttributesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/edge-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge router resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router"
        ],
        "summary": "List edge routers",
        "operationId": "listEdgeRouters",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "roleFilter",
            "in": "query"
          },
          {
            "type": "string",
            "name": "roleSemantic",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of edge routers",
            "schema": {
              "$ref": "#/definitions/listEdgeRoutersEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a edge router resource. Requires admin access.",
        "tags": [
          "Edge Router"
        ],
        "summary": "Create an edge router",
        "operationId": "createEdgeRouter",
        "parameters": [
          {
            "description": "A config-type to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/edge-routers/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single edge router by id. Requires admin access.",
        "tags": [
          "Edge Router"
        ],
        "summary": "Retrieves a single edge router",
        "operationId": "detailEdgeRouter",
        "responses": {
          "200": {
            "description": "A singular edge router resource",
            "schema": {
              "$ref": "#/definitions/detailedEdgeRouterEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on an edge router by id. Requires admin access.",
        "tags": [
          "Edge Router"
        ],
        "summary": "Update all fields on an edge router",
        "operationId": "updateEdgeRouter",
        "parameters": [
          {
            "description": "An edge router update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an edge router by id. Requires admin access.",
        "tags": [
          "Edge Router"
        ],
        "summary": "Delete an edge router",
        "operationId": "deleteEdgeRouter",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on an edge router. Requires admin access.",
        "tags": [
          "Edge Router"
        ],
        "summary": "Update the supplied fields on an edge router",
        "operationId": "patchEdgeRouter",
        "parameters": [
          {
            "description": "An edge router patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgeRouterPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/edge-routers/{id}/edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge router policies that apply to the specified edge router.",
        "tags": [
          "Edge Router"
        ],
        "summary": "List the edge router policies that affect an edge router",
        "operationId": "listEdgeRouterEdgeRouterPolicies",
        "responses": {
          "200": {
            "description": "A list of edge router policies",
            "schema": {
              "$ref": "#/definitions/listEdgeRouterPoliciesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/edge-routers/{id}/identities": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identities that may access services via the given edge router. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router"
        ],
        "summary": "List associated identities",
        "operationId": "listEdgeRouterIdentities",
        "responses": {
          "200": {
            "description": "A list of identities",
            "schema": {
              "$ref": "#/definitions/listIdentitiesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/edge-routers/{id}/service-edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service policies policies that apply to the specified edge router.",
        "tags": [
          "Edge Router"
        ],
        "summary": "List the service policies that affect an edge router",
        "operationId": "listEdgeRouterServiceEdgeRouterPolicies",
        "responses": {
          "200": {
            "description": "A list of service policies",
            "schema": {
              "$ref": "#/definitions/listServicePoliciesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/edge-routers/{id}/services": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of services that may be accessed via the given edge router. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Edge Router"
        ],
        "summary": "List associated services",
        "operationId": "listEdgeRouterServices",
        "responses": {
          "200": {
            "description": "A list of services",
            "schema": {
              "$ref": "#/definitions/listServicesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/enroll": {
      "post": {
        "description": "endpoint defers to the logic in the more specific ` + "`" + `enroll/*` + "`" + ` endpoints",
        "consumes": [
          "application/json",
          "application/pkcs10",
          "application/x-pem-file",
          "text/plain"
        ],
        "produces": [
          "application/json",
          "application/x-pem-file"
        ],
        "tags": [
          "Enroll"
        ],
        "summary": "Legacy enrollment endpoint",
        "operationId": "enroll",
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "name": "token",
          "in": "query"
        }
      ]
    },
    "/enroll/ca": {
      "post": {
        "description": "For CA auto enrollment, an identity is not created beforehand.\nInstead one will be created during enrollment. The client will present a client certificate that is signed by a\nCertificate Authority that has been added and verified (See POST /cas and POST /cas/{id}/verify).\n\nDuring this process no CSRs are requires as the client should already be in possession of a valid certificate.\n",
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an identity with a pre-exchanged certificate",
        "operationId": "enrollCa",
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/enroll/erott": {
      "post": {
        "description": "Enrolls an edge-router via a one-time-token to establish a certificate based identity.\n",
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an edge-router",
        "operationId": "enrollErOtt",
        "responses": {
          "200": {
            "description": "A response containing the edge routers signed certificates (server chain, server cert, CAs).",
            "schema": {
              "$ref": "#/definitions/enrollmentCertsEnvelope"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "name": "token",
          "in": "query",
          "required": true
        }
      ]
    },
    "/enroll/otf": {
      "post": {
        "description": "Enroll an identity On-The-Fly. This enrollment method expects a PEM encoded CSR to be provided for fulfillment. \nIt is up to the enrolling identity to manage the private key backing the CSR request.\n",
        "consumes": [
          "application/x-pem-file"
        ],
        "produces": [
          "application/json",
          "application/x-pem-file"
        ],
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an identity On-The-Fly",
        "operationId": "enrollOtf",
        "responses": {
          "200": {
            "description": "A PEM encoded certificate signed by the internal Ziti CA",
            "schema": {
              "type": "string"
            },
            "examples": {
              "application/x-x509-user-cert": "-----BEGIN CERTIFICATE-----\nMIICzDCCAlGgAwIBAgIRAPkVg1jVKqnNGFpSB3lPbaIwCgYIKoZIzj0EAwIwXjEL\nMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMRMwEQYDVQQKDApOZXRGb3VuZHJ5MS0w\nKwYDVQQDDCROZXRGb3VuZHJ5IFppdGkgRXh0ZXJuYWwgQVBJIFJvb3QgQ0EwHhcN\nMTgxMTE1MTI1NzE3WhcNMTkxMTI1MTI1NzE3WjBrMQswCQYDVQQGEwJVUzELMAkG\nA1UECAwCTkMxEjAQBgNVBAcMCUNoYXJsb3R0ZTETMBEGA1UECgwKTmV0Rm91bmRy\neTEPMA0GA1UECwwGQWR2RGV2MRUwEwYDVQQDDAxaaXRpQ2xpZW50MDEwdjAQBgcq\nhkjOPQIBBgUrgQQAIgNiAATTl2ft+/K9RvDgki9gSr9udNcV2bxD4LrWEdCdXNzF\niVUiEcEte9z/M0JRt8lgo17OjFvS+ecrAmLtIZNmQnH3+9YeafjeNPpvQsMKxlTN\nMnU7Hka11GHc6swQZSyHvlKjgcUwgcIwCQYDVR0TBAIwADARBglghkgBhvhCAQEE\nBAMCBaAwMwYJYIZIAYb4QgENBCYWJE9wZW5TU0wgR2VuZXJhdGVkIENsaWVudCBD\nZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUtx+Tej6lSYdjb8Jbc2QuvoEsI/swHwYDVR0j\nBBgwFoAUcdTlRrnP43ZbQ3PGAbZMPE26+H4wDgYDVR0PAQH/BAQDAgXgMB0GA1Ud\nJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDAKBggqhkjOPQQDAgNpADBmAjEAuXDS\nH7KKMr+la+Yuh8d8Q9cLtXzdS0j6a8e7iOyPJmdWq2WuzNdbCfAfLgKXuxhSAjEA\nsadZrXl1OBv11RGAKdYBIyRmfYUotCFAtCNKcfgBUxci0TDaKDA7r3jnjKT1d7Fs\n-----END CERTIFICATE-----\n"
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/enroll/ott": {
      "post": {
        "description": "Enroll an identity via a one-time-token which is supplied via a query string parameter. This enrollment method\nexpects a PEM encoded CSRs to be provided for fulfillment. It is up to the enrolling identity to manage the\nprivate key backing the CSR request.\n",
        "consumes": [
          "application/pkcs10"
        ],
        "produces": [
          "application/x-x509-user-cert"
        ],
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an identity via one-time-token",
        "operationId": "enrollOtt",
        "responses": {
          "200": {
            "description": "A PEM encoded certificate signed by the internal Ziti CA",
            "schema": {
              "type": "string"
            },
            "examples": {
              "application/x-x509-user-cert": "-----BEGIN CERTIFICATE-----\nMIICzDCCAlGgAwIBAgIRAPkVg1jVKqnNGFpSB3lPbaIwCgYIKoZIzj0EAwIwXjEL\nMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMRMwEQYDVQQKDApOZXRGb3VuZHJ5MS0w\nKwYDVQQDDCROZXRGb3VuZHJ5IFppdGkgRXh0ZXJuYWwgQVBJIFJvb3QgQ0EwHhcN\nMTgxMTE1MTI1NzE3WhcNMTkxMTI1MTI1NzE3WjBrMQswCQYDVQQGEwJVUzELMAkG\nA1UECAwCTkMxEjAQBgNVBAcMCUNoYXJsb3R0ZTETMBEGA1UECgwKTmV0Rm91bmRy\neTEPMA0GA1UECwwGQWR2RGV2MRUwEwYDVQQDDAxaaXRpQ2xpZW50MDEwdjAQBgcq\nhkjOPQIBBgUrgQQAIgNiAATTl2ft+/K9RvDgki9gSr9udNcV2bxD4LrWEdCdXNzF\niVUiEcEte9z/M0JRt8lgo17OjFvS+ecrAmLtIZNmQnH3+9YeafjeNPpvQsMKxlTN\nMnU7Hka11GHc6swQZSyHvlKjgcUwgcIwCQYDVR0TBAIwADARBglghkgBhvhCAQEE\nBAMCBaAwMwYJYIZIAYb4QgENBCYWJE9wZW5TU0wgR2VuZXJhdGVkIENsaWVudCBD\nZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUtx+Tej6lSYdjb8Jbc2QuvoEsI/swHwYDVR0j\nBBgwFoAUcdTlRrnP43ZbQ3PGAbZMPE26+H4wDgYDVR0PAQH/BAQDAgXgMB0GA1Ud\nJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDAKBggqhkjOPQQDAgNpADBmAjEAuXDS\nH7KKMr+la+Yuh8d8Q9cLtXzdS0j6a8e7iOyPJmdWq2WuzNdbCfAfLgKXuxhSAjEA\nsadZrXl1OBv11RGAKdYBIyRmfYUotCFAtCNKcfgBUxci0TDaKDA7r3jnjKT1d7Fs\n-----END CERTIFICATE-----\n"
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "name": "token",
          "in": "query",
          "required": true
        }
      ]
    },
    "/enroll/ottca": {
      "post": {
        "description": "Enroll an identity via a one-time-token that also requires a pre-exchanged client certificate to match a\nCertificate Authority that has been added and verified (See POST /cas and POST /cas{id}/verify). The client\nmust present a client certificate signed by CA associated with the enrollment. This enrollment is similar to\nCA auto enrollment except that is required the identity to be pre-created.\n\nAs the client certificate has been pre-exchanged there is no CSR input to this enrollment method.\n",
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an identity via one-time-token with a pre-exchanged client certificate",
        "operationId": "enrollOttCa",
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "name": "token",
          "in": "query",
          "required": true
        }
      ]
    },
    "/enroll/updb": {
      "post": {
        "description": "Enrolls an identity via a one-time-token to establish an initial username and password combination\n",
        "tags": [
          "Enroll"
        ],
        "summary": "Enroll an identity via one-time-token",
        "operationId": "ernollUpdb",
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "name": "token",
          "in": "query",
          "required": true
        }
      ]
    },
    "/enrollments": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of outstanding enrollments; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Enrollment"
        ],
        "summary": "List outstanding enrollments",
        "operationId": "listEnrollments",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of enrollments",
            "schema": {
              "$ref": "#/definitions/listEnrollmentsEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/enrollments/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single outstanding enrollment by id. Requires admin access.",
        "tags": [
          "Enrollment"
        ],
        "summary": "Retrieves an outstanding enrollment",
        "operationId": "detailEnrollment",
        "responses": {
          "200": {
            "description": "A singular enrollment resource",
            "schema": {
              "$ref": "#/definitions/detailEnrollmentEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an outstanding enrollment by id. Requires admin access.",
        "tags": [
          "Enrollment"
        ],
        "summary": "Delete an outstanding enrollment",
        "operationId": "deleteEnrollment",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/geo-regions": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of geo-regions; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Geo Region"
        ],
        "summary": "List available geo-regions",
        "operationId": "listGeoRegions",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of geo-regions",
            "schema": {
              "$ref": "#/definitions/listGeoRegionsEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/geo-regions/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single geo-region by id. Requires admin access.",
        "tags": [
          "Geo Region"
        ],
        "summary": "Retrieves a geo-region",
        "operationId": "detailGeoRegion",
        "responses": {
          "200": {
            "description": "A single geo-region",
            "schema": {
              "$ref": "#/definitions/detailGeoRegionEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/identities": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identity resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Identity"
        ],
        "summary": "List identities",
        "operationId": "listIdentities",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "roleFilter",
            "in": "query"
          },
          {
            "type": "string",
            "name": "roleSemantic",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of identities",
            "schema": {
              "$ref": "#/definitions/listIdentitiesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create an identity resource. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Create an identity resource",
        "operationId": "createIdentity",
        "parameters": [
          {
            "description": "An identity to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/identities/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single identity by id. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Retrieves a single identity",
        "operationId": "detailIdentity",
        "responses": {
          "200": {
            "description": "A signle identity",
            "schema": {
              "$ref": "#/definitions/detailIdentityEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on an identity by id. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Update all fields on an identity",
        "operationId": "updateIdentity",
        "parameters": [
          {
            "description": "An identity update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete an identity by id. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Delete an identity",
        "operationId": "deleteIdentity",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on an identity. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Update the supplied fields on an identity",
        "operationId": "patchIdentity",
        "parameters": [
          {
            "description": "An identity patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/identities/{id}/edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge router policies that apply to the specified identity.",
        "tags": [
          "Identity"
        ],
        "summary": "List the edge router policies that affect an idenitty",
        "operationId": "listIdentitysEdgeRouterPolicies",
        "responses": {
          "200": {
            "description": "A list of edge router policies",
            "schema": {
              "$ref": "#/definitions/listEdgeRouterPoliciesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/identities/{id}/edge-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge-routers that the given identity may use to access services. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Identity"
        ],
        "summary": "List accessible edge-routers",
        "operationId": "listIdentityEdgeRouters",
        "responses": {
          "200": {
            "description": "A list of edge routers",
            "schema": {
              "$ref": "#/definitions/listEdgeRoutersEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/identities/{id}/policy-advice/{serviceId}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Analyzes policies to see if the given identity should be able to dial or bind the given service. |\nWill check services policies to see if the identity can access the service. Will check edge router policies |\nto check if the identity and service have access to common edge routers so that a connnection can be made. |\nWill also check if at least one edge router is on-line. Requires admin access.\n",
        "tags": [
          "Identity"
        ],
        "summary": "Analyze policies relating the given identity and service",
        "operationId": "getIdentityPolicyAdvice",
        "responses": {
          "200": {
            "description": "Returns the document that represents the policy advice",
            "schema": {
              "$ref": "#/definitions/getIdentityPolicyAdviceEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The id of a service",
          "name": "serviceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/identities/{id}/posture-data": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Returns a nested map data represeting the posture data of the identity.\nThis data should be considered volatile.\n",
        "tags": [
          "Identity"
        ],
        "summary": "Retrieve the curent posture data for a specific identity.",
        "operationId": "getIdentityPostureData",
        "responses": {
          "200": {
            "description": "Returns the document that represents posture data",
            "schema": {
              "$ref": "#/definitions/getIdentityPostureDataEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/identities/{id}/service-configs": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service configs associated to a specific identity",
        "tags": [
          "Identity"
        ],
        "summary": "List the service configs associated a specific identity",
        "operationId": "listIdentitysServiceConfigs",
        "responses": {
          "200": {
            "description": "A list of service configs",
            "schema": {
              "$ref": "#/definitions/listServiceConfigsEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Associate service configs to a specific identity",
        "tags": [
          "Identity"
        ],
        "summary": "Associate service configs for a specific identity",
        "operationId": "associateIdentitysServiceConfigs",
        "parameters": [
          {
            "description": "An identity patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceConfigsAssignList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Remove service configs from a specific identity",
        "tags": [
          "Identity"
        ],
        "summary": "Remove associated service configs from a specific identity",
        "operationId": "disassociateIdentitysServiceConfigs",
        "parameters": [
          {
            "description": "An array of service and config id pairs to remove",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/serviceConfigsAssignList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/identities/{id}/service-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service policies that apply to the specified identity.",
        "tags": [
          "Identity"
        ],
        "summary": "List the service policies that affect an identity",
        "operationId": "listIdentityServicePolicies",
        "responses": {
          "200": {
            "description": "A list of service policies",
            "schema": {
              "$ref": "#/definitions/listServicePoliciesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/identities/{id}/services": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of services that the given identity has access to. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Identity"
        ],
        "summary": "List accessible services",
        "operationId": "listIdentityServices",
        "responses": {
          "200": {
            "description": "A list of edge routers",
            "schema": {
              "$ref": "#/definitions/listEdgeRoutersEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/identity-role-attributes": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of role attributes in use by identities; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Role Attributes"
        ],
        "summary": "List role attributes in use by identities",
        "operationId": "listIdentityRoleAttributes",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of role attributes",
            "schema": {
              "$ref": "#/definitions/listRoleAttributesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/identity-types": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identity types; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Identity"
        ],
        "summary": "List available identity types",
        "operationId": "listIdentityTypes",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of identity types",
            "schema": {
              "$ref": "#/definitions/listIdentityTypesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/identity-types/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single identity type by id. Requires admin access.",
        "tags": [
          "Identity"
        ],
        "summary": "Retrieves a identity type",
        "operationId": "detailIdentityType",
        "responses": {
          "200": {
            "description": "A single identity type",
            "schema": {
              "$ref": "#/definitions/detailIdentityTypeEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/posture-check-types": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of posture check types\n",
        "produces": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "Posture Checks"
        ],
        "summary": "List a subset of posture check types",
        "operationId": "listPostureCheckTypes",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of posture check types",
            "schema": {
              "$ref": "#/definitions/listPostureCheckTypesEnvelope"
            }
          }
        }
      }
    },
    "/posture-check-types/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single posture check type by id",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Retrieves a single posture check type",
        "operationId": "detailPostureCheckType",
        "responses": {
          "200": {
            "description": "Retrieves a singular posture check type by id",
            "schema": {
              "$ref": "#/definitions/detailPostureCheckTypeEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/posture-checks": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of posture checks\n",
        "produces": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "Posture Checks"
        ],
        "summary": "List a subset of posture checks",
        "operationId": "listPostureChecks",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "roleFilter",
            "in": "query"
          },
          {
            "type": "string",
            "name": "roleSemantic",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of posture checks",
            "schema": {
              "$ref": "#/definitions/listPostureCheckEnvelope"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Creates a Posture Checks",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Creates a Posture Checks",
        "operationId": "createPostureCheck",
        "parameters": [
          {
            "description": "A Posture Checks to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostureCheckCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/posture-checks/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single Posture Checks by id",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Retrieves a single Posture Checks",
        "operationId": "detailPostureCheck",
        "responses": {
          "200": {
            "description": "Retrieves a singular posture check by id",
            "schema": {
              "$ref": "#/definitions/detailPostureCheckEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a Posture Checks by id",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Update all fields on a Posture Checks",
        "operationId": "updatePostureCheck",
        "parameters": [
          {
            "description": "A Posture Checks update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostureCheckUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Deletes and Posture Checks by id",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Deletes an Posture Checks",
        "operationId": "deletePostureCheck",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "403": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update only the supplied fields on a Posture Checks by id",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Update the supplied fields on a Posture Checks",
        "operationId": "patchPostureCheck",
        "parameters": [
          {
            "description": "A Posture Checks patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostureCheckPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/posture-response": {
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Submits posture responses",
        "tags": [
          "Posture Checks"
        ],
        "summary": "Submit a posture response to a posture query",
        "operationId": "createPostureResponse",
        "parameters": [
          {
            "description": "A Posture Response",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostureResponseCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Base empty response",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/protocols": {
      "get": {
        "security": [],
        "tags": [
          "Informational"
        ],
        "summary": "Return a list of the listening Edge protocols",
        "operationId": "listProtocols",
        "responses": {
          "200": {
            "description": "A list of supported Edge protocols",
            "schema": {
              "$ref": "#/definitions/listProtocolsEnvelope"
            }
          }
        }
      }
    },
    "/service-edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service edge router policy resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "List service edge router policies",
        "operationId": "listServiceEdgeRouterPolicies",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of service edge router policies",
            "schema": {
              "$ref": "#/definitions/listServiceEdgeRouterPoliciesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a service edge router policy resource. Requires admin access.",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "Create a service edge router policy resource",
        "operationId": "createServiceEdgeRouterPolicy",
        "parameters": [
          {
            "description": "A service edge router policy to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceEdgeRouterPolicyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/service-edge-router-policies/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single service edge policy by id. Requires admin access.",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "Retrieves a single service edge policy",
        "operationId": "detailServiceEdgeRouterPolicy",
        "responses": {
          "200": {
            "description": "A single service edge router policy",
            "schema": {
              "$ref": "#/definitions/detailServiceEdgePolicyEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a service edge policy by id. Requires admin access.",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "Update all fields on a service edge policy",
        "operationId": "updateServiceEdgeRouterPolicy",
        "parameters": [
          {
            "description": "A service edge router policy update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceEdgeRouterPolicyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a service edge policy by id. Requires admin access.",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "Delete a service edge policy",
        "operationId": "deleteServiceEdgeRouterPolicy",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a service edge policy. Requires admin access.",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "Update the supplied fields on a service edge policy",
        "operationId": "patchServiceEdgeRouterPolicy",
        "parameters": [
          {
            "description": "A service edge router policy patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceEdgeRouterPolicyPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service-edge-router-policies/{id}/edge-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "List the edge routers that a service edge router policy applies to",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "List the edge routers that a service edge router policy applies to",
        "operationId": "listServiceEdgeRouterPolicyEdgeRouters",
        "responses": {
          "200": {
            "description": "A list of edge routers",
            "schema": {
              "$ref": "#/definitions/listEdgeRoutersEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service-edge-router-policies/{id}/services": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "List the services that a service edge router policy applies to",
        "tags": [
          "Service Edge Router Policy"
        ],
        "summary": "List the services that a service edge router policy applies to",
        "operationId": "listServiceEdgeRouterPolicyServices",
        "responses": {
          "200": {
            "description": "A list of services",
            "schema": {
              "$ref": "#/definitions/listServicesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service policy resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service Policy"
        ],
        "summary": "List service policies",
        "operationId": "listServicePolicies",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of service policies",
            "schema": {
              "$ref": "#/definitions/listServicePoliciesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a service policy resource. Requires admin access.",
        "tags": [
          "Service Policy"
        ],
        "summary": "Create a service policy resource",
        "operationId": "createServicePolicy",
        "parameters": [
          {
            "description": "A service policy to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicePolicyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/service-policies/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single service policy by id. Requires admin access.",
        "tags": [
          "Service Policy"
        ],
        "summary": "Retrieves a single service policy",
        "operationId": "detailServicePolicy",
        "responses": {
          "200": {
            "description": "A single service policy",
            "schema": {
              "$ref": "#/definitions/detailServicePolicyEnvelop"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a service policy by id. Requires admin access.",
        "tags": [
          "Service Policy"
        ],
        "summary": "Update all fields on a service policy",
        "operationId": "updateServicePolicy",
        "parameters": [
          {
            "description": "A service policy update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicePolicyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a service policy by id. Requires admin access.",
        "tags": [
          "Service Policy"
        ],
        "summary": "Delete a service policy",
        "operationId": "deleteServicePolicy",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a service policy. Requires admin access.",
        "tags": [
          "Service Policy"
        ],
        "summary": "Update the supplied fields on a service policy",
        "operationId": "patchServicePolicy",
        "parameters": [
          {
            "description": "A service policy patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicePolicyPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service-policies/{id}/identities": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identity resources that are affected by a service policy; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service Policy"
        ],
        "summary": "List identities a service policy affects",
        "operationId": "listServicePolicyIdentities",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of identities",
            "schema": {
              "$ref": "#/definitions/listIdentitiesEnvelope"
            }
          },
          "400": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service-policies/{id}/posture-checks": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of posture check resources that are affected by a service policy; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service Policy"
        ],
        "summary": "List posture check a service policy includes",
        "operationId": "listServicePolicyPostureChecks",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of posture checks",
            "schema": {
              "$ref": "#/definitions/listPostureCheckEnvelope"
            }
          },
          "400": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service-policies/{id}/services": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service resources that are affected by a service policy; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service Policy"
        ],
        "summary": "List services a service policy affects",
        "operationId": "listServicePolicyServices",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of services",
            "schema": {
              "$ref": "#/definitions/listServicesEnvelope"
            }
          },
          "400": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service-role-attributes": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of role attributes in use by services; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Role Attributes"
        ],
        "summary": "List role attributes in use by services",
        "operationId": "listServiceRoleAttributes",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of role attributes",
            "schema": {
              "$ref": "#/definitions/listRoleAttributesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of config resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List services",
        "operationId": "listServices",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "roleFilter",
            "in": "query"
          },
          {
            "type": "string",
            "name": "roleSemantic",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of services",
            "schema": {
              "$ref": "#/definitions/listServicesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a services resource. Requires admin access.",
        "tags": [
          "Service"
        ],
        "summary": "Create a services resource",
        "operationId": "createService",
        "parameters": [
          {
            "description": "A service to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/services/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single service by id. Requires admin access.",
        "tags": [
          "Service"
        ],
        "summary": "Retrieves a single service",
        "operationId": "detailService",
        "responses": {
          "200": {
            "description": "A single service",
            "schema": {
              "$ref": "#/definitions/detailServiceEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a service by id. Requires admin access.",
        "tags": [
          "Service"
        ],
        "summary": "Update all fields on a service",
        "operationId": "updateService",
        "parameters": [
          {
            "description": "A service update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a service by id. Requires admin access.",
        "tags": [
          "Service"
        ],
        "summary": "Delete a service",
        "operationId": "deleteService",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a service. Requires admin access.",
        "tags": [
          "Service"
        ],
        "summary": "Update the supplied fields on a service",
        "operationId": "patchService",
        "parameters": [
          {
            "description": "A service patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/services/{id}/configs": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of config resources associated to a specific service; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List configs associated to a specific service",
        "operationId": "listServiceConfig",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of configs",
            "schema": {
              "$ref": "#/definitions/listConfigsEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/services/{id}/edge-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of edge-routers that may be used to access the given service. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List accessible edge-routers",
        "operationId": "listServiceEdgeRouters",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of edge routers",
            "schema": {
              "$ref": "#/definitions/listEdgeRoutersEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/services/{id}/identities": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of identities that have access to this service. Supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List identities with access",
        "operationId": "listServiceIdentities",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of identities",
            "schema": {
              "$ref": "#/definitions/listIdentitiesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/services/{id}/service-edge-router-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service edge router policy resources that affect a specific service; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List service edge router policies that affect a specific service",
        "operationId": "listServiceServiceEdgeRouterPolicies",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of service edge router policies",
            "schema": {
              "$ref": "#/definitions/listServiceEdgeRouterPoliciesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/services/{id}/service-policies": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of service policy resources that affect specific service; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Service"
        ],
        "summary": "List service policies that affect a specific service",
        "operationId": "listServiceServicePolicies",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of service policies",
            "schema": {
              "$ref": "#/definitions/listServicePoliciesEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/services/{id}/terminators": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of terminator resources that are assigned specific service; supports filtering, sorting, and pagination.\n",
        "tags": [
          "Service"
        ],
        "summary": "List of terminators assigned to a service",
        "operationId": "listServiceTerminators",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of terminators",
            "schema": {
              "$ref": "#/definitions/listTerminatorsEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/sessions": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of active sessions resources; supports filtering, sorting, and pagination. Requires admin access.\n\nSessions are tied to an API session and are moved when an API session times out or logs out. Active sessions\n(i.e. Ziti SDK connected to an edge router) will keep the session and API session marked as active.\n",
        "tags": [
          "Session"
        ],
        "summary": "List sessions",
        "operationId": "listSessions",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions",
            "schema": {
              "$ref": "#/definitions/listSessionsEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a session resource. Requires admin access.",
        "tags": [
          "Session"
        ],
        "summary": "Create a session resource",
        "operationId": "createSession",
        "parameters": [
          {
            "description": "A session to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sessionCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location.",
            "schema": {
              "$ref": "#/definitions/sessionCreateEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single session by id. Requires admin access.",
        "tags": [
          "Session"
        ],
        "summary": "Retrieves a single session",
        "operationId": "detailSession",
        "responses": {
          "200": {
            "description": "A single session",
            "schema": {
              "$ref": "#/definitions/detailSessionEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a session by id. Requires admin access.",
        "tags": [
          "Session"
        ],
        "summary": "Delete a session",
        "operationId": "deleteSession",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/specs": {
      "get": {
        "security": [],
        "description": "Returns a list of spec files embedded within the controller for consumption/documentation/code geneartion",
        "tags": [
          "Informational"
        ],
        "summary": "Returns a list of API specs",
        "operationId": "listSpecs",
        "responses": {
          "200": {
            "description": "A list of specifications",
            "schema": {
              "$ref": "#/definitions/listSpecsEnvelope"
            }
          }
        }
      }
    },
    "/specs/{id}": {
      "get": {
        "security": [],
        "description": "Returns single spec resource embedded within the controller for consumption/documentation/code geneartion",
        "tags": [
          "Informational"
        ],
        "summary": "Return a single spec resource",
        "operationId": "detailSpec",
        "responses": {
          "200": {
            "description": "A single specification",
            "schema": {
              "$ref": "#/definitions/detailSpecEnvelope"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/specs/{id}/spec": {
      "get": {
        "security": [],
        "description": "Return the body of the specification (i.e. Swagger, OpenAPI 2.0, 3.0, etc).",
        "produces": [
          "application/json",
          "text/yaml"
        ],
        "tags": [
          "Informational"
        ],
        "summary": "Returns the spec's file",
        "operationId": "detailSpecBody",
        "responses": {
          "200": {
            "description": "Returns the document that represents the specification",
            "schema": {
              "$ref": "#/definitions/detailSpecBodyEnvelope"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/summary": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "This endpoint is usefull for UIs that wish to display UI elements with counts.",
        "tags": [
          "Informational"
        ],
        "summary": "Returns a list of accessible resource counts",
        "operationId": "listSummary",
        "responses": {
          "200": {
            "description": "Entity counts scopped to the current identitie's access",
            "schema": {
              "$ref": "#/definitions/listSummaryCountsEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/terminators": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of terminator resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Terminator"
        ],
        "summary": "List terminators",
        "operationId": "listTerminators",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of terminators",
            "schema": {
              "$ref": "#/definitions/listTerminatorsEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a terminator resource. Requires admin access.",
        "tags": [
          "Terminator"
        ],
        "summary": "Create a terminator resource",
        "operationId": "createTerminator",
        "parameters": [
          {
            "description": "A terminator to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/terminatorCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/terminators/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single terminator by id. Requires admin access.",
        "tags": [
          "Terminator"
        ],
        "summary": "Retrieves a single terminator",
        "operationId": "detailTerminator",
        "responses": {
          "200": {
            "description": "A single terminator",
            "schema": {
              "$ref": "#/definitions/detailTerminatorEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a terminator by id. Requires admin access.",
        "tags": [
          "Terminator"
        ],
        "summary": "Update all fields on a terminator",
        "operationId": "updateTerminator",
        "parameters": [
          {
            "description": "A terminator update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/terminatorUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a terminator by id. Requires admin access.",
        "tags": [
          "Terminator"
        ],
        "summary": "Delete a terminator",
        "operationId": "deleteTerminator",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a terminator. Requires admin access.",
        "tags": [
          "Terminator"
        ],
        "summary": "Update the supplied fields on a terminator",
        "operationId": "patchTerminator",
        "parameters": [
          {
            "description": "A terminator patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/terminatorPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/transit-routers": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a list of transit router resources; supports filtering, sorting, and pagination. Requires admin access.\n",
        "tags": [
          "Transit Router"
        ],
        "summary": "List transit routers",
        "operationId": "listTransitRouters",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of specifications",
            "schema": {
              "$ref": "#/definitions/listTransitRoutersEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Create a transit router resource. Requires admin access.",
        "tags": [
          "Transit Router"
        ],
        "summary": "Create a transit router resource",
        "operationId": "createTransitRouter",
        "parameters": [
          {
            "description": "A transit router to create",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transitRouterCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The create request was successful and the resource has been added at the following location",
            "schema": {
              "$ref": "#/definitions/createEnvelope"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/transit-routers/{id}": {
      "get": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Retrieves a single transit router by id. Requires admin access.",
        "tags": [
          "Transit Router"
        ],
        "summary": "Retrieves a single transit router",
        "operationId": "detailTransitRouter",
        "responses": {
          "200": {
            "description": "A single transit router",
            "schema": {
              "$ref": "#/definitions/detailTransitRouterEnvelope"
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update all fields on a transit router by id. Requires admin access.",
        "tags": [
          "Transit Router"
        ],
        "summary": "Update all fields on a transit router",
        "operationId": "updateTransitRouter",
        "parameters": [
          {
            "description": "A transit router update object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transitRouterUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Delete a transit router by id. Requires admin access.",
        "tags": [
          "Transit Router"
        ],
        "summary": "Delete a transit router",
        "operationId": "deleteTransitRouter",
        "responses": {
          "200": {
            "description": "The delete request was successful and the resource has been removed",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "409": {
            "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
                  "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
                  "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ztSession": []
          }
        ],
        "description": "Update the supplied fields on a transit router. Requires admin access.",
        "tags": [
          "Transit Router"
        ],
        "summary": "Update the supplied fields on a transit router",
        "operationId": "patchTransitRouter",
        "parameters": [
          {
            "description": "A transit router patch object",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transitRouterPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch request was successful and the resource has been altered",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The currently supplied session does not have the correct access rights to request this resource",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "UNAUTHORIZED",
                  "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
                  "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {
                      "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
                    }
                  },
                  "cause": null,
                  "causeMessage": "",
                  "code": "NOT_FOUND",
                  "message": "The resource requested was not found or is no longer available",
                  "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
                },
                "meta": {
                  "apiEnrolmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The id of the requested resource",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/version": {
      "get": {
        "security": [],
        "tags": [
          "Informational"
        ],
        "summary": "Returns version information",
        "operationId": "listVersion",
        "responses": {
          "200": {
            "description": "Version information for the controller",
            "schema": {
              "$ref": "#/definitions/listVersionEnvelope"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CurrentApiSessionServiceUpdateList": {
      "type": "object",
      "required": [
        "lastChangeAt"
      ],
      "properties": {
        "lastChangeAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "IdentityAuthenticatorsCert": {
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string"
        }
      }
    },
    "IdentityAuthenticatorsUpdb": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        }
      }
    },
    "IdentityCreateEnrollment": {
      "type": "object",
      "properties": {
        "ott": {
          "type": "boolean"
        },
        "ottca": {
          "type": "string"
        },
        "updb": {
          "type": "string"
        }
      }
    },
    "IdentityEnrollmentsOtt": {
      "type": "object",
      "properties": {
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "jwt": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "IdentityEnrollmentsOttca": {
      "type": "object",
      "properties": {
        "ca": {
          "$ref": "#/definitions/entityRef"
        },
        "caId": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "jwt": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "IdentityEnrollmentsUpdb": {
      "type": "object",
      "properties": {
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "jwt": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "PostureCheckCreate": {
      "type": "object",
      "required": [
        "name",
        "typeId"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "typeId": {
          "$ref": "#/definitions/postureCheckType"
        }
      },
      "discriminator": "typeId"
    },
    "PostureCheckDetail": {
      "type": "object",
      "required": [
        "name",
        "typeId",
        "version",
        "roleAttributes",
        "id",
        "createdAt",
        "updatedAt",
        "_links",
        "tags"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/links"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "typeId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "integer"
        }
      },
      "discriminator": "typeId"
    },
    "PostureCheckDomainCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckCreate"
        },
        {
          "type": "object",
          "required": [
            "domains"
          ],
          "properties": {
            "domains": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "DOMAIN"
    },
    "PostureCheckDomainDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckDetail"
        },
        {
          "type": "object",
          "required": [
            "domains"
          ],
          "properties": {
            "domains": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "DOMAIN"
    },
    "PostureCheckDomainPatch": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckPatch"
        },
        {
          "type": "object",
          "properties": {
            "domains": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "DOMAIN"
    },
    "PostureCheckDomainUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckUpdate"
        },
        {
          "type": "object",
          "required": [
            "domains"
          ],
          "properties": {
            "domains": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "DOMAIN"
    },
    "PostureCheckList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PostureCheckDetail"
      }
    },
    "PostureCheckMacAddressCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckCreate"
        },
        {
          "type": "object",
          "required": [
            "macAddresses"
          ],
          "properties": {
            "macAddresses": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "MAC"
    },
    "PostureCheckMacAddressDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckDetail"
        },
        {
          "type": "object",
          "required": [
            "macAddresses"
          ],
          "properties": {
            "macAddresses": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "MAC"
    },
    "PostureCheckMacAddressPatch": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckPatch"
        },
        {
          "type": "object",
          "properties": {
            "macAddresses": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "MAC"
    },
    "PostureCheckMacAddressUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckUpdate"
        },
        {
          "type": "object",
          "required": [
            "macAddresses"
          ],
          "properties": {
            "macAddresses": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "MAC"
    },
    "PostureCheckOperatingSystemCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckCreate"
        },
        {
          "type": "object",
          "required": [
            "operatingSystems"
          ],
          "properties": {
            "operatingSystems": {
              "$ref": "#/definitions/operatingSystemArray"
            }
          }
        }
      ],
      "x-class": "OS"
    },
    "PostureCheckOperatingSystemDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckDetail"
        },
        {
          "type": "object",
          "required": [
            "operatingSystems"
          ],
          "properties": {
            "operatingSystems": {
              "$ref": "#/definitions/operatingSystemArray"
            }
          }
        }
      ],
      "x-class": "OS"
    },
    "PostureCheckOperatingSystemPatch": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckPatch"
        },
        {
          "type": "object",
          "properties": {
            "operatingSystems": {
              "$ref": "#/definitions/operatingSystemArray"
            }
          }
        }
      ],
      "x-class": "OS"
    },
    "PostureCheckOperatingSystemUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckUpdate"
        },
        {
          "type": "object",
          "required": [
            "operatingSystems"
          ],
          "properties": {
            "operatingSystems": {
              "$ref": "#/definitions/operatingSystemArray"
            }
          }
        }
      ],
      "x-class": "OS"
    },
    "PostureCheckPatch": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      },
      "discriminator": "typeId"
    },
    "PostureCheckProcessCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckCreate"
        },
        {
          "type": "object",
          "required": [
            "process"
          ],
          "properties": {
            "process": {
              "$ref": "#/definitions/process"
            }
          }
        }
      ],
      "x-class": "PROCESS"
    },
    "PostureCheckProcessDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckDetail"
        },
        {
          "type": "object",
          "required": [
            "process"
          ],
          "properties": {
            "process": {
              "$ref": "#/definitions/process"
            }
          }
        }
      ],
      "x-class": "PROCESS"
    },
    "PostureCheckProcessPatch": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckPatch"
        },
        {
          "type": "object",
          "properties": {
            "process": {
              "$ref": "#/definitions/process"
            }
          }
        }
      ],
      "x-class": "PROCESS"
    },
    "PostureCheckProcessUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureCheckUpdate"
        },
        {
          "type": "object",
          "required": [
            "process"
          ],
          "properties": {
            "process": {
              "$ref": "#/definitions/process"
            }
          }
        }
      ],
      "x-class": "PROCESS"
    },
    "PostureCheckTypeDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "operatingSystems",
            "version"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "operatingSystems": {
              "$ref": "#/definitions/operatingSystemArray"
            },
            "version": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PostureCheckTypeList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PostureCheckTypeDetail"
      }
    },
    "PostureCheckUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "typeId": {
          "$ref": "#/definitions/postureCheckType"
        }
      },
      "discriminator": "typeId"
    },
    "PostureResponseCreate": {
      "type": "object",
      "required": [
        "id",
        "typeId"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "typeId": {
          "$ref": "#/definitions/postureCheckType"
        }
      },
      "discriminator": "typeId"
    },
    "PostureResponseDomainCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureResponseCreate"
        },
        {
          "type": "object",
          "required": [
            "domain"
          ],
          "properties": {
            "domain": {
              "type": "string"
            }
          }
        }
      ],
      "x-class": "DOMAIN"
    },
    "PostureResponseMacAddressCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureResponseCreate"
        },
        {
          "type": "object",
          "required": [
            "macAddresses"
          ],
          "properties": {
            "macAddresses": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "MAC"
    },
    "PostureResponseOperatingSystemCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureResponseCreate"
        },
        {
          "type": "object",
          "required": [
            "type",
            "version"
          ],
          "properties": {
            "build": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        }
      ],
      "x-class": "OS"
    },
    "PostureResponseProcessCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/PostureResponseCreate"
        },
        {
          "type": "object",
          "required": [
            "process"
          ],
          "properties": {
            "hash": {
              "type": "string"
            },
            "isRunning": {
              "type": "boolean"
            },
            "signerFingerprints": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-class": "PROCESS"
    },
    "apiError": {
      "type": "object",
      "properties": {
        "args": {
          "$ref": "#/definitions/apiErrorArgs"
        },
        "cause": {
          "$ref": "#/definitions/apiErrorCause"
        },
        "causeMessage": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        }
      }
    },
    "apiErrorArgs": {
      "type": "object",
      "properties": {
        "urlVars": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "apiErrorCause": {
      "allOf": [
        {
          "$ref": "#/definitions/apiFieldError"
        },
        {
          "$ref": "#/definitions/apiError"
        }
      ]
    },
    "apiErrorEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "error"
      ],
      "properties": {
        "error": {
          "$ref": "#/definitions/apiError"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "apiFieldError": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "apiSessionDetail": {
      "description": "An API Session object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "token",
            "identity",
            "identityId",
            "configTypes",
            "ipAddress"
          ],
          "properties": {
            "configTypes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "identity": {
              "$ref": "#/definitions/entityRef"
            },
            "identityId": {
              "type": "string"
            },
            "ipAddress": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        }
      ]
    },
    "apiSessionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/apiSessionDetail"
      }
    },
    "apiVersion": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "attributes": {
      "description": "A set of strings used to loosly couple this resource to policies",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-omitempty": false
    },
    "authenticate": {
      "description": "A generic authenticate object meant for use with the /authenticate path. Required fields depend on authentication method.",
      "type": "object",
      "properties": {
        "configTypes": {
          "$ref": "#/definitions/configTypes"
        },
        "envInfo": {
          "$ref": "#/definitions/envInfo"
        },
        "password": {
          "$ref": "#/definitions/password"
        },
        "sdkInfo": {
          "$ref": "#/definitions/sdkInfo"
        },
        "username": {
          "$ref": "#/definitions/username"
        }
      }
    },
    "authenticatorCreate": {
      "description": "Creates an authenticator for a specific identity which can be used for API authentication",
      "type": "object",
      "required": [
        "username",
        "password",
        "method",
        "identityId"
      ],
      "properties": {
        "identityId": {
          "description": "The id of an existing identity that will be assigned this authenticator",
          "type": "string"
        },
        "method": {
          "description": "The type of authenticator to create; which will dictate which properties on this object are required.",
          "type": "string"
        },
        "password": {
          "description": "The password the identity will login with, Used only for method='updb'",
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "username": {
          "description": "The username that the identity will login with. Used only for method='updb'",
          "type": "string"
        }
      }
    },
    "authenticatorDetail": {
      "description": "A singular authenticator resource",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "method",
            "identityId",
            "identity"
          ],
          "properties": {
            "certPem": {
              "type": "string"
            },
            "fingerprint": {
              "type": "string"
            },
            "identity": {
              "$ref": "#/definitions/entityRef"
            },
            "identityId": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          }
        }
      ]
    },
    "authenticatorList": {
      "description": "An array of authenticator resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/authenticatorDetail"
      }
    },
    "authenticatorPatch": {
      "description": "All of the fields on an authenticator that may be updated",
      "type": "object",
      "properties": {
        "password": {
          "$ref": "#/definitions/password-nullable"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "username": {
          "$ref": "#/definitions/username-nullable"
        }
      }
    },
    "authenticatorPatchWithCurrent": {
      "description": "All of the fields on an authenticator that may be updated",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/authenticatorPatch"
        },
        {
          "type": "object",
          "required": [
            "currentPassword"
          ],
          "properties": {
            "currentPassword": {
              "$ref": "#/definitions/password"
            }
          }
        }
      ]
    },
    "authenticatorUpdate": {
      "description": "All of the fields on an authenticator that will be updated",
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "$ref": "#/definitions/password"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "username": {
          "$ref": "#/definitions/username"
        }
      }
    },
    "authenticatorUpdateWithCurrent": {
      "description": "All of the fields on an authenticator that will be updated",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/authenticatorUpdate"
        },
        {
          "type": "object",
          "required": [
            "currentPassword"
          ],
          "properties": {
            "currentPassword": {
              "$ref": "#/definitions/password"
            }
          }
        }
      ]
    },
    "baseEntity": {
      "description": "Fields shared by all Edge API entities",
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "_links",
        "tags"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/links"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "caCreate": {
      "description": "A create Certificate Authority (CA) object",
      "type": "object",
      "required": [
        "name",
        "certPem",
        "isAutoCaEnrollmentEnabled",
        "isOttCaEnrollmentEnabled",
        "isAuthEnabled",
        "identityRoles"
      ],
      "properties": {
        "certPem": {
          "type": "string",
          "example": "-----BEGIN CERTIFICATE-----\\nMIICUjCCAdmgAwIBAgIJANooo7NB+dZZMAoGCCqGSM49BAMCMF4xCzAJBgNVBAYT\\nAlVTMQswCQYDVQQIDAJOQzETMBEGA1UECgwKTmV0Rm91bmRyeTEtMCsGA1UEAwwk\\nTmV0Rm91bmRyeSBaaXRpIEV4dGVybmFsIEFQSSBSb290IENBMB4XDTE4MTExNTEy\\nNTcwOVoXDTM4MTExMDEyNTcwOVowXjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5D\\nMRMwEQYDVQQKDApOZXRGb3VuZHJ5MS0wKwYDVQQDDCROZXRGb3VuZHJ5IFppdGkg\\nRXh0ZXJuYWwgQVBJIFJvb3QgQ0EwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARwq61Z\\nIaqbaw0PDt3frJZaHjkxfZhwYrykI1GlbRNd/jix03lVG9qvpN5Og9fQfFFcFmD/\\n3vCE9S6O0npm0mADQxcBcxbMRAH5dtBuCuiJW6qAAbPgiM32vqSxBiFt0KejYzBh\\nMB0GA1UdDgQWBBRx1OVGuc/jdltDc8YBtkw8Tbr4fjAfBgNVHSMEGDAWgBRx1OVG\\nuc/jdltDc8YBtkw8Tbr4fjAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB\\nhjAKBggqhkjOPQQDAgNnADBkAjBDRxNZUaIVpkQKnAgJukl3ysd3/i7Z6hDyIEms\\nkllz/+ZvmdBp9iedV5o5BvJUggACMCv+UBFlJH7pmsOCo/F45Kk178YsCC7gaMxE\\n1ZG1zveyMvsYsH04C9FndE6w2MLvlA==\\n-----END CERTIFICATE-----"
        },
        "identityNameFormat": {
          "type": "string"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "isAuthEnabled": {
          "type": "boolean",
          "example": true
        },
        "isAutoCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "isOttCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "name": {
          "type": "string",
          "example": "Test 3rd Party External CA"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "caDetail": {
      "description": "A Certificate Authority (CA) resource",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "fingerprint",
            "certPem",
            "isVerified",
            "isAutoCaEnrollmentEnabled",
            "isOttCaEnrollmentEnabled",
            "isAuthEnabled",
            "identityRoles",
            "identityNameFormat"
          ],
          "properties": {
            "certPem": {
              "type": "string"
            },
            "fingerprint": {
              "type": "string"
            },
            "identityNameFormat": {
              "type": "string"
            },
            "identityRoles": {
              "$ref": "#/definitions/roles"
            },
            "isAuthEnabled": {
              "type": "boolean",
              "example": true
            },
            "isAutoCaEnrollmentEnabled": {
              "type": "boolean",
              "example": true
            },
            "isOttCaEnrollmentEnabled": {
              "type": "boolean",
              "example": true
            },
            "isVerified": {
              "type": "boolean",
              "example": false
            },
            "name": {
              "type": "string"
            },
            "verificationToken": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "caList": {
      "description": "An array of Certificate Authority (CA) resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/caDetail"
      }
    },
    "caPatch": {
      "type": "object",
      "properties": {
        "identityNameFormat": {
          "type": "string"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "isAuthEnabled": {
          "type": "boolean",
          "example": true
        },
        "isAutoCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "isOttCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "name": {
          "type": "string",
          "example": "My CA"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "caUpdate": {
      "type": "object",
      "required": [
        "name",
        "isAutoCaEnrollmentEnabled",
        "isOttCaEnrollmentEnabled",
        "isAuthEnabled",
        "identityRoles"
      ],
      "properties": {
        "identityNameFormat": {
          "type": "string"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "isAuthEnabled": {
          "type": "boolean",
          "example": true
        },
        "isAutoCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "isOttCaEnrollmentEnabled": {
          "type": "boolean",
          "example": true
        },
        "name": {
          "type": "string",
          "example": "My CA"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "configCreate": {
      "description": "A config create object",
      "type": "object",
      "required": [
        "name",
        "configTypeId",
        "data"
      ],
      "properties": {
        "configTypeId": {
          "description": "The id of a config-type that the data section will match",
          "type": "string"
        },
        "data": {
          "description": "Data payload is defined by the schema of the config-type defined in the type parameter",
          "type": "object",
          "additionalProperties": true,
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "example": "default.ziti-tunneler-server.v1"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      },
      "example": {
        "configTypeId": "cea49285-6c07-42cf-9f52-09a9b115c783",
        "data": {
          "hostname": "example.com",
          "port": 80
        },
        "name": "test-config"
      }
    },
    "configDetail": {
      "description": "A config resource",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "configTypeId",
            "configType",
            "data"
          ],
          "properties": {
            "configType": {
              "$ref": "#/definitions/entityRef"
            },
            "configTypeId": {
              "type": "string"
            },
            "data": {
              "description": "The data section of a config is based on the schema of its type",
              "type": "object"
            },
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "configList": {
      "description": "An array of config resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/configDetail"
      }
    },
    "configPatch": {
      "description": "A config patch object",
      "type": "object",
      "properties": {
        "data": {
          "description": "Data payload is defined by the schema of the config-type defined in the type parameter",
          "type": "object",
          "additionalProperties": true
        },
        "name": {
          "type": "string",
          "example": "default.ziti-tunneler-server.v1"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      },
      "example": {
        "data": {
          "hostname": "example.com",
          "port": 80
        },
        "name": "example-config-name"
      }
    },
    "configTypeCreate": {
      "description": "A config-type create object",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "ziti-tunneler-server.v1"
        },
        "schema": {
          "description": "A JSON schema to enforce configuration against",
          "type": "object",
          "additionalProperties": true
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "configTypeDetail": {
      "description": "A config-type resource",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "schema"
          ],
          "properties": {
            "name": {
              "type": "string",
              "example": "ziti-tunneler-server.v1"
            },
            "schema": {
              "description": "A JSON schema to enforce configuration against",
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      ]
    },
    "configTypeList": {
      "description": "An array of config-type resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/configTypeDetail"
      }
    },
    "configTypePatch": {
      "description": "A config-type patch object",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ziti-tunneler-server.v1"
        },
        "schema": {
          "description": "A JSON schema to enforce configuration against",
          "type": "object",
          "additionalProperties": true
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "configTypeUpdate": {
      "description": "A config-type update object",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "ziti-tunneler-server.v1"
        },
        "schema": {
          "description": "A JSON schema to enforce configuration against",
          "type": "object",
          "additionalProperties": true
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "configTypes": {
      "description": "Specific configuration types that should be returned",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "configUpdate": {
      "description": "A config update object",
      "type": "object",
      "required": [
        "name",
        "data"
      ],
      "properties": {
        "data": {
          "description": "Data payload is defined by the schema of the config-type defined in the type parameter",
          "type": "object",
          "additionalProperties": true,
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "example": "default.ziti-tunneler-server.v1"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      },
      "example": {
        "data": {
          "hostname": "example.com",
          "port": 80
        },
        "name": "example-config-name"
      }
    },
    "createCurrentApiSessionCertificateEnvelope": {
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/currentApiSessionCertificateCreateResponse"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "createEnvelope": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/createLocation"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "createLocation": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/links"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "currentAPISessionDetailEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/currentApiSessionDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "currentApiSessionCertificateCreate": {
      "type": "object",
      "required": [
        "csr"
      ],
      "properties": {
        "csr": {
          "type": "string"
        }
      }
    },
    "currentApiSessionCertificateCreateResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/createLocation"
        },
        {
          "type": "object",
          "required": [
            "certificate"
          ],
          "properties": {
            "cas": {
              "type": "string"
            },
            "certificate": {
              "type": "string"
            }
          }
        }
      ]
    },
    "currentApiSessionCertificateDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "subject",
            "fingerprint",
            "validFrom",
            "validTo",
            "certificate"
          ],
          "properties": {
            "certificate": {
              "type": "string"
            },
            "fingerprint": {
              "type": "string"
            },
            "subject": {
              "type": "string"
            },
            "validFrom": {
              "type": "string",
              "format": "date-time"
            },
            "validTo": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "currentApiSessionCertificateList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/currentApiSessionCertificateDetail"
      }
    },
    "currentApiSessionDetail": {
      "description": "An API Session object for the current API session",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/apiSessionDetail"
        },
        {
          "type": "object",
          "required": [
            "expiresAt",
            "expirationSeconds"
          ],
          "properties": {
            "expirationSeconds": {
              "type": "integer"
            },
            "expiresAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "currentIdentityDetailEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/identityDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "dataIntegrityCheckDetail": {
      "type": "object",
      "required": [
        "description",
        "fixed"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "fixed": {
          "type": "boolean"
        }
      }
    },
    "dataIntegrityCheckDetailList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dataIntegrityCheckDetail"
      }
    },
    "dataIntegrityCheckDetails": {
      "type": "object",
      "required": [
        "inProgress",
        "fixingErrors",
        "tooManyErrors",
        "startTime",
        "endTime",
        "error",
        "results"
      ],
      "properties": {
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "type": "string"
        },
        "fixingErrors": {
          "type": "boolean"
        },
        "inProgress": {
          "type": "boolean"
        },
        "results": {
          "$ref": "#/definitions/dataIntegrityCheckDetailList"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "tooManyErrors": {
          "type": "boolean"
        }
      }
    },
    "dataIntegrityCheckResultEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/dataIntegrityCheckDetails"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailAPISessionEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/apiSessionDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailAuthenticatorEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/authenticatorDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailCaEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/caDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailConfigEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/configDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailConfigTypeEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/configTypeDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailCurrentApiSessionCertificateEnvelope": {
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/currentApiSessionCertificateDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailEdgeRouterPolicyEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/edgeRouterPolicyDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailEnrollmentEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/enrollmentDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailGeoRegionEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/geoRegionDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailIdentityEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/identityDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailIdentityTypeEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/identityTypeDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailPostureCheckEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/PostureCheckDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailPostureCheckTypeEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/PostureCheckTypeDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailServiceEdgePolicyEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceEdgeRouterPolicyDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailServiceEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailServicePolicyEnvelop": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/servicePolicyDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailSessionEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/sessionDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailSpecBodyEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/specBodyDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailSpecEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/specDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailTerminatorEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/terminatorDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailTransitRouterEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/transitRouterDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "detailedEdgeRouterEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/edgeRouterDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "dialBind": {
      "type": "string",
      "enum": [
        "Dial",
        "Bind"
      ]
    },
    "dialBindArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dialBind"
      }
    },
    "edgeRouterCreate": {
      "description": "An edge router create object",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "edgeRouterDetail": {
      "description": "A detail edge router resource",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "isVerified",
            "isOnline",
            "hostname",
            "supportedProtocols",
            "roleAttributes",
            "os",
            "version",
            "arch",
            "buildDate",
            "revision"
          ],
          "properties": {
            "enrollmentCreatedAt": {
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "enrollmentExpiresAt": {
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "enrollmentJwt": {
              "type": "string",
              "x-nullable": true
            },
            "enrollmentToken": {
              "type": "string",
              "x-nullable": true
            },
            "fingerprint": {
              "type": "string"
            },
            "hostname": {
              "type": "string"
            },
            "isOnline": {
              "type": "boolean"
            },
            "isVerified": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "roleAttributes": {
              "$ref": "#/definitions/attributes"
            },
            "supportedProtocols": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "versionInfo": {
              "$ref": "#/definitions/versionInfo"
            }
          }
        }
      ],
      "example": {
        "_links": {
          "edge-router-policies": {
            "href": "./edge-routers/b0766b8d-bd1a-4d28-8415-639b29d3c83d/edge-routers"
          },
          "self": {
            "href": "./edge-routers/b0766b8d-bd1a-4d28-8415-639b29d3c83d"
          }
        },
        "createdAt": "2020-03-16T17:13:31.5807454Z",
        "enrollmentCreatedAt": "2020-03-16T17:13:31.5777637Z",
        "enrollmentExpiresAt": "2020-03-16T17:18:31.5777637Z",
        "enrollmentJwt": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbSI6ImVyb3R0IiwiZXhwIjoxNTg0Mzc5MTExLCJpc3MiOiJodHRwczovL 2xvY2FsaG9zdDoxMjgwIiwianRpIjoiMzBhMWYwZWEtZDM5Yi00YWFlLWI4NTItMzA0Y2YxYzMwZDFmIiwic3ViIjoiYjA3NjZiOGQtYmQxYS00ZDI 4LTg0MTUtNjM5YjI5ZDNjODNkIn0.UsyQhCPORQ5tQnYWY7S88LNvV9iFS5Hy-P4aJaClZzEICobKgnQoyQblJcdMvk3cGKwyFqAnQtt0tDZkb8tHz Vqyv6bilHcAFuMRrdwXRqdXquabSN5geu2qBUnyzL7Mf2X85if8sbMida6snB4oLZsVRF3CRn4ODBJdeiVJ_Z4rgD-zW2IwtXPApT7ALyiiw2cN4EH 8pqQ7tpZKqztE0PGEbBQFPGKUFnm7oXyvSUo17EsFJUv5gUlBzfKKGolh5io4ptp22HZrqsqSnqDSOnYEZHonr5Yljuwiktrlh-JKiK6GGns5OAJMP dO9lgM4yHSpF2ILbqhWMV93Y3zMOg",
        "enrollmentToken": "30a1f0ea-d39b-4aae-b852-304cf1c30d1f",
        "fingerprint": null,
        "hostname": "",
        "id": "b0766b8d-bd1a-4d28-8415-639b29d3c83d",
        "isOnline": false,
        "isVerified": false,
        "name": "TestRouter-e33c837f-3222-4b40-bcd6-b3458fd5156e",
        "roleAttributes": [
          "eastCoast",
          "sales",
          "test"
        ],
        "supportedProtocols": {},
        "tags": {},
        "updatedAt": "2020-03-16T17:13:31.5807454Z"
      }
    },
    "edgeRouterList": {
      "description": "A list of edge router resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/edgeRouterDetail"
      }
    },
    "edgeRouterPatch": {
      "description": "An edge router patch object",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "edgeRouterPolicyCreate": {
      "required": [
        "name"
      ],
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "edgeRouterPolicyDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "semantic",
            "edgeRouterRoles",
            "edgeRouterRolesDisplay",
            "identityRoles",
            "identityRolesDisplay"
          ],
          "properties": {
            "edgeRouterRoles": {
              "$ref": "#/definitions/roles"
            },
            "edgeRouterRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "identityRoles": {
              "$ref": "#/definitions/roles"
            },
            "identityRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "name": {
              "type": "string"
            },
            "semantic": {
              "$ref": "#/definitions/semantic"
            }
          }
        }
      ]
    },
    "edgeRouterPolicyList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/edgeRouterPolicyDetail"
      }
    },
    "edgeRouterPolicyPatch": {
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "edgeRouterPolicyUpdate": {
      "required": [
        "name"
      ],
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "edgeRouterUpdate": {
      "description": "An edge router update object",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "empty": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "example": {}
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "enrollmentCerts": {
      "type": "object",
      "properties": {
        "ca": {
          "description": "A PEM encoded set of CA certificates to trust",
          "type": "string"
        },
        "cert": {
          "description": "A PEM encoded cert for the server",
          "type": "string"
        },
        "serverCert": {
          "description": "A PEM encoded set of certificates to use as the servers chain",
          "type": "string"
        }
      }
    },
    "enrollmentCertsEnvelope": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/enrollmentCerts"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "enrollmentDetail": {
      "description": "An enrollment object. Enrolments are tied to identities and portentially a CA. Depending on the\nmethod, different fields are utilized. For example ottca enrollments use the ` + "`" + `ca` + "`" + ` field and updb enrollments\nuse the username field, but not vice versa.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "token",
            "method",
            "expiresAt",
            "details"
          ],
          "properties": {
            "details": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "edgeRouter": {
              "$ref": "#/definitions/entityRef"
            },
            "edgeRouterId": {
              "type": "string"
            },
            "expiresAt": {
              "type": "string",
              "format": "date-time"
            },
            "identity": {
              "$ref": "#/definitions/entityRef"
            },
            "identityId": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "transitRouter": {
              "$ref": "#/definitions/entityRef"
            },
            "transitRouterId": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          }
        }
      ],
      "example": {
        "_links": {
          "self": {
            "href": "./enrollments/624fa53f-7629-4a7a-9e38-c1f4ce322c1d"
          }
        },
        "ca": null,
        "createdAt": "0001-01-01T00:00:00Z",
        "expiresAt": "2020-03-11T20:20:24.0055543Z",
        "id": "624fa53f-7629-4a7a-9e38-c1f4ce322c1d",
        "identity": {
          "_links": {
            "self": {
              "href": "./identities/f047ac96-dc3a-408a-a6f2-0ba487c08ef9"
            }
          },
          "id": "f047ac96-dc3a-408a-a6f2-0ba487c08ef9",
          "name": "updb--0f245140-7f2e-4326-badf-6aba55e52475",
          "urlName": "identities"
        },
        "method": "updb",
        "tags": null,
        "token": "1e727c8f-07e4-4a1d-a8b0-da0c7a01c6e1",
        "updatedAt": "0001-01-01T00:00:00Z",
        "username": "example-username"
      }
    },
    "enrollmentList": {
      "description": "An array of enrollment resources",
      "type": "array",
      "items": {
        "$ref": "#/definitions/enrollmentDetail"
      }
    },
    "entityRef": {
      "description": "A reference to another resource and links to interact with it",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/links"
        },
        "entity": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "envInfo": {
      "description": "Environment information an authenticating client may provide",
      "type": "object",
      "properties": {
        "arch": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "osRelease": {
          "type": "string"
        },
        "osVersion": {
          "type": "string"
        }
      }
    },
    "geoRegionDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "geoRegionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/geoRegionDetail"
      }
    },
    "getIdentityPolicyAdviceEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/policyAdvice"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "getIdentityPostureDataEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/postureData"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "identityAuthenticators": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "object",
          "properties": {
            "fingerprint": {
              "type": "string"
            }
          }
        },
        "updb": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string"
            }
          }
        }
      }
    },
    "identityCreate": {
      "description": "An identity to create",
      "type": "object",
      "required": [
        "name",
        "type",
        "isAdmin"
      ],
      "properties": {
        "defaultHostingCost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "defaultHostingPrecedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "enrollment": {
          "type": "object",
          "properties": {
            "ott": {
              "type": "boolean"
            },
            "ottca": {
              "type": "string"
            },
            "updb": {
              "type": "string"
            }
          }
        },
        "isAdmin": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/identityType"
        }
      }
    },
    "identityDetail": {
      "description": "Detail of a specific identity",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "type",
            "typeId",
            "isDefaultAdmin",
            "isAdmin",
            "authenticators",
            "enrollment",
            "envInfo",
            "sdkInfo",
            "roleAttributes",
            "hasEdgeRouterConnection",
            "hasApiSession"
          ],
          "properties": {
            "authenticators": {
              "$ref": "#/definitions/identityAuthenticators"
            },
            "defaultHostingCost": {
              "$ref": "#/definitions/terminatorCost"
            },
            "defaultHostingPrecedence": {
              "$ref": "#/definitions/terminatorPrecedence"
            },
            "enrollment": {
              "$ref": "#/definitions/identityEnrollments"
            },
            "envInfo": {
              "$ref": "#/definitions/envInfo"
            },
            "hasApiSession": {
              "type": "boolean"
            },
            "hasEdgeRouterConnection": {
              "type": "boolean"
            },
            "isAdmin": {
              "type": "boolean"
            },
            "isDefaultAdmin": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "roleAttributes": {
              "$ref": "#/definitions/attributes"
            },
            "sdkInfo": {
              "$ref": "#/definitions/sdkInfo"
            },
            "type": {
              "$ref": "#/definitions/entityRef"
            },
            "typeId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "identityEnrollments": {
      "type": "object",
      "properties": {
        "ott": {
          "type": "object",
          "properties": {
            "expiresAt": {
              "type": "string",
              "format": "date-time"
            },
            "jwt": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        },
        "ottca": {
          "type": "object",
          "properties": {
            "ca": {
              "$ref": "#/definitions/entityRef"
            },
            "caId": {
              "type": "string"
            },
            "expiresAt": {
              "type": "string",
              "format": "date-time"
            },
            "jwt": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        },
        "updb": {
          "type": "object",
          "properties": {
            "expiresAt": {
              "type": "string",
              "format": "date-time"
            },
            "jwt": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        }
      }
    },
    "identityList": {
      "description": "A list of identities",
      "type": "array",
      "items": {
        "$ref": "#/definitions/identityDetail"
      }
    },
    "identityPatch": {
      "type": "object",
      "properties": {
        "defaultHostingCost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "defaultHostingPrecedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/identityType"
        }
      }
    },
    "identityType": {
      "type": "string",
      "enum": [
        "User",
        "Device",
        "Service"
      ]
    },
    "identityTypeDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "identityTypeList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/identityDetail"
      }
    },
    "identityUpdate": {
      "type": "object",
      "required": [
        "type",
        "name",
        "isAdmin"
      ],
      "properties": {
        "defaultHostingCost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "defaultHostingPrecedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "$ref": "#/definitions/attributes"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/identityType"
        }
      }
    },
    "link": {
      "description": "A link to another resource",
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "format": "uri"
        },
        "method": {
          "type": "string"
        }
      }
    },
    "links": {
      "description": "A map of named links",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/link"
      },
      "x-omitempty": false
    },
    "listAPISessionsEnvelope": {
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/apiSessionList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listAuthenticatorsEnvelope": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/authenticatorList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listCasEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/caList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listConfigTypesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/configTypeList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listConfigsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/configList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listCurrentAPISessionCertificatesEnvelope": {
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/currentApiSessionCertificateList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listCurrentApiSessionServiceUpdatesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/CurrentApiSessionServiceUpdateList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listEdgeRouterPoliciesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/edgeRouterPolicyList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listEdgeRoutersEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/edgeRouterList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listEnrollmentsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/enrollmentList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listGeoRegionsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/geoRegionList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listIdentitiesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/identityList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listIdentityTypesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/identityTypeList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listPostureCheckEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/PostureCheckList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listPostureCheckTypesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/PostureCheckTypeList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listProtocols": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/protocol"
      }
    },
    "listProtocolsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/listProtocols"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listRoleAttributesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/roleAttributesList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listServiceConfigsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceConfigList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listServiceEdgeRouterPoliciesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceEdgeRouterPolicyList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listServicePoliciesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/servicePolicyList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listServicesEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listSessionsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/sessionList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listSpecsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/specList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listSummaryCounts": {
      "type": "object",
      "additionalProperties": {
        "type": "integer"
      }
    },
    "listSummaryCountsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/listSummaryCounts"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listTerminatorsEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/terminatorList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listTransitRoutersEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/transitRouterList"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "listVersionEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/version"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "meta": {
      "type": "object",
      "properties": {
        "apiEnrolmentVersion": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "filterableFields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "pagination": {
          "$ref": "#/definitions/pagination"
        }
      }
    },
    "namedRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "namedRoles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/namedRole"
      },
      "x-omitempty": false
    },
    "operatingSystem": {
      "type": "object",
      "required": [
        "type",
        "versions"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/osType"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "operatingSystemArray": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/operatingSystem"
      }
    },
    "osType": {
      "type": "string",
      "enum": [
        "Windows",
        "WindowsServer",
        "Android",
        "iOS",
        "Linux",
        "macOS"
      ]
    },
    "pagination": {
      "type": "object",
      "required": [
        "limit",
        "offset",
        "totalCount"
      ],
      "properties": {
        "limit": {
          "type": "number",
          "format": "int64"
        },
        "offset": {
          "type": "number",
          "format": "int64"
        },
        "totalCount": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "password": {
      "type": "string",
      "maxLength": 100,
      "minLength": 5
    },
    "password-nullable": {
      "type": "string",
      "maxLength": 100,
      "minLength": 5,
      "x-nullable": true
    },
    "policyAdvice": {
      "type": "object",
      "properties": {
        "commonRouters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/routerEntityRef"
          }
        },
        "identity": {
          "$ref": "#/definitions/entityRef"
        },
        "identityId": {
          "type": "string"
        },
        "identityRouterCount": {
          "type": "number",
          "format": "int32"
        },
        "isBindAllowed": {
          "type": "boolean"
        },
        "isDialAllowed": {
          "type": "boolean"
        },
        "service": {
          "$ref": "#/definitions/entityRef"
        },
        "serviceId": {
          "type": "string"
        },
        "serviceRouterCount": {
          "type": "number",
          "format": "int32"
        }
      }
    },
    "postureCheckType": {
      "type": "string",
      "enum": [
        "OS",
        "PROCESS",
        "DOMAIN",
        "MAC"
      ]
    },
    "postureData": {
      "type": "object",
      "additionalProperties": true
    },
    "postureQueries": {
      "type": "object",
      "required": [
        "policyId",
        "isPassing",
        "postureQueries"
      ],
      "properties": {
        "isPassing": {
          "type": "boolean"
        },
        "policyId": {
          "type": "string"
        },
        "postureQueries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/postureQuery"
          }
        }
      }
    },
    "postureQuery": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "queryType",
            "isPassing"
          ],
          "properties": {
            "isPassing": {
              "type": "boolean"
            },
            "process": {
              "$ref": "#/definitions/postureQueryProcess"
            },
            "queryType": {
              "$ref": "#/definitions/postureCheckType"
            }
          }
        }
      ]
    },
    "postureQueryProcess": {
      "type": "object",
      "properties": {
        "osType": {
          "$ref": "#/definitions/osType"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "process": {
      "type": "object",
      "required": [
        "osType",
        "path"
      ],
      "properties": {
        "hashes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "osType": {
          "$ref": "#/definitions/osType"
        },
        "path": {
          "type": "string"
        },
        "signerFingerprint": {
          "type": "string"
        }
      }
    },
    "protocol": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        }
      }
    },
    "roleAttributesList": {
      "description": "An array of role attributes",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "roles": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-omitempty": false
    },
    "routerEntityRef": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/entityRef"
        },
        {
          "type": "object",
          "required": [
            "isOnline"
          ],
          "properties": {
            "isOnline": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "sdkInfo": {
      "description": "SDK information an authenticating client may provide",
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "semantic": {
      "type": "string",
      "enum": [
        "AllOf",
        "AnyOf"
      ]
    },
    "serviceConfigAssign": {
      "type": "object",
      "required": [
        "serviceId",
        "configId"
      ],
      "properties": {
        "configId": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        }
      }
    },
    "serviceConfigDetail": {
      "type": "object",
      "required": [
        "serviceId",
        "service",
        "configId",
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/entityRef"
        },
        "configId": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/entityRef"
        },
        "serviceId": {
          "type": "string"
        }
      },
      "example": {
        "config": {
          "_links": {
            "self": {
              "href": "./identities/13347602-ba34-4ff7-8082-e533ba945744"
            }
          },
          "id": "13347602-ba34-4ff7-8082-e533ba945744",
          "name": "test-config-02fade09-fcc3-426c-854e-18539726bdc6",
          "urlName": "configs"
        },
        "service": {
          "_links": {
            "self": {
              "href": "./services/913a8c63-17a6-44d7-82b3-9f6eb997cf8e"
            }
          },
          "id": "913a8c63-17a6-44d7-82b3-9f6eb997cf8e",
          "name": "netcat4545-egress-r2",
          "urlName": "services"
        }
      }
    },
    "serviceConfigList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/serviceConfigDetail"
      }
    },
    "serviceConfigsAssignList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/serviceConfigAssign"
      }
    },
    "serviceCreate": {
      "type": "object",
      "required": [
        "name",
        "encryptionRequired"
      ],
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "encryptionRequired": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "terminatorStrategy": {
          "type": "string"
        }
      }
    },
    "serviceDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "terminatorStrategy",
            "roleAttributes",
            "permissions",
            "configs",
            "config",
            "encryptionRequired",
            "postureQueries"
          ],
          "properties": {
            "config": {
              "description": "map of config data for this service keyed by the config type name. Only configs of the types requested will be returned.",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "configs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "encryptionRequired": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "permissions": {
              "$ref": "#/definitions/dialBindArray"
            },
            "postureQueries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/postureQueries"
              }
            },
            "roleAttributes": {
              "$ref": "#/definitions/attributes"
            },
            "terminatorStrategy": {
              "type": "string"
            }
          }
        }
      ]
    },
    "serviceEdgeRouterPolicyCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "serviceEdgeRouterPolicyDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "semantic",
            "edgeRouterRoles",
            "edgeRouterRolesDisplay",
            "serviceRoles",
            "serviceRolesDisplay"
          ],
          "properties": {
            "edgeRouterRoles": {
              "$ref": "#/definitions/roles"
            },
            "edgeRouterRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "name": {
              "type": "string"
            },
            "semantic": {
              "$ref": "#/definitions/semantic"
            },
            "serviceRoles": {
              "$ref": "#/definitions/roles"
            },
            "serviceRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            }
          }
        }
      ]
    },
    "serviceEdgeRouterPolicyList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/serviceEdgeRouterPolicyDetail"
      }
    },
    "serviceEdgeRouterPolicyPatch": {
      "type": "object",
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "serviceEdgeRouterPolicyUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "edgeRouterRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "serviceList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/serviceDetail"
      }
    },
    "servicePatch": {
      "type": "object",
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "encryptionRequired": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "terminatorStrategy": {
          "type": "string"
        }
      }
    },
    "servicePolicyCreate": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "postureCheckRoles": {
          "$ref": "#/definitions/roles"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/dialBind"
        }
      }
    },
    "servicePolicyDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "type",
            "semantic",
            "serviceRoles",
            "serviceRolesDisplay",
            "identityRoles",
            "identityRolesDisplay",
            "postureCheckRoles",
            "postureCheckRolesDisplay"
          ],
          "properties": {
            "identityRoles": {
              "$ref": "#/definitions/roles"
            },
            "identityRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "name": {
              "type": "string"
            },
            "postureCheckRoles": {
              "$ref": "#/definitions/roles"
            },
            "postureCheckRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "semantic": {
              "$ref": "#/definitions/semantic"
            },
            "serviceRoles": {
              "$ref": "#/definitions/roles"
            },
            "serviceRolesDisplay": {
              "$ref": "#/definitions/namedRoles"
            },
            "type": {
              "$ref": "#/definitions/dialBind"
            }
          }
        }
      ]
    },
    "servicePolicyList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/servicePolicyDetail"
      }
    },
    "servicePolicyPatch": {
      "type": "object",
      "properties": {
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "postureCheckRoles": {
          "$ref": "#/definitions/roles"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/dialBind"
        }
      }
    },
    "servicePolicyUpdate": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "identityRoles": {
          "$ref": "#/definitions/roles"
        },
        "name": {
          "type": "string"
        },
        "postureCheckRoles": {
          "$ref": "#/definitions/roles"
        },
        "semantic": {
          "$ref": "#/definitions/semantic"
        },
        "serviceRoles": {
          "$ref": "#/definitions/roles"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/dialBind"
        }
      }
    },
    "serviceUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "encryptionRequired": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "terminatorStrategy": {
          "type": "string"
        }
      }
    },
    "sessionCreate": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "type": {
          "$ref": "#/definitions/dialBind"
        }
      }
    },
    "sessionCreateEnvelope": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/sessionDetail"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "sessionDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "type",
            "apiSessionId",
            "apiSession",
            "serviceId",
            "service",
            "token",
            "edgeRouters"
          ],
          "properties": {
            "apiSession": {
              "$ref": "#/definitions/entityRef"
            },
            "apiSessionId": {
              "type": "string"
            },
            "edgeRouters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/sessionEdgeRouter"
              }
            },
            "service": {
              "$ref": "#/definitions/entityRef"
            },
            "serviceId": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/dialBind"
            }
          }
        }
      ]
    },
    "sessionEdgeRouter": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "urls": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "sessionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/sessionDetail"
      }
    },
    "specBodyDetail": {
      "type": "string"
    },
    "specDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "specList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/specDetail"
      }
    },
    "tags": {
      "description": "A map of user defined fields and values. The values are limited to the following types/values: null, string, boolean",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-omitempty": false
    },
    "terminatorCost": {
      "type": "integer",
      "maximum": 65535,
      "minimum": 0,
      "x-nullable": true
    },
    "terminatorCreate": {
      "type": "object",
      "required": [
        "service",
        "router",
        "address",
        "binding"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "binding": {
          "type": "string"
        },
        "cost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "identity": {
          "type": "string"
        },
        "identitySecret": {
          "type": "string",
          "format": "byte"
        },
        "precedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "router": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "terminatorDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "serviceId",
            "service",
            "routerId",
            "router",
            "binding",
            "address",
            "identity",
            "cost",
            "precedence",
            "dynamicCost"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "binding": {
              "type": "string"
            },
            "cost": {
              "$ref": "#/definitions/terminatorCost"
            },
            "dynamicCost": {
              "$ref": "#/definitions/terminatorCost"
            },
            "identity": {
              "type": "string"
            },
            "precedence": {
              "$ref": "#/definitions/terminatorPrecedence"
            },
            "router": {
              "$ref": "#/definitions/entityRef"
            },
            "routerId": {
              "type": "string"
            },
            "service": {
              "$ref": "#/definitions/entityRef"
            },
            "serviceId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "terminatorDetailLimited": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "serviceId",
            "service",
            "routerId",
            "identity"
          ],
          "properties": {
            "identity": {
              "type": "string"
            },
            "routerId": {
              "type": "string"
            },
            "service": {
              "$ref": "#/definitions/entityRef"
            },
            "serviceId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "terminatorList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/terminatorDetail"
      }
    },
    "terminatorPatch": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "binding": {
          "type": "string"
        },
        "cost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "precedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "router": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "terminatorPrecedence": {
      "type": "string",
      "enum": [
        "default",
        "required",
        "failed"
      ]
    },
    "terminatorUpdate": {
      "type": "object",
      "required": [
        "service",
        "router",
        "address",
        "binding"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "binding": {
          "type": "string"
        },
        "cost": {
          "$ref": "#/definitions/terminatorCost"
        },
        "precedence": {
          "$ref": "#/definitions/terminatorPrecedence"
        },
        "router": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "transitRouterCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "transitRouterDetail": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "type": "object",
          "required": [
            "name",
            "isVerified",
            "isOnline",
            "fingerprint"
          ],
          "properties": {
            "enrollmentCreatedAt": {
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "enrollmentExpiresAt": {
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "enrollmentJwt": {
              "type": "string",
              "x-nullable": true
            },
            "enrollmentToken": {
              "type": "string",
              "x-nullable": true
            },
            "fingerprint": {
              "type": "string"
            },
            "isOnline": {
              "type": "boolean"
            },
            "isVerified": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "transitRouterList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/transitRouterDetail"
      }
    },
    "transitRouterPatch": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "transitRouterUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "username": {
      "type": "string",
      "maxLength": 100,
      "minLength": 4
    },
    "username-nullable": {
      "type": "string",
      "maxLength": 100,
      "minLength": 4,
      "x-nullable": true
    },
    "version": {
      "type": "object",
      "properties": {
        "apiVersions": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/apiVersion"
            }
          }
        },
        "buildDate": {
          "type": "string",
          "example": "2020-02-11 16:09:08"
        },
        "revision": {
          "type": "string",
          "example": "ea556fc18740"
        },
        "runtimeVersion": {
          "type": "string",
          "example": "go1.13.5"
        },
        "version": {
          "type": "string",
          "example": "v0.9.0"
        }
      }
    },
    "versionInfo": {
      "type": "object",
      "required": [
        "os",
        "version",
        "arch",
        "buildDate",
        "revision"
      ],
      "properties": {
        "arch": {
          "type": "string"
        },
        "buildDate": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "authMethod": {
      "enum": [
        "password",
        "cert"
      ],
      "type": "string",
      "name": "method",
      "in": "query",
      "required": true
    },
    "filter": {
      "type": "string",
      "name": "filter",
      "in": "query"
    },
    "id": {
      "type": "string",
      "description": "The id of the requested resource",
      "name": "id",
      "in": "path",
      "required": true
    },
    "limit": {
      "type": "integer",
      "name": "limit",
      "in": "query"
    },
    "offset": {
      "type": "integer",
      "name": "offset",
      "in": "query"
    },
    "roleFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "name": "roleFilter",
      "in": "query"
    },
    "roleSemantic": {
      "type": "string",
      "name": "roleSemantic",
      "in": "query"
    },
    "serviceId": {
      "type": "string",
      "description": "The id of a service",
      "name": "serviceId",
      "in": "path",
      "required": true
    },
    "token": {
      "type": "string",
      "format": "uuid",
      "name": "token",
      "in": "query",
      "required": true
    },
    "token-optional": {
      "type": "string",
      "format": "uuid",
      "name": "token",
      "in": "query"
    }
  },
  "responses": {
    "badRequestResponse": {
      "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {}
            },
            "cause": {
              "details": {
                "context": "(root)",
                "field": "(root)",
                "property": "fooField3"
              },
              "field": "(root)",
              "message": "(root): fooField3 is required",
              "type": "required",
              "value": {
                "fooField": "abc",
                "fooField2": "def"
              }
            },
            "causeMessage": "schema validation failed",
            "code": "COULD_NOT_VALIDATE",
            "message": "The supplied request contains an invalid document",
            "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "cannotDeleteReferencedResourceResponse": {
      "description": "The resource requested to be removed/altered cannot be as it is referenced by another object.",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {
                "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
              }
            },
            "causeMessage": "referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42",
            "code": "CONFLICT_CANNOT_MODIFY_REFERENCED",
            "message": "The resource cannot be deleted/modified. Remove all referencing resources first.",
            "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "createCurrentApiSessionCertificateResponse": {
      "description": "A response of a create API Session certificate",
      "schema": {
        "$ref": "#/definitions/createCurrentApiSessionCertificateEnvelope"
      }
    },
    "createResponse": {
      "description": "The create request was successful and the resource has been added at the following location",
      "schema": {
        "$ref": "#/definitions/createEnvelope"
      }
    },
    "dataIntegrityCheckResult": {
      "description": "A list of data integrity issues found",
      "schema": {
        "$ref": "#/definitions/dataIntegrityCheckResultEnvelope"
      }
    },
    "deleteResponse": {
      "description": "The delete request was successful and the resource has been removed",
      "schema": {
        "$ref": "#/definitions/empty"
      }
    },
    "detailAPISession": {
      "description": "Retrieves a singular API Session by id",
      "schema": {
        "$ref": "#/definitions/detailAPISessionEnvelope"
      }
    },
    "detailAuthenticator": {
      "description": "A singular authenticator resource",
      "schema": {
        "$ref": "#/definitions/detailAuthenticatorEnvelope"
      }
    },
    "detailCa": {
      "description": "A singular Certificate Authority (CA) resource",
      "schema": {
        "$ref": "#/definitions/detailCaEnvelope"
      }
    },
    "detailConfig": {
      "description": "A singular config resource",
      "schema": {
        "$ref": "#/definitions/detailConfigEnvelope"
      }
    },
    "detailConfigType": {
      "description": "A singular config-type resource",
      "schema": {
        "$ref": "#/definitions/detailConfigTypeEnvelope"
      }
    },
    "detailCurrentAPISession": {
      "description": "The API session associated with the session used to issue the request",
      "schema": {
        "$ref": "#/definitions/currentAPISessionDetailEnvelope"
      },
      "examples": {
        "default": {
          "data": {
            "_links": {
              "self": {
                "href": "./current-api-session"
              }
            },
            "configTypes": [],
            "createdAt": "2020-03-09T19:03:49.1883693Z",
            "expiresAt": "2020-03-09T19:34:21.5600897Z",
            "id": "27343114-b44f-406e-9981-f3c4f2f28d54",
            "identity": {
              "_links": {
                "self": {
                  "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d"
                }
              },
              "id": "66352d7b-a6b2-4ce9-85bb-9f18e318704d",
              "name": "Default Admin",
              "urlName": "identities"
            },
            "tags": [
              {
                "userField1": 123
              },
              {
                "userField2": "asdf"
              }
            ],
            "token": "28bb0ed2-0577-4632-ae70-d17106b92871",
            "updatedAt": "2020-03-09T19:04:21.5600897Z"
          },
          "meta": {}
        }
      }
    },
    "detailCurrentApiSessionCertificate": {
      "description": "A response containing a single API Session certificate",
      "schema": {
        "$ref": "#/definitions/detailCurrentApiSessionCertificateEnvelope"
      }
    },
    "detailCurrentIdentity": {
      "description": "The identity associated with the API Session used to issue the request",
      "schema": {
        "$ref": "#/definitions/currentIdentityDetailEnvelope"
      },
      "examples": {
        "default": {
          "data": {
            "_links": {
              "edge-router-policies": {
                "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d/edge-routers"
              },
              "self": {
                "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d"
              },
              "service-policies": {
                "href": "./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d/identities"
              }
            },
            "authenticators": {
              "updb": {
                "username": "admin"
              }
            },
            "createdAt": "2020-01-13T16:38:13.6854788Z",
            "enrollment": {},
            "id": "66352d7b-a6b2-4ce9-85bb-9f18e318704d",
            "isAdmin": true,
            "isDefaultAdmin": true,
            "name": "Default Admin",
            "roleAttributes": {
              "$ref": "#/definitions/attributes"
            },
            "tags": {},
            "type": {
              "_links": {
                "self": {
                  "href": "./identity-types/577104f2-1e3a-4947-a927-7383baefbc9a"
                }
              },
              "id": "577104f2-1e3a-4947-a927-7383baefbc9a",
              "name": "User",
              "urlName": "identity-types"
            },
            "updatedAt": "2020-01-13T16:38:13.6854788Z"
          },
          "meta": {}
        }
      }
    },
    "detailEdgeRouter": {
      "description": "A singular edge router resource",
      "schema": {
        "$ref": "#/definitions/detailedEdgeRouterEnvelope"
      }
    },
    "detailEdgeRouterPolicy": {
      "description": "A single edge router policy",
      "schema": {
        "$ref": "#/definitions/detailEdgeRouterPolicyEnvelope"
      }
    },
    "detailEnrollment": {
      "description": "A singular enrollment resource",
      "schema": {
        "$ref": "#/definitions/detailEnrollmentEnvelope"
      }
    },
    "detailGeoRegion": {
      "description": "A single geo-region",
      "schema": {
        "$ref": "#/definitions/detailGeoRegionEnvelope"
      }
    },
    "detailIdentity": {
      "description": "A signle identity",
      "schema": {
        "$ref": "#/definitions/detailIdentityEnvelope"
      }
    },
    "detailIdentityType": {
      "description": "A single identity type",
      "schema": {
        "$ref": "#/definitions/detailIdentityTypeEnvelope"
      }
    },
    "detailPostureCheck": {
      "description": "Retrieves a singular posture check by id",
      "schema": {
        "$ref": "#/definitions/detailPostureCheckEnvelope"
      }
    },
    "detailPostureCheckType": {
      "description": "Retrieves a singular posture check type by id",
      "schema": {
        "$ref": "#/definitions/detailPostureCheckTypeEnvelope"
      }
    },
    "detailService": {
      "description": "A single service",
      "schema": {
        "$ref": "#/definitions/detailServiceEnvelope"
      }
    },
    "detailServiceEdgePolicy": {
      "description": "A single service edge router policy",
      "schema": {
        "$ref": "#/definitions/detailServiceEdgePolicyEnvelope"
      }
    },
    "detailServicePolicy": {
      "description": "A single service policy",
      "schema": {
        "$ref": "#/definitions/detailServicePolicyEnvelop"
      }
    },
    "detailSession": {
      "description": "A single session",
      "schema": {
        "$ref": "#/definitions/detailSessionEnvelope"
      }
    },
    "detailSpec": {
      "description": "A single specification",
      "schema": {
        "$ref": "#/definitions/detailSpecEnvelope"
      }
    },
    "detailSpecBody": {
      "description": "Returns the document that represents the specification",
      "schema": {
        "$ref": "#/definitions/detailSpecBodyEnvelope"
      }
    },
    "detailTerminator": {
      "description": "A single terminator",
      "schema": {
        "$ref": "#/definitions/detailTerminatorEnvelope"
      }
    },
    "detailTransitRouter": {
      "description": "A single transit router",
      "schema": {
        "$ref": "#/definitions/detailTransitRouterEnvelope"
      }
    },
    "emptyResponse": {
      "description": "Base empty response",
      "schema": {
        "$ref": "#/definitions/empty"
      }
    },
    "erottResponse": {
      "description": "A response containing the edge routers signed certificates (server chain, server cert, CAs).",
      "schema": {
        "$ref": "#/definitions/enrollmentCertsEnvelope"
      }
    },
    "getIdentityPolicyAdvice": {
      "description": "Returns the document that represents the policy advice",
      "schema": {
        "$ref": "#/definitions/getIdentityPolicyAdviceEnvelope"
      }
    },
    "getIdentityPostureData": {
      "description": "Returns the document that represents posture data",
      "schema": {
        "$ref": "#/definitions/getIdentityPostureDataEnvelope"
      }
    },
    "invalidAuthResponse": {
      "description": "The authentication request could not be processed as the credentials are invalid",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {}
            },
            "cause": "",
            "causeMessage": "",
            "code": "INVALID_AUTH",
            "message": "The authentication request failed",
            "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "listAPISessions": {
      "description": "A list of active API Sessions",
      "schema": {
        "$ref": "#/definitions/listAPISessionsEnvelope"
      }
    },
    "listAuthenticators": {
      "description": "A list of authenticators",
      "schema": {
        "$ref": "#/definitions/listAuthenticatorsEnvelope"
      }
    },
    "listCas": {
      "description": "A list of Certificate Authorities (CAs)",
      "schema": {
        "$ref": "#/definitions/listCasEnvelope"
      }
    },
    "listConfigTypes": {
      "description": "A list of config-types",
      "schema": {
        "$ref": "#/definitions/listConfigTypesEnvelope"
      }
    },
    "listConfigs": {
      "description": "A list of configs",
      "schema": {
        "$ref": "#/definitions/listConfigsEnvelope"
      }
    },
    "listCurrentApiSessionCertificates": {
      "description": "A list of the current API Session's certificate",
      "schema": {
        "$ref": "#/definitions/listCurrentAPISessionCertificatesEnvelope"
      }
    },
    "listCurrentApiSessionServiceUpdates": {
      "description": "Data indicating necessary service updates",
      "schema": {
        "$ref": "#/definitions/listCurrentApiSessionServiceUpdatesEnvelope"
      }
    },
    "listEdgeRouterPolicies": {
      "description": "A list of edge router policies",
      "schema": {
        "$ref": "#/definitions/listEdgeRouterPoliciesEnvelope"
      }
    },
    "listEdgeRouters": {
      "description": "A list of edge routers",
      "schema": {
        "$ref": "#/definitions/listEdgeRoutersEnvelope"
      }
    },
    "listEnrollments": {
      "description": "A list of enrollments",
      "schema": {
        "$ref": "#/definitions/listEnrollmentsEnvelope"
      }
    },
    "listGeoRegions": {
      "description": "A list of geo-regions",
      "schema": {
        "$ref": "#/definitions/listGeoRegionsEnvelope"
      }
    },
    "listIdentities": {
      "description": "A list of identities",
      "schema": {
        "$ref": "#/definitions/listIdentitiesEnvelope"
      }
    },
    "listIdentityTypes": {
      "description": "A list of identity types",
      "schema": {
        "$ref": "#/definitions/listIdentityTypesEnvelope"
      }
    },
    "listPostureCheckTypes": {
      "description": "A list of posture check types",
      "schema": {
        "$ref": "#/definitions/listPostureCheckTypesEnvelope"
      }
    },
    "listPostureChecks": {
      "description": "A list of posture checks",
      "schema": {
        "$ref": "#/definitions/listPostureCheckEnvelope"
      }
    },
    "listProtocols": {
      "description": "A list of supported Edge protocols",
      "schema": {
        "$ref": "#/definitions/listProtocolsEnvelope"
      }
    },
    "listRoleAttributes": {
      "description": "A list of role attributes",
      "schema": {
        "$ref": "#/definitions/listRoleAttributesEnvelope"
      }
    },
    "listServiceConfigs": {
      "description": "A list of service configs",
      "schema": {
        "$ref": "#/definitions/listServiceConfigsEnvelope"
      }
    },
    "listServiceEdgeRouterPolicies": {
      "description": "A list of service edge router policies",
      "schema": {
        "$ref": "#/definitions/listServiceEdgeRouterPoliciesEnvelope"
      }
    },
    "listServicePolicies": {
      "description": "A list of service policies",
      "schema": {
        "$ref": "#/definitions/listServicePoliciesEnvelope"
      }
    },
    "listServices": {
      "description": "A list of services",
      "schema": {
        "$ref": "#/definitions/listServicesEnvelope"
      }
    },
    "listSessions": {
      "description": "A list of sessions",
      "schema": {
        "$ref": "#/definitions/listSessionsEnvelope"
      }
    },
    "listSpecs": {
      "description": "A list of specifications",
      "schema": {
        "$ref": "#/definitions/listSpecsEnvelope"
      }
    },
    "listSummaryCounts": {
      "description": "Entity counts scopped to the current identitie's access",
      "schema": {
        "$ref": "#/definitions/listSummaryCountsEnvelope"
      }
    },
    "listTerminators": {
      "description": "A list of terminators",
      "schema": {
        "$ref": "#/definitions/listTerminatorsEnvelope"
      }
    },
    "listTransitRouters": {
      "description": "A list of specifications",
      "schema": {
        "$ref": "#/definitions/listTransitRoutersEnvelope"
      }
    },
    "listVersion": {
      "description": "Version information for the controller",
      "schema": {
        "$ref": "#/definitions/listVersionEnvelope"
      }
    },
    "notFoundResponse": {
      "description": "The requested resource does not exist",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {
                "id": "71a3000f-7dda-491a-9b90-a19f4ee6c406"
              }
            },
            "cause": null,
            "causeMessage": "",
            "code": "NOT_FOUND",
            "message": "The resource requested was not found or is no longer available",
            "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "patchResponse": {
      "description": "The patch request was successful and the resource has been altered",
      "schema": {
        "$ref": "#/definitions/empty"
      }
    },
    "rateLimitedResponse": {
      "description": "The resource requested is rate limited and the rate limit has been exceeded",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {}
            },
            "causeMessage": "you have hit a rate limit in the requested operation",
            "code": "RATE_LIMITED",
            "message": "The resource is rate limited and the rate limit has been exceeded. Please try again later",
            "requestId": "270908d6-f2ef-4577-b973-67bec18ae376"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "sessionCreateResponse": {
      "description": "The create request was successful and the resource has been added at the following location.",
      "schema": {
        "$ref": "#/definitions/sessionCreateEnvelope"
      }
    },
    "unauthorizedResponse": {
      "description": "The currently supplied session does not have the correct access rights to request this resource",
      "schema": {
        "$ref": "#/definitions/apiErrorEnvelope"
      },
      "examples": {
        "application/json": {
          "error": {
            "args": {
              "urlVars": {}
            },
            "cause": "",
            "causeMessage": "",
            "code": "UNAUTHORIZED",
            "message": "The request could not be completed. The session is not authorized or the credentials are invalid",
            "requestId": "0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f"
          },
          "meta": {
            "apiEnrolmentVersion": "0.0.1",
            "apiVersion": "0.0.1"
          }
        }
      }
    },
    "updateResponse": {
      "description": "The update request was successful and the resource has been altered",
      "schema": {
        "$ref": "#/definitions/empty"
      }
    },
    "zitiSignedCert": {
      "description": "A PEM encoded certificate signed by the internal Ziti CA",
      "schema": {
        "type": "string"
      },
      "examples": {
        "application/x-x509-user-cert": "-----BEGIN CERTIFICATE-----\nMIICzDCCAlGgAwIBAgIRAPkVg1jVKqnNGFpSB3lPbaIwCgYIKoZIzj0EAwIwXjEL\nMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMRMwEQYDVQQKDApOZXRGb3VuZHJ5MS0w\nKwYDVQQDDCROZXRGb3VuZHJ5IFppdGkgRXh0ZXJuYWwgQVBJIFJvb3QgQ0EwHhcN\nMTgxMTE1MTI1NzE3WhcNMTkxMTI1MTI1NzE3WjBrMQswCQYDVQQGEwJVUzELMAkG\nA1UECAwCTkMxEjAQBgNVBAcMCUNoYXJsb3R0ZTETMBEGA1UECgwKTmV0Rm91bmRy\neTEPMA0GA1UECwwGQWR2RGV2MRUwEwYDVQQDDAxaaXRpQ2xpZW50MDEwdjAQBgcq\nhkjOPQIBBgUrgQQAIgNiAATTl2ft+/K9RvDgki9gSr9udNcV2bxD4LrWEdCdXNzF\niVUiEcEte9z/M0JRt8lgo17OjFvS+ecrAmLtIZNmQnH3+9YeafjeNPpvQsMKxlTN\nMnU7Hka11GHc6swQZSyHvlKjgcUwgcIwCQYDVR0TBAIwADARBglghkgBhvhCAQEE\nBAMCBaAwMwYJYIZIAYb4QgENBCYWJE9wZW5TU0wgR2VuZXJhdGVkIENsaWVudCBD\nZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUtx+Tej6lSYdjb8Jbc2QuvoEsI/swHwYDVR0j\nBBgwFoAUcdTlRrnP43ZbQ3PGAbZMPE26+H4wDgYDVR0PAQH/BAQDAgXgMB0GA1Ud\nJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDAKBggqhkjOPQQDAgNpADBmAjEAuXDS\nH7KKMr+la+Yuh8d8Q9cLtXzdS0j6a8e7iOyPJmdWq2WuzNdbCfAfLgKXuxhSAjEA\nsadZrXl1OBv11RGAKdYBIyRmfYUotCFAtCNKcfgBUxci0TDaKDA7r3jnjKT1d7Fs\n-----END CERTIFICATE-----\n"
      }
    }
  },
  "securityDefinitions": {
    "ztSession": {
      "type": "apiKey",
      "name": "zt-session",
      "in": "header"
    }
  }
}`))
}
